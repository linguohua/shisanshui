// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: poker.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xproto {

  /// <summary>Holder for reflection information generated from poker.proto</summary>
  public static partial class PokerReflection {

    #region Descriptor
    /// <summary>File descriptor for poker.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PokerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtwb2tlci5wcm90bxIGeHByb3RvIikKC0dhbWVNZXNzYWdlEgwKBGNvZGUY",
            "ASACKAUSDAoEZGF0YRgCIAEoDCIyCgtNc2dDYXJkSGFuZBIUCgxjYXJkSGFu",
            "ZFR5cGUYASACKAUSDQoFY2FyZHMYAiADKAUijgEKEU1zZ1BsYXllckNhcmRM",
            "aXN0Eg8KB2NoYWlySUQYASACKAUSFwoPY2FyZENvdW50T25IYW5kGAIgAigF",
            "EhMKC2NhcmRzT25IYW5kGAMgAygFEisKDmRpc2NhcmRlZEhhbmRzGAQgAygL",
            "MhMueHByb3RvLk1zZ0NhcmRIYW5kEg0KBWV4dHJhGAUgAygFIlQKB01zZ0Rl",
            "YWwSFQoNYmFua2VyQ2hhaXJJRBgBIAIoBRIyCg9wbGF5ZXJDYXJkTGlzdHMY",
            "AiADKAsyGS54cHJvdG8uTXNnUGxheWVyQ2FyZExpc3QiagoOTXNnQWxsb3dB",
            "Y3Rpb24SDwoHcWFJbmRleBgBIAIoBRIVCg1hY3Rpb25DaGFpcklEGAIgAigF",
            "EhYKDmFsbG93ZWRBY3Rpb25zGAMgAigFEhgKEHRpbWVvdXRJblNlY29uZHMY",
            "BCABKAUitAEKEE1zZ0FsbG93UmVBY3Rpb24SDwoHcWFJbmRleBgBIAIoBRIV",
            "Cg1hY3Rpb25DaGFpcklEGAIgAigFEhYKDmFsbG93ZWRBY3Rpb25zGAMgAigF",
            "EhgKEHRpbWVvdXRJblNlY29uZHMYBCABKAUSGQoRcHJldkFjdGlvbkNoYWly",
            "SUQYBSABKAUSKwoOcHJldkFjdGlvbkhhbmQYBiABKAsyEy54cHJvdG8uTXNn",
            "Q2FyZEhhbmQiUAoPTXNnUGxheWVyQWN0aW9uEg8KB3FhSW5kZXgYASACKAUS",
            "DgoGYWN0aW9uGAIgAigFEg0KBWZsYWdzGAMgASgFEg0KBWNhcmRzGAQgAygF",
            "In0KFU1zZ0FjdGlvblJlc3VsdE5vdGlmeRIVCg10YXJnZXRDaGFpcklEGAEg",
            "AigFEg4KBmFjdGlvbhgCIAIoBRIoCgthY3Rpb25IYW5kcxgDIAMoCzITLnhw",
            "cm90by5Nc2dDYXJkSGFuZBITCgtjYXJkc0luV2FsbBgEIAEoBSLPAQoKTXNn",
            "UmVzdG9yZRIgCgdtc2dEZWFsGAEgAigLMg8ueHByb3RvLk1zZ0RlYWwSGQoR",
            "cHJldkFjdGlvbkNoYWlySUQYAiABKAUSKwoOcHJldkFjdGlvbkhhbmQYAyAB",
            "KAsyEy54cHJvdG8uTXNnQ2FyZEhhbmQSFwoPbGFuZGxvcmRDaGFpcklEGAQg",
            "ASgFEhAKCG11bHRpcGxlGAUgASgFEhYKDmxhc3RBd2FyZENhcmRzGAYgAygF",
            "EhQKDHBsYXllcnNMaXN0QRgHIAMoBSJEChdNc2dQbGF5ZXJDb21wYXJlQ29u",
            "dGV4dBIVCg10YXJnZXRDaGFpcklEGAEgAigFEhIKCmhhbmRTY29yZXMYAiAD",
            "KAUiuAEKDk1zZ1BsYXllclNjb3JlEhUKDXRhcmdldENoYWlySUQYASACKAUS",
            "FwoPc3BlY2lhbENhcmRUeXBlGAIgASgFEhIKCnRvdGFsU2NvcmUYAyACKAUS",
            "OAoPY29tcGFyZUNvbnRleHRzGAQgAygLMh8ueHByb3RvLk1zZ1BsYXllckNv",
            "bXBhcmVDb250ZXh0EhAKCGlzV2luQWxsGAUgAigIEhYKDmlzSW52ZXJ0ZWRI",
            "YW5kGAYgAigIIjwKDE1zZ0hhbmRTY29yZRIsCgxwbGF5ZXJTY29yZXMYASAD",
            "KAsyFi54cHJvdG8uTXNnUGxheWVyU2NvcmUijgEKC01zZ0hhbmRPdmVyEg8K",
            "B2VuZFR5cGUYASACKAUSMgoPcGxheWVyQ2FyZExpc3RzGAIgAygLMhkueHBy",
            "b3RvLk1zZ1BsYXllckNhcmRMaXN0EiQKBnNjb3JlcxgDIAEoCzIULnhwcm90",
            "by5Nc2dIYW5kU2NvcmUSFAoMY29udGludWVBYmxlGAQgASgIIjUKEU1zZ1Vw",
            "ZGF0ZUxvY2F0aW9uEg4KBnVzZXJJRBgBIAIoCRIQCghsb2NhdGlvbhgCIAIo",
            "CSIjChBNc2dVcGRhdGVQcm9wQ2ZnEg8KB3Byb3BDZmcYASACKAkq7wMKBkNh",
            "cmRJRBIHCgNSMkgQABIHCgNSMkQQARIHCgNSMkMQAhIHCgNSMlMQAxIHCgNS",
            "M0gQBBIHCgNSM0QQBRIHCgNSM0MQBhIHCgNSM1MQBxIHCgNSNEgQCBIHCgNS",
            "NEQQCRIHCgNSNEMQChIHCgNSNFMQCxIHCgNSNUgQDBIHCgNSNUQQDRIHCgNS",
            "NUMQDhIHCgNSNVMQDxIHCgNSNkgQEBIHCgNSNkQQERIHCgNSNkMQEhIHCgNS",
            "NlMQExIHCgNSN0gQFBIHCgNSN0QQFRIHCgNSN0MQFhIHCgNSN1MQFxIHCgNS",
            "OEgQGBIHCgNSOEQQGRIHCgNSOEMQGhIHCgNSOFMQGxIHCgNSOUgQHBIHCgNS",
            "OUQQHRIHCgNSOUMQHhIHCgNSOVMQHxIICgRSMTBIECASCAoEUjEwRBAhEggK",
            "BFIxMEMQIhIICgRSMTBTECMSBgoCSkgQJBIGCgJKRBAlEgYKAkpDECYSBgoC",
            "SlMQJxIGCgJRSBAoEgYKAlFEECkSBgoCUUMQKhIGCgJRUxArEgYKAktIECwS",
            "BgoCS0QQLRIGCgJLQxAuEgYKAktTEC8SBgoCQUgQMBIGCgJBRBAxEgYKAkFD",
            "EDISBgoCQVMQMxIHCgNKT0IQNBIHCgNKT1IQNRILCgdDQVJETUFYEDYqwAMK",
            "C01lc3NhZ2VDb2RlEg0KCU9QSW52YWxpZBAAEgwKCE9QQWN0aW9uEAESGAoU",
            "T1BBY3Rpb25SZXN1bHROb3RpZnkQAhITCg9PUEFjdGlvbkFsbG93ZWQQAxIV",
            "ChFPUFJlQWN0aW9uQWxsb3dlZBAFEgoKBk9QRGVhbBAGEg4KCk9QSGFuZE92",
            "ZXIQBxINCglPUFJlc3RvcmUQCBIWChJPUFBsYXllckxlYXZlVGFibGUQCRIW",
            "ChJPUFBsYXllckVudGVyVGFibGUQChIUChBPUERpc2JhbmRSZXF1ZXN0EAsS",
            "EwoPT1BEaXNiYW5kTm90aWZ5EAwSEwoPT1BEaXNiYW5kQW5zd2VyEA0SEQoN",
            "T1BQbGF5ZXJSZWFkeRAOEhIKDk9QVGFibGVEZWxldGVkEA8SEQoNT1BUYWJs",
            "ZVVwZGF0ZRAQEhMKD09QVGFibGVTaG93VGlwcxAREg4KCk9QR2FtZU92ZXIQ",
            "EhINCglPUEtpY2tvdXQQExIMCghPUERvbmF0ZRAUEhQKEE9QVXBkYXRlTG9j",
            "YXRpb24QFRIMCghPUDJMb2JieRAWEhMKD09QVXBkYXRlUHJvcENmZxAXQgpa",
            "CC47eHByb3Rv"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Xproto.CardID), typeof(global::Xproto.MessageCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.GameMessage), global::Xproto.GameMessage.Parser, new[]{ "Code", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgCardHand), global::Xproto.MsgCardHand.Parser, new[]{ "CardHandType", "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgPlayerCardList), global::Xproto.MsgPlayerCardList.Parser, new[]{ "ChairID", "CardCountOnHand", "CardsOnHand", "DiscardedHands", "Extra" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgDeal), global::Xproto.MsgDeal.Parser, new[]{ "BankerChairID", "PlayerCardLists" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgAllowAction), global::Xproto.MsgAllowAction.Parser, new[]{ "QaIndex", "ActionChairID", "AllowedActions", "TimeoutInSeconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgAllowReAction), global::Xproto.MsgAllowReAction.Parser, new[]{ "QaIndex", "ActionChairID", "AllowedActions", "TimeoutInSeconds", "PrevActionChairID", "PrevActionHand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgPlayerAction), global::Xproto.MsgPlayerAction.Parser, new[]{ "QaIndex", "Action", "Flags", "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgActionResultNotify), global::Xproto.MsgActionResultNotify.Parser, new[]{ "TargetChairID", "Action", "ActionHands", "CardsInWall" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgRestore), global::Xproto.MsgRestore.Parser, new[]{ "MsgDeal", "PrevActionChairID", "PrevActionHand", "LandlordChairID", "Multiple", "LastAwardCards", "PlayersListA" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgPlayerCompareContext), global::Xproto.MsgPlayerCompareContext.Parser, new[]{ "TargetChairID", "HandScores" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgPlayerScore), global::Xproto.MsgPlayerScore.Parser, new[]{ "TargetChairID", "SpecialCardType", "TotalScore", "CompareContexts", "IsWinAll", "IsInvertedHand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgHandScore), global::Xproto.MsgHandScore.Parser, new[]{ "PlayerScores" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgHandOver), global::Xproto.MsgHandOver.Parser, new[]{ "EndType", "PlayerCardLists", "Scores", "ContinueAble" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgUpdateLocation), global::Xproto.MsgUpdateLocation.Parser, new[]{ "UserID", "Location" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgUpdatePropCfg), global::Xproto.MsgUpdatePropCfg.Parser, new[]{ "PropCfg" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 牌的ID
  /// </summary>
  public enum CardID {
    /// <summary>
    ///红桃2
    /// </summary>
    [pbr::OriginalName("R2H")] R2H = 0,
    /// <summary>
    ///方块2
    /// </summary>
    [pbr::OriginalName("R2D")] R2D = 1,
    /// <summary>
    ///梅花2
    /// </summary>
    [pbr::OriginalName("R2C")] R2C = 2,
    /// <summary>
    ///黑桃2
    /// </summary>
    [pbr::OriginalName("R2S")] R2S = 3,
    /// <summary>
    /// 3
    /// </summary>
    [pbr::OriginalName("R3H")] R3H = 4,
    [pbr::OriginalName("R3D")] R3D = 5,
    [pbr::OriginalName("R3C")] R3C = 6,
    [pbr::OriginalName("R3S")] R3S = 7,
    /// <summary>
    /// 4
    /// </summary>
    [pbr::OriginalName("R4H")] R4H = 8,
    [pbr::OriginalName("R4D")] R4D = 9,
    [pbr::OriginalName("R4C")] R4C = 10,
    [pbr::OriginalName("R4S")] R4S = 11,
    /// <summary>
    /// 5
    /// </summary>
    [pbr::OriginalName("R5H")] R5H = 12,
    [pbr::OriginalName("R5D")] R5D = 13,
    [pbr::OriginalName("R5C")] R5C = 14,
    [pbr::OriginalName("R5S")] R5S = 15,
    /// <summary>
    /// 6
    /// </summary>
    [pbr::OriginalName("R6H")] R6H = 16,
    [pbr::OriginalName("R6D")] R6D = 17,
    [pbr::OriginalName("R6C")] R6C = 18,
    [pbr::OriginalName("R6S")] R6S = 19,
    /// <summary>
    /// 7
    /// </summary>
    [pbr::OriginalName("R7H")] R7H = 20,
    [pbr::OriginalName("R7D")] R7D = 21,
    [pbr::OriginalName("R7C")] R7C = 22,
    [pbr::OriginalName("R7S")] R7S = 23,
    /// <summary>
    /// 8
    /// </summary>
    [pbr::OriginalName("R8H")] R8H = 24,
    [pbr::OriginalName("R8D")] R8D = 25,
    [pbr::OriginalName("R8C")] R8C = 26,
    [pbr::OriginalName("R8S")] R8S = 27,
    /// <summary>
    /// 9
    /// </summary>
    [pbr::OriginalName("R9H")] R9H = 28,
    [pbr::OriginalName("R9D")] R9D = 29,
    [pbr::OriginalName("R9C")] R9C = 30,
    [pbr::OriginalName("R9S")] R9S = 31,
    /// <summary>
    /// 10
    /// </summary>
    [pbr::OriginalName("R10H")] R10H = 32,
    [pbr::OriginalName("R10D")] R10D = 33,
    [pbr::OriginalName("R10C")] R10C = 34,
    [pbr::OriginalName("R10S")] R10S = 35,
    /// <summary>
    /// Jack
    /// </summary>
    [pbr::OriginalName("JH")] Jh = 36,
    [pbr::OriginalName("JD")] Jd = 37,
    [pbr::OriginalName("JC")] Jc = 38,
    [pbr::OriginalName("JS")] Js = 39,
    /// <summary>
    /// Queen
    /// </summary>
    [pbr::OriginalName("QH")] Qh = 40,
    [pbr::OriginalName("QD")] Qd = 41,
    [pbr::OriginalName("QC")] Qc = 42,
    [pbr::OriginalName("QS")] Qs = 43,
    /// <summary>
    /// King
    /// </summary>
    [pbr::OriginalName("KH")] Kh = 44,
    [pbr::OriginalName("KD")] Kd = 45,
    [pbr::OriginalName("KC")] Kc = 46,
    [pbr::OriginalName("KS")] Ks = 47,
    /// <summary>
    /// ACE
    /// </summary>
    [pbr::OriginalName("AH")] Ah = 48,
    [pbr::OriginalName("AD")] Ad = 49,
    [pbr::OriginalName("AC")] Ac = 50,
    [pbr::OriginalName("AS")] As = 51,
    /// <summary>
    /// joker black，黑小丑
    /// </summary>
    [pbr::OriginalName("JOB")] Job = 52,
    /// <summary>
    /// joker red，红小丑
    /// </summary>
    [pbr::OriginalName("JOR")] Jor = 53,
    [pbr::OriginalName("CARDMAX")] Cardmax = 54,
  }

  public enum MessageCode {
    /// <summary>
    /// 无效消息码
    /// </summary>
    [pbr::OriginalName("OPInvalid")] Opinvalid = 0,
    /// <summary>
    /// 动作
    /// </summary>
    [pbr::OriginalName("OPAction")] Opaction = 1,
    /// <summary>
    /// 动作通知
    /// </summary>
    [pbr::OriginalName("OPActionResultNotify")] OpactionResultNotify = 2,
    /// <summary>
    /// 动作允许，对一个玩家，请求其出牌等
    /// </summary>
    [pbr::OriginalName("OPActionAllowed")] OpactionAllowed = 3,
    /// <summary>
    /// 动作允许，对多个玩家，在某个玩家出牌后，请求其余玩家吃椪杠胡等
    /// </summary>
    [pbr::OriginalName("OPReActionAllowed")] OpreActionAllowed = 5,
    /// <summary>
    /// 发牌
    /// </summary>
    [pbr::OriginalName("OPDeal")] Opdeal = 6,
    /// <summary>
    /// 本手牌结果
    /// </summary>
    [pbr::OriginalName("OPHandOver")] OphandOver = 7,
    /// <summary>
    /// 断线、奔溃恢复，注意恢复过程是由若干个消息构成，先是OPTableUpdate，然后是OPRestore(消息体是MsgRestore)，然后是OPActionAllowed或者OPReActionAllowed
    /// </summary>
    [pbr::OriginalName("OPRestore")] Oprestore = 8,
    /// <summary>
    /// 玩家离开房间，客户端会请求服务器其离开房间
    /// </summary>
    [pbr::OriginalName("OPPlayerLeaveTable")] OpplayerLeaveTable = 9,
    /// <summary>
    /// 玩家进入房间，客户端不会发送该消息，仅用于通知客户端
    /// </summary>
    [pbr::OriginalName("OPPlayerEnterTable")] OpplayerEnterTable = 10,
    /// <summary>
    /// 解散牌局
    /// </summary>
    [pbr::OriginalName("OPDisbandRequest")] OpdisbandRequest = 11,
    /// <summary>
    /// 解散牌局询问其他玩家是否同意，或者通告解散的当前状态（谁同意，谁拒绝，谁正在思考）
    /// </summary>
    [pbr::OriginalName("OPDisbandNotify")] OpdisbandNotify = 12,
    /// <summary>
    /// 解散牌局答复
    /// </summary>
    [pbr::OriginalName("OPDisbandAnswer")] OpdisbandAnswer = 13,
    /// <summary>
    /// 玩家准备好
    /// </summary>
    [pbr::OriginalName("OPPlayerReady")] OpplayerReady = 14,
    /// <summary>
    /// 房间被删除，本消息没有消息体，仅一个命令字，客户端收到后退出房间
    /// </summary>
    [pbr::OriginalName("OPTableDeleted")] OptableDeleted = 15,
    /// <summary>
    /// 更新房间信息，主要是玩家状态变更
    /// </summary>
    [pbr::OriginalName("OPTableUpdate")] OptableUpdate = 16,
    /// <summary>
    /// 要求客户端显示一段提示信息
    /// </summary>
    [pbr::OriginalName("OPTableShowTips")] OptableShowTips = 17,
    /// <summary>
    /// 房间游戏结束
    /// </summary>
    [pbr::OriginalName("OPGameOver")] OpgameOver = 18,
    /// <summary>
    /// 踢玩家出房间
    /// </summary>
    [pbr::OriginalName("OPKickout")] Opkickout = 19,
    /// <summary>
    /// 玩家打赏给另一个玩家
    /// </summary>
    [pbr::OriginalName("OPDonate")] Opdonate = 20,
    /// <summary>
    /// 更新玩家的GPS定位信息
    /// </summary>
    [pbr::OriginalName("OPUpdateLocation")] OpupdateLocation = 21,
    /// <summary>
    /// 切换到大厅，连接断开，但是服务器保留玩家座位，并重置状态到offline状态，当且仅当游戏没开始时允许所有客户端发送这个请求
    /// </summary>
    [pbr::OriginalName("OP2Lobby")] Op2Lobby = 22,
    /// <summary>
    /// 更新牌局内的道具配置
    /// </summary>
    [pbr::OriginalName("OPUpdatePropCfg")] OpupdatePropCfg = 23,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 消息包装，把其他消息体格式化为byte array，
  /// 加上消息码构成一个GameMessage，便于解析
  /// </summary>
  public sealed partial class GameMessage : pb::IMessage<GameMessage> {
    private static readonly pb::MessageParser<GameMessage> _parser = new pb::MessageParser<GameMessage>(() => new GameMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMessage(GameMessage other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMessage Clone() {
      return new GameMessage(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_ ?? DataDefaultValue; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasData {
      get { return data_ != null; }
    }
    /// <summary>Clears the value of the "data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasData) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasData) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasData) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 牌组
  /// </summary>
  public sealed partial class MsgCardHand : pb::IMessage<MsgCardHand> {
    private static readonly pb::MessageParser<MsgCardHand> _parser = new pb::MessageParser<MsgCardHand>(() => new MsgCardHand());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCardHand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCardHand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCardHand(MsgCardHand other) : this() {
      _hasBits0 = other._hasBits0;
      cardHandType_ = other.cardHandType_;
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCardHand Clone() {
      return new MsgCardHand(this);
    }

    /// <summary>Field number for the "cardHandType" field.</summary>
    public const int CardHandTypeFieldNumber = 1;
    private readonly static int CardHandTypeDefaultValue = 0;

    private int cardHandType_;
    /// <summary>
    /// 牌组类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardHandType {
      get { if ((_hasBits0 & 1) != 0) { return cardHandType_; } else { return CardHandTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cardHandType_ = value;
      }
    }
    /// <summary>Gets whether the "cardHandType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCardHandType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cardHandType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCardHandType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 牌列表，对于一些有规律的牌组例如同花顺，可以只写第一个牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCardHand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCardHand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardHandType != other.CardHandType) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCardHandType) hash ^= CardHandType.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCardHandType) {
        output.WriteRawTag(8);
        output.WriteInt32(CardHandType);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCardHandType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardHandType);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCardHand other) {
      if (other == null) {
        return;
      }
      if (other.HasCardHandType) {
        CardHandType = other.CardHandType;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardHandType = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家牌列表
  /// </summary>
  public sealed partial class MsgPlayerCardList : pb::IMessage<MsgPlayerCardList> {
    private static readonly pb::MessageParser<MsgPlayerCardList> _parser = new pb::MessageParser<MsgPlayerCardList>(() => new MsgPlayerCardList());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgPlayerCardList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerCardList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerCardList(MsgPlayerCardList other) : this() {
      _hasBits0 = other._hasBits0;
      chairID_ = other.chairID_;
      cardCountOnHand_ = other.cardCountOnHand_;
      cardsOnHand_ = other.cardsOnHand_.Clone();
      discardedHands_ = other.discardedHands_.Clone();
      extra_ = other.extra_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerCardList Clone() {
      return new MsgPlayerCardList(this);
    }

    /// <summary>Field number for the "chairID" field.</summary>
    public const int ChairIDFieldNumber = 1;
    private readonly static int ChairIDDefaultValue = 0;

    private int chairID_;
    /// <summary>
    /// 玩家座位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairID {
      get { if ((_hasBits0 & 1) != 0) { return chairID_; } else { return ChairIDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        chairID_ = value;
      }
    }
    /// <summary>Gets whether the "chairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChairID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "chairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChairID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cardCountOnHand" field.</summary>
    public const int CardCountOnHandFieldNumber = 2;
    private readonly static int CardCountOnHandDefaultValue = 0;

    private int cardCountOnHand_;
    /// <summary>
    /// 玩家手上的牌数量（用于其他玩家显示手牌数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardCountOnHand {
      get { if ((_hasBits0 & 2) != 0) { return cardCountOnHand_; } else { return CardCountOnHandDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cardCountOnHand_ = value;
      }
    }
    /// <summary>Gets whether the "cardCountOnHand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCardCountOnHand {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cardCountOnHand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCardCountOnHand() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cardsOnHand" field.</summary>
    public const int CardsOnHandFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_cardsOnHand_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> cardsOnHand_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家手上的牌（暗牌）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardsOnHand {
      get { return cardsOnHand_; }
    }

    /// <summary>Field number for the "discardedHands" field.</summary>
    public const int DiscardedHandsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xproto.MsgCardHand> _repeated_discardedHands_codec
        = pb::FieldCodec.ForMessage(34, global::Xproto.MsgCardHand.Parser);
    private readonly pbc::RepeatedField<global::Xproto.MsgCardHand> discardedHands_ = new pbc::RepeatedField<global::Xproto.MsgCardHand>();
    /// <summary>
    /// 打出去的牌组列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xproto.MsgCardHand> DiscardedHands {
      get { return discardedHands_; }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_extra_codec
        = pb::FieldCodec.ForInt32(40);
    private readonly pbc::RepeatedField<int> extra_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// extra data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Extra {
      get { return extra_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgPlayerCardList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgPlayerCardList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairID != other.ChairID) return false;
      if (CardCountOnHand != other.CardCountOnHand) return false;
      if(!cardsOnHand_.Equals(other.cardsOnHand_)) return false;
      if(!discardedHands_.Equals(other.discardedHands_)) return false;
      if(!extra_.Equals(other.extra_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChairID) hash ^= ChairID.GetHashCode();
      if (HasCardCountOnHand) hash ^= CardCountOnHand.GetHashCode();
      hash ^= cardsOnHand_.GetHashCode();
      hash ^= discardedHands_.GetHashCode();
      hash ^= extra_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasChairID) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairID);
      }
      if (HasCardCountOnHand) {
        output.WriteRawTag(16);
        output.WriteInt32(CardCountOnHand);
      }
      cardsOnHand_.WriteTo(output, _repeated_cardsOnHand_codec);
      discardedHands_.WriteTo(output, _repeated_discardedHands_codec);
      extra_.WriteTo(output, _repeated_extra_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairID);
      }
      if (HasCardCountOnHand) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardCountOnHand);
      }
      size += cardsOnHand_.CalculateSize(_repeated_cardsOnHand_codec);
      size += discardedHands_.CalculateSize(_repeated_discardedHands_codec);
      size += extra_.CalculateSize(_repeated_extra_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgPlayerCardList other) {
      if (other == null) {
        return;
      }
      if (other.HasChairID) {
        ChairID = other.ChairID;
      }
      if (other.HasCardCountOnHand) {
        CardCountOnHand = other.CardCountOnHand;
      }
      cardsOnHand_.Add(other.cardsOnHand_);
      discardedHands_.Add(other.discardedHands_);
      extra_.Add(other.extra_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairID = input.ReadInt32();
            break;
          }
          case 16: {
            CardCountOnHand = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            cardsOnHand_.AddEntriesFrom(input, _repeated_cardsOnHand_codec);
            break;
          }
          case 34: {
            discardedHands_.AddEntriesFrom(input, _repeated_discardedHands_codec);
            break;
          }
          case 42:
          case 40: {
            extra_.AddEntriesFrom(input, _repeated_extra_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 发牌
  /// 服务器下发给客户端
  /// 客户端收到消息后，做如下处理：
  /// 1. 显示自己的牌
  /// 2. 显示其他人的牌（暗牌，庄家14张）
  /// 3. 显示庄家
  /// </summary>
  public sealed partial class MsgDeal : pb::IMessage<MsgDeal> {
    private static readonly pb::MessageParser<MsgDeal> _parser = new pb::MessageParser<MsgDeal>(() => new MsgDeal());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgDeal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgDeal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgDeal(MsgDeal other) : this() {
      _hasBits0 = other._hasBits0;
      bankerChairID_ = other.bankerChairID_;
      playerCardLists_ = other.playerCardLists_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgDeal Clone() {
      return new MsgDeal(this);
    }

    /// <summary>Field number for the "bankerChairID" field.</summary>
    public const int BankerChairIDFieldNumber = 1;
    private readonly static int BankerChairIDDefaultValue = 0;

    private int bankerChairID_;
    /// <summary>
    /// 庄家座位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerChairID {
      get { if ((_hasBits0 & 1) != 0) { return bankerChairID_; } else { return BankerChairIDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        bankerChairID_ = value;
      }
    }
    /// <summary>Gets whether the "bankerChairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBankerChairID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bankerChairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBankerChairID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "playerCardLists" field.</summary>
    public const int PlayerCardListsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xproto.MsgPlayerCardList> _repeated_playerCardLists_codec
        = pb::FieldCodec.ForMessage(18, global::Xproto.MsgPlayerCardList.Parser);
    private readonly pbc::RepeatedField<global::Xproto.MsgPlayerCardList> playerCardLists_ = new pbc::RepeatedField<global::Xproto.MsgPlayerCardList>();
    /// <summary>
    /// 所有玩家的牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xproto.MsgPlayerCardList> PlayerCardLists {
      get { return playerCardLists_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgDeal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgDeal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BankerChairID != other.BankerChairID) return false;
      if(!playerCardLists_.Equals(other.playerCardLists_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBankerChairID) hash ^= BankerChairID.GetHashCode();
      hash ^= playerCardLists_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasBankerChairID) {
        output.WriteRawTag(8);
        output.WriteInt32(BankerChairID);
      }
      playerCardLists_.WriteTo(output, _repeated_playerCardLists_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBankerChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerChairID);
      }
      size += playerCardLists_.CalculateSize(_repeated_playerCardLists_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgDeal other) {
      if (other == null) {
        return;
      }
      if (other.HasBankerChairID) {
        BankerChairID = other.BankerChairID;
      }
      playerCardLists_.Add(other.playerCardLists_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BankerChairID = input.ReadInt32();
            break;
          }
          case 18: {
            playerCardLists_.AddEntriesFrom(input, _repeated_playerCardLists_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器准许客户端做游戏动作
  /// 服务器发送给客户端
  /// 客户端收到本消息后，于界面上提示或者允许用户操作
  /// 在用户操作完成后（或者超时），发送MsgPlayerAction消息给服务器
  /// </summary>
  public sealed partial class MsgAllowAction : pb::IMessage<MsgAllowAction> {
    private static readonly pb::MessageParser<MsgAllowAction> _parser = new pb::MessageParser<MsgAllowAction>(() => new MsgAllowAction());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgAllowAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgAllowAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgAllowAction(MsgAllowAction other) : this() {
      _hasBits0 = other._hasBits0;
      qaIndex_ = other.qaIndex_;
      actionChairID_ = other.actionChairID_;
      allowedActions_ = other.allowedActions_;
      timeoutInSeconds_ = other.timeoutInSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgAllowAction Clone() {
      return new MsgAllowAction(this);
    }

    /// <summary>Field number for the "qaIndex" field.</summary>
    public const int QaIndexFieldNumber = 1;
    private readonly static int QaIndexDefaultValue = 0;

    private int qaIndex_;
    /// <summary>
    /// QA索引，参考 MsgPlayerAction 中说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QaIndex {
      get { if ((_hasBits0 & 1) != 0) { return qaIndex_; } else { return QaIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        qaIndex_ = value;
      }
    }
    /// <summary>Gets whether the "qaIndex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQaIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "qaIndex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQaIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "actionChairID" field.</summary>
    public const int ActionChairIDFieldNumber = 2;
    private readonly static int ActionChairIDDefaultValue = 0;

    private int actionChairID_;
    /// <summary>
    /// 本动作允许的目标，如果是自己则客户端展示操作界面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionChairID {
      get { if ((_hasBits0 & 2) != 0) { return actionChairID_; } else { return ActionChairIDDefaultValue; } }
      set {
        _hasBits0 |= 2;
        actionChairID_ = value;
      }
    }
    /// <summary>Gets whether the "actionChairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActionChairID {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "actionChairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActionChairID() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "allowedActions" field.</summary>
    public const int AllowedActionsFieldNumber = 3;
    private readonly static int AllowedActionsDefaultValue = 0;

    private int allowedActions_;
    /// <summary>
    /// 所有当前服务器期待/允许的动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllowedActions {
      get { if ((_hasBits0 & 4) != 0) { return allowedActions_; } else { return AllowedActionsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        allowedActions_ = value;
      }
    }
    /// <summary>Gets whether the "allowedActions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllowedActions {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "allowedActions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllowedActions() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "timeoutInSeconds" field.</summary>
    public const int TimeoutInSecondsFieldNumber = 4;
    private readonly static int TimeoutInSecondsDefaultValue = 0;

    private int timeoutInSeconds_;
    /// <summary>
    /// 默认超时时间，首次消息服务器会下发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeoutInSeconds {
      get { if ((_hasBits0 & 8) != 0) { return timeoutInSeconds_; } else { return TimeoutInSecondsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        timeoutInSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "timeoutInSeconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeoutInSeconds {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "timeoutInSeconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeoutInSeconds() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgAllowAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgAllowAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QaIndex != other.QaIndex) return false;
      if (ActionChairID != other.ActionChairID) return false;
      if (AllowedActions != other.AllowedActions) return false;
      if (TimeoutInSeconds != other.TimeoutInSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQaIndex) hash ^= QaIndex.GetHashCode();
      if (HasActionChairID) hash ^= ActionChairID.GetHashCode();
      if (HasAllowedActions) hash ^= AllowedActions.GetHashCode();
      if (HasTimeoutInSeconds) hash ^= TimeoutInSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasQaIndex) {
        output.WriteRawTag(8);
        output.WriteInt32(QaIndex);
      }
      if (HasActionChairID) {
        output.WriteRawTag(16);
        output.WriteInt32(ActionChairID);
      }
      if (HasAllowedActions) {
        output.WriteRawTag(24);
        output.WriteInt32(AllowedActions);
      }
      if (HasTimeoutInSeconds) {
        output.WriteRawTag(32);
        output.WriteInt32(TimeoutInSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQaIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QaIndex);
      }
      if (HasActionChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionChairID);
      }
      if (HasAllowedActions) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllowedActions);
      }
      if (HasTimeoutInSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeoutInSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgAllowAction other) {
      if (other == null) {
        return;
      }
      if (other.HasQaIndex) {
        QaIndex = other.QaIndex;
      }
      if (other.HasActionChairID) {
        ActionChairID = other.ActionChairID;
      }
      if (other.HasAllowedActions) {
        AllowedActions = other.AllowedActions;
      }
      if (other.HasTimeoutInSeconds) {
        TimeoutInSeconds = other.TimeoutInSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QaIndex = input.ReadInt32();
            break;
          }
          case 16: {
            ActionChairID = input.ReadInt32();
            break;
          }
          case 24: {
            AllowedActions = input.ReadInt32();
            break;
          }
          case 32: {
            TimeoutInSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器准许客户端做游戏动作
  /// 服务器发送给客户端
  /// 客户端收到本消息后，于界面上提示或者允许用户操作
  /// 在用户操作完成后（或者超时），发送MsgAction消息给服务器
  /// </summary>
  public sealed partial class MsgAllowReAction : pb::IMessage<MsgAllowReAction> {
    private static readonly pb::MessageParser<MsgAllowReAction> _parser = new pb::MessageParser<MsgAllowReAction>(() => new MsgAllowReAction());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgAllowReAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgAllowReAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgAllowReAction(MsgAllowReAction other) : this() {
      _hasBits0 = other._hasBits0;
      qaIndex_ = other.qaIndex_;
      actionChairID_ = other.actionChairID_;
      allowedActions_ = other.allowedActions_;
      timeoutInSeconds_ = other.timeoutInSeconds_;
      prevActionChairID_ = other.prevActionChairID_;
      prevActionHand_ = other.prevActionHand_ != null ? other.prevActionHand_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgAllowReAction Clone() {
      return new MsgAllowReAction(this);
    }

    /// <summary>Field number for the "qaIndex" field.</summary>
    public const int QaIndexFieldNumber = 1;
    private readonly static int QaIndexDefaultValue = 0;

    private int qaIndex_;
    /// <summary>
    /// QA索引，参考 MsgPlayerAction 中说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QaIndex {
      get { if ((_hasBits0 & 1) != 0) { return qaIndex_; } else { return QaIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        qaIndex_ = value;
      }
    }
    /// <summary>Gets whether the "qaIndex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQaIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "qaIndex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQaIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "actionChairID" field.</summary>
    public const int ActionChairIDFieldNumber = 2;
    private readonly static int ActionChairIDDefaultValue = 0;

    private int actionChairID_;
    /// <summary>
    /// 本动作允许的目标，如果是自己则客户端展示操作界面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionChairID {
      get { if ((_hasBits0 & 2) != 0) { return actionChairID_; } else { return ActionChairIDDefaultValue; } }
      set {
        _hasBits0 |= 2;
        actionChairID_ = value;
      }
    }
    /// <summary>Gets whether the "actionChairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActionChairID {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "actionChairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActionChairID() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "allowedActions" field.</summary>
    public const int AllowedActionsFieldNumber = 3;
    private readonly static int AllowedActionsDefaultValue = 0;

    private int allowedActions_;
    /// <summary>
    /// 所有当前服务器期待/允许的动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllowedActions {
      get { if ((_hasBits0 & 4) != 0) { return allowedActions_; } else { return AllowedActionsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        allowedActions_ = value;
      }
    }
    /// <summary>Gets whether the "allowedActions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllowedActions {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "allowedActions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllowedActions() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "timeoutInSeconds" field.</summary>
    public const int TimeoutInSecondsFieldNumber = 4;
    private readonly static int TimeoutInSecondsDefaultValue = 0;

    private int timeoutInSeconds_;
    /// <summary>
    /// 默认超时时间，首次消息服务器会下发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeoutInSeconds {
      get { if ((_hasBits0 & 8) != 0) { return timeoutInSeconds_; } else { return TimeoutInSecondsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        timeoutInSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "timeoutInSeconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeoutInSeconds {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "timeoutInSeconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeoutInSeconds() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "prevActionChairID" field.</summary>
    public const int PrevActionChairIDFieldNumber = 5;
    private readonly static int PrevActionChairIDDefaultValue = 0;

    private int prevActionChairID_;
    /// <summary>
    /// 上一个动作的玩家座位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrevActionChairID {
      get { if ((_hasBits0 & 16) != 0) { return prevActionChairID_; } else { return PrevActionChairIDDefaultValue; } }
      set {
        _hasBits0 |= 16;
        prevActionChairID_ = value;
      }
    }
    /// <summary>Gets whether the "prevActionChairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrevActionChairID {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "prevActionChairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrevActionChairID() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "prevActionHand" field.</summary>
    public const int PrevActionHandFieldNumber = 6;
    private global::Xproto.MsgCardHand prevActionHand_;
    /// <summary>
    /// 上一动作玩家打出牌组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xproto.MsgCardHand PrevActionHand {
      get { return prevActionHand_; }
      set {
        prevActionHand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgAllowReAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgAllowReAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QaIndex != other.QaIndex) return false;
      if (ActionChairID != other.ActionChairID) return false;
      if (AllowedActions != other.AllowedActions) return false;
      if (TimeoutInSeconds != other.TimeoutInSeconds) return false;
      if (PrevActionChairID != other.PrevActionChairID) return false;
      if (!object.Equals(PrevActionHand, other.PrevActionHand)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQaIndex) hash ^= QaIndex.GetHashCode();
      if (HasActionChairID) hash ^= ActionChairID.GetHashCode();
      if (HasAllowedActions) hash ^= AllowedActions.GetHashCode();
      if (HasTimeoutInSeconds) hash ^= TimeoutInSeconds.GetHashCode();
      if (HasPrevActionChairID) hash ^= PrevActionChairID.GetHashCode();
      if (prevActionHand_ != null) hash ^= PrevActionHand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasQaIndex) {
        output.WriteRawTag(8);
        output.WriteInt32(QaIndex);
      }
      if (HasActionChairID) {
        output.WriteRawTag(16);
        output.WriteInt32(ActionChairID);
      }
      if (HasAllowedActions) {
        output.WriteRawTag(24);
        output.WriteInt32(AllowedActions);
      }
      if (HasTimeoutInSeconds) {
        output.WriteRawTag(32);
        output.WriteInt32(TimeoutInSeconds);
      }
      if (HasPrevActionChairID) {
        output.WriteRawTag(40);
        output.WriteInt32(PrevActionChairID);
      }
      if (prevActionHand_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PrevActionHand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQaIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QaIndex);
      }
      if (HasActionChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionChairID);
      }
      if (HasAllowedActions) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllowedActions);
      }
      if (HasTimeoutInSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeoutInSeconds);
      }
      if (HasPrevActionChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrevActionChairID);
      }
      if (prevActionHand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrevActionHand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgAllowReAction other) {
      if (other == null) {
        return;
      }
      if (other.HasQaIndex) {
        QaIndex = other.QaIndex;
      }
      if (other.HasActionChairID) {
        ActionChairID = other.ActionChairID;
      }
      if (other.HasAllowedActions) {
        AllowedActions = other.AllowedActions;
      }
      if (other.HasTimeoutInSeconds) {
        TimeoutInSeconds = other.TimeoutInSeconds;
      }
      if (other.HasPrevActionChairID) {
        PrevActionChairID = other.PrevActionChairID;
      }
      if (other.prevActionHand_ != null) {
        if (prevActionHand_ == null) {
          PrevActionHand = new global::Xproto.MsgCardHand();
        }
        PrevActionHand.MergeFrom(other.PrevActionHand);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QaIndex = input.ReadInt32();
            break;
          }
          case 16: {
            ActionChairID = input.ReadInt32();
            break;
          }
          case 24: {
            AllowedActions = input.ReadInt32();
            break;
          }
          case 32: {
            TimeoutInSeconds = input.ReadInt32();
            break;
          }
          case 40: {
            PrevActionChairID = input.ReadInt32();
            break;
          }
          case 50: {
            if (prevActionHand_ == null) {
              PrevActionHand = new global::Xproto.MsgCardHand();
            }
            input.ReadMessage(PrevActionHand);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家执行动作
  /// 客户端必须是收到服务器允许动作消息并
  /// 通过界面让玩家完成操作之后，通过该消息通知服务器用户执行了动作
  /// 客户端需要填写正确的qaIndex，以及action（这两个参数都是从服务器下发）
  /// </summary>
  public sealed partial class MsgPlayerAction : pb::IMessage<MsgPlayerAction> {
    private static readonly pb::MessageParser<MsgPlayerAction> _parser = new pb::MessageParser<MsgPlayerAction>(() => new MsgPlayerAction());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgPlayerAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerAction(MsgPlayerAction other) : this() {
      _hasBits0 = other._hasBits0;
      qaIndex_ = other.qaIndex_;
      action_ = other.action_;
      flags_ = other.flags_;
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerAction Clone() {
      return new MsgPlayerAction(this);
    }

    /// <summary>Field number for the "qaIndex" field.</summary>
    public const int QaIndexFieldNumber = 1;
    private readonly static int QaIndexDefaultValue = 0;

    private int qaIndex_;
    /// <summary>
    /// QA索引，该索引是服务器通过出牌许可消息下发的，客户端需要回填于此
    /// QA索引的目的是为了服务器对消息的控制：服务器对于新收到的消息如果其QA索引
    /// 不等于服务器当前期待的QA索引，服务器将会抛弃该消息
    /// QA索引就是流水号，QA代表Question&amp;Answer
    /// 本文档其余处QA索引意义与此一致
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QaIndex {
      get { if ((_hasBits0 & 1) != 0) { return qaIndex_; } else { return QaIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        qaIndex_ = value;
      }
    }
    /// <summary>Gets whether the "qaIndex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQaIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "qaIndex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQaIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private readonly static int ActionDefaultValue = 0;

    private int action_;
    /// <summary>
    /// 动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { if ((_hasBits0 & 2) != 0) { return action_; } else { return ActionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        action_ = value;
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAction {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private readonly static int FlagsDefaultValue = 0;

    private int flags_;
    /// <summary>
    /// 其他标记，目前只用做听牌标记，如果是1，则表示出牌后要求听牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { if ((_hasBits0 & 4) != 0) { return flags_; } else { return FlagsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        flags_ = value;
      }
    }
    /// <summary>Gets whether the "flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlags {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlags() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(32);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 动作的涉及的牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgPlayerAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgPlayerAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QaIndex != other.QaIndex) return false;
      if (Action != other.Action) return false;
      if (Flags != other.Flags) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQaIndex) hash ^= QaIndex.GetHashCode();
      if (HasAction) hash ^= Action.GetHashCode();
      if (HasFlags) hash ^= Flags.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasQaIndex) {
        output.WriteRawTag(8);
        output.WriteInt32(QaIndex);
      }
      if (HasAction) {
        output.WriteRawTag(16);
        output.WriteInt32(Action);
      }
      if (HasFlags) {
        output.WriteRawTag(24);
        output.WriteInt32(Flags);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQaIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QaIndex);
      }
      if (HasAction) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (HasFlags) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgPlayerAction other) {
      if (other == null) {
        return;
      }
      if (other.HasQaIndex) {
        QaIndex = other.QaIndex;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      if (other.HasFlags) {
        Flags = other.Flags;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QaIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Action = input.ReadInt32();
            break;
          }
          case 24: {
            Flags = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器通知所有玩家某个玩家进行了何种动作
  /// 客户端收到消息后，对界面进行更新或者播放对应动作动画
  /// </summary>
  public sealed partial class MsgActionResultNotify : pb::IMessage<MsgActionResultNotify> {
    private static readonly pb::MessageParser<MsgActionResultNotify> _parser = new pb::MessageParser<MsgActionResultNotify>(() => new MsgActionResultNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgActionResultNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgActionResultNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgActionResultNotify(MsgActionResultNotify other) : this() {
      _hasBits0 = other._hasBits0;
      targetChairID_ = other.targetChairID_;
      action_ = other.action_;
      actionHands_ = other.actionHands_.Clone();
      cardsInWall_ = other.cardsInWall_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgActionResultNotify Clone() {
      return new MsgActionResultNotify(this);
    }

    /// <summary>Field number for the "targetChairID" field.</summary>
    public const int TargetChairIDFieldNumber = 1;
    private readonly static int TargetChairIDDefaultValue = 0;

    private int targetChairID_;
    /// <summary>
    /// 动作者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetChairID {
      get { if ((_hasBits0 & 1) != 0) { return targetChairID_; } else { return TargetChairIDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        targetChairID_ = value;
      }
    }
    /// <summary>Gets whether the "targetChairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetChairID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "targetChairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetChairID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private readonly static int ActionDefaultValue = 0;

    private int action_;
    /// <summary>
    /// 动作名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { if ((_hasBits0 & 2) != 0) { return action_; } else { return ActionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        action_ = value;
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAction {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "actionHands" field.</summary>
    public const int ActionHandsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xproto.MsgCardHand> _repeated_actionHands_codec
        = pb::FieldCodec.ForMessage(26, global::Xproto.MsgCardHand.Parser);
    private readonly pbc::RepeatedField<global::Xproto.MsgCardHand> actionHands_ = new pbc::RepeatedField<global::Xproto.MsgCardHand>();
    /// <summary>
    /// 动作目标牌组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xproto.MsgCardHand> ActionHands {
      get { return actionHands_; }
    }

    /// <summary>Field number for the "cardsInWall" field.</summary>
    public const int CardsInWallFieldNumber = 4;
    private readonly static int CardsInWallDefaultValue = 0;

    private int cardsInWall_;
    /// <summary>
    /// 剩余牌张数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardsInWall {
      get { if ((_hasBits0 & 4) != 0) { return cardsInWall_; } else { return CardsInWallDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cardsInWall_ = value;
      }
    }
    /// <summary>Gets whether the "cardsInWall" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCardsInWall {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cardsInWall" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCardsInWall() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgActionResultNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgActionResultNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetChairID != other.TargetChairID) return false;
      if (Action != other.Action) return false;
      if(!actionHands_.Equals(other.actionHands_)) return false;
      if (CardsInWall != other.CardsInWall) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetChairID) hash ^= TargetChairID.GetHashCode();
      if (HasAction) hash ^= Action.GetHashCode();
      hash ^= actionHands_.GetHashCode();
      if (HasCardsInWall) hash ^= CardsInWall.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTargetChairID) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetChairID);
      }
      if (HasAction) {
        output.WriteRawTag(16);
        output.WriteInt32(Action);
      }
      actionHands_.WriteTo(output, _repeated_actionHands_codec);
      if (HasCardsInWall) {
        output.WriteRawTag(32);
        output.WriteInt32(CardsInWall);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTargetChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetChairID);
      }
      if (HasAction) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      size += actionHands_.CalculateSize(_repeated_actionHands_codec);
      if (HasCardsInWall) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardsInWall);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgActionResultNotify other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetChairID) {
        TargetChairID = other.TargetChairID;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      actionHands_.Add(other.actionHands_);
      if (other.HasCardsInWall) {
        CardsInWall = other.CardsInWall;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetChairID = input.ReadInt32();
            break;
          }
          case 16: {
            Action = input.ReadInt32();
            break;
          }
          case 26: {
            actionHands_.AddEntriesFrom(input, _repeated_actionHands_codec);
            break;
          }
          case 32: {
            CardsInWall = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 掉线恢复
  /// </summary>
  public sealed partial class MsgRestore : pb::IMessage<MsgRestore> {
    private static readonly pb::MessageParser<MsgRestore> _parser = new pb::MessageParser<MsgRestore>(() => new MsgRestore());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgRestore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRestore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRestore(MsgRestore other) : this() {
      _hasBits0 = other._hasBits0;
      msgDeal_ = other.msgDeal_ != null ? other.msgDeal_.Clone() : null;
      prevActionChairID_ = other.prevActionChairID_;
      prevActionHand_ = other.prevActionHand_ != null ? other.prevActionHand_.Clone() : null;
      landlordChairID_ = other.landlordChairID_;
      multiple_ = other.multiple_;
      lastAwardCards_ = other.lastAwardCards_.Clone();
      playersListA_ = other.playersListA_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRestore Clone() {
      return new MsgRestore(this);
    }

    /// <summary>Field number for the "msgDeal" field.</summary>
    public const int MsgDealFieldNumber = 1;
    private global::Xproto.MsgDeal msgDeal_;
    /// <summary>
    /// 所有人的牌数据，复用MsgDeal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xproto.MsgDeal MsgDeal {
      get { return msgDeal_; }
      set {
        msgDeal_ = value;
      }
    }

    /// <summary>Field number for the "prevActionChairID" field.</summary>
    public const int PrevActionChairIDFieldNumber = 2;
    private readonly static int PrevActionChairIDDefaultValue = 0;

    private int prevActionChairID_;
    /// <summary>
    /// 上一个动作的玩家座位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrevActionChairID {
      get { if ((_hasBits0 & 1) != 0) { return prevActionChairID_; } else { return PrevActionChairIDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        prevActionChairID_ = value;
      }
    }
    /// <summary>Gets whether the "prevActionChairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrevActionChairID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "prevActionChairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrevActionChairID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "prevActionHand" field.</summary>
    public const int PrevActionHandFieldNumber = 3;
    private global::Xproto.MsgCardHand prevActionHand_;
    /// <summary>
    /// 上一动作玩家打出牌组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xproto.MsgCardHand PrevActionHand {
      get { return prevActionHand_; }
      set {
        prevActionHand_ = value;
      }
    }

    /// <summary>Field number for the "landlordChairID" field.</summary>
    public const int LandlordChairIDFieldNumber = 4;
    private readonly static int LandlordChairIDDefaultValue = 0;

    private int landlordChairID_;
    /// <summary>
    /// 地主的座位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LandlordChairID {
      get { if ((_hasBits0 & 2) != 0) { return landlordChairID_; } else { return LandlordChairIDDefaultValue; } }
      set {
        _hasBits0 |= 2;
        landlordChairID_ = value;
      }
    }
    /// <summary>Gets whether the "landlordChairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLandlordChairID {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "landlordChairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLandlordChairID() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 5;
    private readonly static int MultipleDefaultValue = 0;

    private int multiple_;
    /// <summary>
    /// 当前房间的倍数，由抢地主翻倍而改变，默认是1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { if ((_hasBits0 & 4) != 0) { return multiple_; } else { return MultipleDefaultValue; } }
      set {
        _hasBits0 |= 4;
        multiple_ = value;
      }
    }
    /// <summary>Gets whether the "multiple" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMultiple {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "multiple" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMultiple() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "lastAwardCards" field.</summary>
    public const int LastAwardCardsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_lastAwardCards_codec
        = pb::FieldCodec.ForInt32(48);
    private readonly pbc::RepeatedField<int> lastAwardCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 当前房间奖励给地主的3张底牌，如果处于抢地主阶段，有可能为空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LastAwardCards {
      get { return lastAwardCards_; }
    }

    /// <summary>Field number for the "playersListA" field.</summary>
    public const int PlayersListAFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_playersListA_codec
        = pb::FieldCodec.ForInt32(56);
    private readonly pbc::RepeatedField<int> playersListA_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 服务器通过这个额外的玩家座位ID列表，下发一些额外内容，例如斗地主用于下发加注的玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayersListA {
      get { return playersListA_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgRestore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgRestore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MsgDeal, other.MsgDeal)) return false;
      if (PrevActionChairID != other.PrevActionChairID) return false;
      if (!object.Equals(PrevActionHand, other.PrevActionHand)) return false;
      if (LandlordChairID != other.LandlordChairID) return false;
      if (Multiple != other.Multiple) return false;
      if(!lastAwardCards_.Equals(other.lastAwardCards_)) return false;
      if(!playersListA_.Equals(other.playersListA_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msgDeal_ != null) hash ^= MsgDeal.GetHashCode();
      if (HasPrevActionChairID) hash ^= PrevActionChairID.GetHashCode();
      if (prevActionHand_ != null) hash ^= PrevActionHand.GetHashCode();
      if (HasLandlordChairID) hash ^= LandlordChairID.GetHashCode();
      if (HasMultiple) hash ^= Multiple.GetHashCode();
      hash ^= lastAwardCards_.GetHashCode();
      hash ^= playersListA_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msgDeal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MsgDeal);
      }
      if (HasPrevActionChairID) {
        output.WriteRawTag(16);
        output.WriteInt32(PrevActionChairID);
      }
      if (prevActionHand_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PrevActionHand);
      }
      if (HasLandlordChairID) {
        output.WriteRawTag(32);
        output.WriteInt32(LandlordChairID);
      }
      if (HasMultiple) {
        output.WriteRawTag(40);
        output.WriteInt32(Multiple);
      }
      lastAwardCards_.WriteTo(output, _repeated_lastAwardCards_codec);
      playersListA_.WriteTo(output, _repeated_playersListA_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msgDeal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MsgDeal);
      }
      if (HasPrevActionChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrevActionChairID);
      }
      if (prevActionHand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrevActionHand);
      }
      if (HasLandlordChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LandlordChairID);
      }
      if (HasMultiple) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      size += lastAwardCards_.CalculateSize(_repeated_lastAwardCards_codec);
      size += playersListA_.CalculateSize(_repeated_playersListA_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgRestore other) {
      if (other == null) {
        return;
      }
      if (other.msgDeal_ != null) {
        if (msgDeal_ == null) {
          MsgDeal = new global::Xproto.MsgDeal();
        }
        MsgDeal.MergeFrom(other.MsgDeal);
      }
      if (other.HasPrevActionChairID) {
        PrevActionChairID = other.PrevActionChairID;
      }
      if (other.prevActionHand_ != null) {
        if (prevActionHand_ == null) {
          PrevActionHand = new global::Xproto.MsgCardHand();
        }
        PrevActionHand.MergeFrom(other.PrevActionHand);
      }
      if (other.HasLandlordChairID) {
        LandlordChairID = other.LandlordChairID;
      }
      if (other.HasMultiple) {
        Multiple = other.Multiple;
      }
      lastAwardCards_.Add(other.lastAwardCards_);
      playersListA_.Add(other.playersListA_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (msgDeal_ == null) {
              MsgDeal = new global::Xproto.MsgDeal();
            }
            input.ReadMessage(MsgDeal);
            break;
          }
          case 16: {
            PrevActionChairID = input.ReadInt32();
            break;
          }
          case 26: {
            if (prevActionHand_ == null) {
              PrevActionHand = new global::Xproto.MsgCardHand();
            }
            input.ReadMessage(PrevActionHand);
            break;
          }
          case 32: {
            LandlordChairID = input.ReadInt32();
            break;
          }
          case 40: {
            Multiple = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            lastAwardCards_.AddEntriesFrom(input, _repeated_lastAwardCards_codec);
            break;
          }
          case 58:
          case 56: {
            playersListA_.AddEntriesFrom(input, _repeated_playersListA_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 与某个对手玩家关系
  /// </summary>
  public sealed partial class MsgPlayerCompareContext : pb::IMessage<MsgPlayerCompareContext> {
    private static readonly pb::MessageParser<MsgPlayerCompareContext> _parser = new pb::MessageParser<MsgPlayerCompareContext>(() => new MsgPlayerCompareContext());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgPlayerCompareContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerCompareContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerCompareContext(MsgPlayerCompareContext other) : this() {
      _hasBits0 = other._hasBits0;
      targetChairID_ = other.targetChairID_;
      handScores_ = other.handScores_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerCompareContext Clone() {
      return new MsgPlayerCompareContext(this);
    }

    /// <summary>Field number for the "targetChairID" field.</summary>
    public const int TargetChairIDFieldNumber = 1;
    private readonly static int TargetChairIDDefaultValue = 0;

    private int targetChairID_;
    /// <summary>
    /// 对手id玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetChairID {
      get { if ((_hasBits0 & 1) != 0) { return targetChairID_; } else { return TargetChairIDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        targetChairID_ = value;
      }
    }
    /// <summary>Gets whether the "targetChairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetChairID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "targetChairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetChairID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "handScores" field.</summary>
    public const int HandScoresFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_handScores_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> handScores_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 墩分数详情列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HandScores {
      get { return handScores_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgPlayerCompareContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgPlayerCompareContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetChairID != other.TargetChairID) return false;
      if(!handScores_.Equals(other.handScores_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetChairID) hash ^= TargetChairID.GetHashCode();
      hash ^= handScores_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTargetChairID) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetChairID);
      }
      handScores_.WriteTo(output, _repeated_handScores_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTargetChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetChairID);
      }
      size += handScores_.CalculateSize(_repeated_handScores_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgPlayerCompareContext other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetChairID) {
        TargetChairID = other.TargetChairID;
      }
      handScores_.Add(other.handScores_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetChairID = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            handScores_.AddEntriesFrom(input, _repeated_handScores_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一手牌结束后每个玩家的计分
  /// </summary>
  public sealed partial class MsgPlayerScore : pb::IMessage<MsgPlayerScore> {
    private static readonly pb::MessageParser<MsgPlayerScore> _parser = new pb::MessageParser<MsgPlayerScore>(() => new MsgPlayerScore());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgPlayerScore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerScore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerScore(MsgPlayerScore other) : this() {
      _hasBits0 = other._hasBits0;
      targetChairID_ = other.targetChairID_;
      specialCardType_ = other.specialCardType_;
      totalScore_ = other.totalScore_;
      compareContexts_ = other.compareContexts_.Clone();
      isWinAll_ = other.isWinAll_;
      isInvertedHand_ = other.isInvertedHand_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerScore Clone() {
      return new MsgPlayerScore(this);
    }

    /// <summary>Field number for the "targetChairID" field.</summary>
    public const int TargetChairIDFieldNumber = 1;
    private readonly static int TargetChairIDDefaultValue = 0;

    private int targetChairID_;
    /// <summary>
    /// 玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetChairID {
      get { if ((_hasBits0 & 1) != 0) { return targetChairID_; } else { return TargetChairIDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        targetChairID_ = value;
      }
    }
    /// <summary>Gets whether the "targetChairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetChairID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "targetChairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetChairID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "specialCardType" field.</summary>
    public const int SpecialCardTypeFieldNumber = 2;
    private readonly static int SpecialCardTypeDefaultValue = 0;

    private int specialCardType_;
    /// <summary>
    /// 赢特殊牌类型 可以无效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialCardType {
      get { if ((_hasBits0 & 2) != 0) { return specialCardType_; } else { return SpecialCardTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        specialCardType_ = value;
      }
    }
    /// <summary>Gets whether the "specialCardType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpecialCardType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "specialCardType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpecialCardType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "totalScore" field.</summary>
    public const int TotalScoreFieldNumber = 3;
    private readonly static int TotalScoreDefaultValue = 0;

    private int totalScore_;
    /// <summary>
    /// 总赢 总输
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalScore {
      get { if ((_hasBits0 & 4) != 0) { return totalScore_; } else { return TotalScoreDefaultValue; } }
      set {
        _hasBits0 |= 4;
        totalScore_ = value;
      }
    }
    /// <summary>Gets whether the "totalScore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalScore {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "totalScore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalScore() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "compareContexts" field.</summary>
    public const int CompareContextsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xproto.MsgPlayerCompareContext> _repeated_compareContexts_codec
        = pb::FieldCodec.ForMessage(34, global::Xproto.MsgPlayerCompareContext.Parser);
    private readonly pbc::RepeatedField<global::Xproto.MsgPlayerCompareContext> compareContexts_ = new pbc::RepeatedField<global::Xproto.MsgPlayerCompareContext>();
    /// <summary>
    /// 与其他玩家关系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xproto.MsgPlayerCompareContext> CompareContexts {
      get { return compareContexts_; }
    }

    /// <summary>Field number for the "isWinAll" field.</summary>
    public const int IsWinAllFieldNumber = 5;
    private readonly static bool IsWinAllDefaultValue = false;

    private bool isWinAll_;
    /// <summary>
    /// 是否赢了三家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWinAll {
      get { if ((_hasBits0 & 8) != 0) { return isWinAll_; } else { return IsWinAllDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isWinAll_ = value;
      }
    }
    /// <summary>Gets whether the "isWinAll" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsWinAll {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "isWinAll" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsWinAll() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "isInvertedHand" field.</summary>
    public const int IsInvertedHandFieldNumber = 6;
    private readonly static bool IsInvertedHandDefaultValue = false;

    private bool isInvertedHand_;
    /// <summary>
    /// 是否倒墩
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInvertedHand {
      get { if ((_hasBits0 & 16) != 0) { return isInvertedHand_; } else { return IsInvertedHandDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isInvertedHand_ = value;
      }
    }
    /// <summary>Gets whether the "isInvertedHand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsInvertedHand {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "isInvertedHand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsInvertedHand() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgPlayerScore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgPlayerScore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetChairID != other.TargetChairID) return false;
      if (SpecialCardType != other.SpecialCardType) return false;
      if (TotalScore != other.TotalScore) return false;
      if(!compareContexts_.Equals(other.compareContexts_)) return false;
      if (IsWinAll != other.IsWinAll) return false;
      if (IsInvertedHand != other.IsInvertedHand) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetChairID) hash ^= TargetChairID.GetHashCode();
      if (HasSpecialCardType) hash ^= SpecialCardType.GetHashCode();
      if (HasTotalScore) hash ^= TotalScore.GetHashCode();
      hash ^= compareContexts_.GetHashCode();
      if (HasIsWinAll) hash ^= IsWinAll.GetHashCode();
      if (HasIsInvertedHand) hash ^= IsInvertedHand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTargetChairID) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetChairID);
      }
      if (HasSpecialCardType) {
        output.WriteRawTag(16);
        output.WriteInt32(SpecialCardType);
      }
      if (HasTotalScore) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalScore);
      }
      compareContexts_.WriteTo(output, _repeated_compareContexts_codec);
      if (HasIsWinAll) {
        output.WriteRawTag(40);
        output.WriteBool(IsWinAll);
      }
      if (HasIsInvertedHand) {
        output.WriteRawTag(48);
        output.WriteBool(IsInvertedHand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTargetChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetChairID);
      }
      if (HasSpecialCardType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialCardType);
      }
      if (HasTotalScore) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
      }
      size += compareContexts_.CalculateSize(_repeated_compareContexts_codec);
      if (HasIsWinAll) {
        size += 1 + 1;
      }
      if (HasIsInvertedHand) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgPlayerScore other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetChairID) {
        TargetChairID = other.TargetChairID;
      }
      if (other.HasSpecialCardType) {
        SpecialCardType = other.SpecialCardType;
      }
      if (other.HasTotalScore) {
        TotalScore = other.TotalScore;
      }
      compareContexts_.Add(other.compareContexts_);
      if (other.HasIsWinAll) {
        IsWinAll = other.IsWinAll;
      }
      if (other.HasIsInvertedHand) {
        IsInvertedHand = other.IsInvertedHand;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetChairID = input.ReadInt32();
            break;
          }
          case 16: {
            SpecialCardType = input.ReadInt32();
            break;
          }
          case 24: {
            TotalScore = input.ReadInt32();
            break;
          }
          case 34: {
            compareContexts_.AddEntriesFrom(input, _repeated_compareContexts_codec);
            break;
          }
          case 40: {
            IsWinAll = input.ReadBool();
            break;
          }
          case 48: {
            IsInvertedHand = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一手牌结束后计分
  /// </summary>
  public sealed partial class MsgHandScore : pb::IMessage<MsgHandScore> {
    private static readonly pb::MessageParser<MsgHandScore> _parser = new pb::MessageParser<MsgHandScore>(() => new MsgHandScore());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgHandScore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHandScore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHandScore(MsgHandScore other) : this() {
      playerScores_ = other.playerScores_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHandScore Clone() {
      return new MsgHandScore(this);
    }

    /// <summary>Field number for the "playerScores" field.</summary>
    public const int PlayerScoresFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xproto.MsgPlayerScore> _repeated_playerScores_codec
        = pb::FieldCodec.ForMessage(10, global::Xproto.MsgPlayerScore.Parser);
    private readonly pbc::RepeatedField<global::Xproto.MsgPlayerScore> playerScores_ = new pbc::RepeatedField<global::Xproto.MsgPlayerScore>();
    /// <summary>
    /// 玩家得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xproto.MsgPlayerScore> PlayerScores {
      get { return playerScores_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgHandScore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgHandScore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerScores_.Equals(other.playerScores_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerScores_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerScores_.WriteTo(output, _repeated_playerScores_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerScores_.CalculateSize(_repeated_playerScores_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgHandScore other) {
      if (other == null) {
        return;
      }
      playerScores_.Add(other.playerScores_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerScores_.AddEntriesFrom(input, _repeated_playerScores_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一手牌结束通知
  /// </summary>
  public sealed partial class MsgHandOver : pb::IMessage<MsgHandOver> {
    private static readonly pb::MessageParser<MsgHandOver> _parser = new pb::MessageParser<MsgHandOver>(() => new MsgHandOver());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgHandOver> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHandOver() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHandOver(MsgHandOver other) : this() {
      _hasBits0 = other._hasBits0;
      endType_ = other.endType_;
      playerCardLists_ = other.playerCardLists_.Clone();
      scores_ = other.scores_ != null ? other.scores_.Clone() : null;
      continueAble_ = other.continueAble_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHandOver Clone() {
      return new MsgHandOver(this);
    }

    /// <summary>Field number for the "endType" field.</summary>
    public const int EndTypeFieldNumber = 1;
    private readonly static int EndTypeDefaultValue = 0;

    private int endType_;
    /// <summary>
    /// 结束类型：自模胡，吃铳胡，流局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndType {
      get { if ((_hasBits0 & 1) != 0) { return endType_; } else { return EndTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        endType_ = value;
      }
    }
    /// <summary>Gets whether the "endType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "endType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "playerCardLists" field.</summary>
    public const int PlayerCardListsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xproto.MsgPlayerCardList> _repeated_playerCardLists_codec
        = pb::FieldCodec.ForMessage(18, global::Xproto.MsgPlayerCardList.Parser);
    private readonly pbc::RepeatedField<global::Xproto.MsgPlayerCardList> playerCardLists_ = new pbc::RepeatedField<global::Xproto.MsgPlayerCardList>();
    /// <summary>
    /// 手牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xproto.MsgPlayerCardList> PlayerCardLists {
      get { return playerCardLists_; }
    }

    /// <summary>Field number for the "scores" field.</summary>
    public const int ScoresFieldNumber = 3;
    private global::Xproto.MsgHandScore scores_;
    /// <summary>
    /// 分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xproto.MsgHandScore Scores {
      get { return scores_; }
      set {
        scores_ = value;
      }
    }

    /// <summary>Field number for the "continueAble" field.</summary>
    public const int ContinueAbleFieldNumber = 4;
    private readonly static bool ContinueAbleDefaultValue = false;

    private bool continueAble_;
    /// <summary>
    /// 是否可以继续下手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ContinueAble {
      get { if ((_hasBits0 & 2) != 0) { return continueAble_; } else { return ContinueAbleDefaultValue; } }
      set {
        _hasBits0 |= 2;
        continueAble_ = value;
      }
    }
    /// <summary>Gets whether the "continueAble" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContinueAble {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "continueAble" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContinueAble() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgHandOver);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgHandOver other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndType != other.EndType) return false;
      if(!playerCardLists_.Equals(other.playerCardLists_)) return false;
      if (!object.Equals(Scores, other.Scores)) return false;
      if (ContinueAble != other.ContinueAble) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEndType) hash ^= EndType.GetHashCode();
      hash ^= playerCardLists_.GetHashCode();
      if (scores_ != null) hash ^= Scores.GetHashCode();
      if (HasContinueAble) hash ^= ContinueAble.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasEndType) {
        output.WriteRawTag(8);
        output.WriteInt32(EndType);
      }
      playerCardLists_.WriteTo(output, _repeated_playerCardLists_codec);
      if (scores_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scores);
      }
      if (HasContinueAble) {
        output.WriteRawTag(32);
        output.WriteBool(ContinueAble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEndType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndType);
      }
      size += playerCardLists_.CalculateSize(_repeated_playerCardLists_codec);
      if (scores_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scores);
      }
      if (HasContinueAble) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgHandOver other) {
      if (other == null) {
        return;
      }
      if (other.HasEndType) {
        EndType = other.EndType;
      }
      playerCardLists_.Add(other.playerCardLists_);
      if (other.scores_ != null) {
        if (scores_ == null) {
          Scores = new global::Xproto.MsgHandScore();
        }
        Scores.MergeFrom(other.Scores);
      }
      if (other.HasContinueAble) {
        ContinueAble = other.ContinueAble;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EndType = input.ReadInt32();
            break;
          }
          case 18: {
            playerCardLists_.AddEntriesFrom(input, _repeated_playerCardLists_codec);
            break;
          }
          case 26: {
            if (scores_ == null) {
              Scores = new global::Xproto.MsgHandScore();
            }
            input.ReadMessage(Scores);
            break;
          }
          case 32: {
            ContinueAble = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 更新玩家的GPS定位信息
  /// </summary>
  public sealed partial class MsgUpdateLocation : pb::IMessage<MsgUpdateLocation> {
    private static readonly pb::MessageParser<MsgUpdateLocation> _parser = new pb::MessageParser<MsgUpdateLocation>(() => new MsgUpdateLocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgUpdateLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgUpdateLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgUpdateLocation(MsgUpdateLocation other) : this() {
      userID_ = other.userID_;
      location_ = other.location_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgUpdateLocation Clone() {
      return new MsgUpdateLocation(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private readonly static string UserIDDefaultValue = "";

    private string userID_;
    /// <summary>
    /// 用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_ ?? UserIDDefaultValue; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "userID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUserID {
      get { return userID_ != null; }
    }
    /// <summary>Clears the value of the "userID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserID() {
      userID_ = null;
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 2;
    private readonly static string LocationDefaultValue = "";

    private string location_;
    /// <summary>
    /// 位置信息，json格式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_ ?? LocationDefaultValue; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "location" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocation {
      get { return location_ != null; }
    }
    /// <summary>Clears the value of the "location" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocation() {
      location_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgUpdateLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgUpdateLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Location != other.Location) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUserID) hash ^= UserID.GetHashCode();
      if (HasLocation) hash ^= Location.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasUserID) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      if (HasLocation) {
        output.WriteRawTag(18);
        output.WriteString(Location);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUserID) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (HasLocation) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgUpdateLocation other) {
      if (other == null) {
        return;
      }
      if (other.HasUserID) {
        UserID = other.UserID;
      }
      if (other.HasLocation) {
        Location = other.Location;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 18: {
            Location = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 更新牌局内的道具配置
  /// </summary>
  public sealed partial class MsgUpdatePropCfg : pb::IMessage<MsgUpdatePropCfg> {
    private static readonly pb::MessageParser<MsgUpdatePropCfg> _parser = new pb::MessageParser<MsgUpdatePropCfg>(() => new MsgUpdatePropCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgUpdatePropCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgUpdatePropCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgUpdatePropCfg(MsgUpdatePropCfg other) : this() {
      propCfg_ = other.propCfg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgUpdatePropCfg Clone() {
      return new MsgUpdatePropCfg(this);
    }

    /// <summary>Field number for the "propCfg" field.</summary>
    public const int PropCfgFieldNumber = 1;
    private readonly static string PropCfgDefaultValue = "";

    private string propCfg_;
    /// <summary>
    /// 牌局内的道具配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PropCfg {
      get { return propCfg_ ?? PropCfgDefaultValue; }
      set {
        propCfg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "propCfg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPropCfg {
      get { return propCfg_ != null; }
    }
    /// <summary>Clears the value of the "propCfg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPropCfg() {
      propCfg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgUpdatePropCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgUpdatePropCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropCfg != other.PropCfg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPropCfg) hash ^= PropCfg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPropCfg) {
        output.WriteRawTag(10);
        output.WriteString(PropCfg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPropCfg) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropCfg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgUpdatePropCfg other) {
      if (other == null) {
        return;
      }
      if (other.HasPropCfg) {
        PropCfg = other.PropCfg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PropCfg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
