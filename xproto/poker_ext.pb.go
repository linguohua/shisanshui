// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: poker_ext.proto

package xproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TableState int32

const (
	// TableIdle 房间空闲
	TableState_STableIdle TableState = 0
	// TableWaiting 房间正在等待玩家进入
	TableState_STableWaiting TableState = 1
	// TablePlaying 游戏正在进行中
	TableState_STablePlaying TableState = 2
	// 房间已经删除
	TableState_STableDeleted TableState = 3
)

// Enum value maps for TableState.
var (
	TableState_name = map[int32]string{
		0: "STableIdle",
		1: "STableWaiting",
		2: "STablePlaying",
		3: "STableDeleted",
	}
	TableState_value = map[string]int32{
		"STableIdle":    0,
		"STableWaiting": 1,
		"STablePlaying": 2,
		"STableDeleted": 3,
	}
)

func (x TableState) Enum() *TableState {
	p := new(TableState)
	*p = x
	return p
}

func (x TableState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableState) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_ext_proto_enumTypes[0].Descriptor()
}

func (TableState) Type() protoreflect.EnumType {
	return &file_poker_ext_proto_enumTypes[0]
}

func (x TableState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableState(num)
	return nil
}

// Deprecated: Use TableState.Descriptor instead.
func (TableState) EnumDescriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{0}
}

type PlayerState int32

const (
	PlayerState_PSNone    PlayerState = 0
	PlayerState_PSReady   PlayerState = 1
	PlayerState_PSOffline PlayerState = 2
	PlayerState_PSPlaying PlayerState = 3
)

// Enum value maps for PlayerState.
var (
	PlayerState_name = map[int32]string{
		0: "PSNone",
		1: "PSReady",
		2: "PSOffline",
		3: "PSPlaying",
	}
	PlayerState_value = map[string]int32{
		"PSNone":    0,
		"PSReady":   1,
		"PSOffline": 2,
		"PSPlaying": 3,
	}
)

func (x PlayerState) Enum() *PlayerState {
	p := new(PlayerState)
	*p = x
	return p
}

func (x PlayerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerState) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_ext_proto_enumTypes[1].Descriptor()
}

func (PlayerState) Type() protoreflect.EnumType {
	return &file_poker_ext_proto_enumTypes[1]
}

func (x PlayerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlayerState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlayerState(num)
	return nil
}

// Deprecated: Use PlayerState.Descriptor instead.
func (PlayerState) EnumDescriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{1}
}

// 解散请求的状态
type DisbandState int32

const (
	DisbandState_Waiting                        DisbandState = 1 // 正在等待回复
	DisbandState_Done                           DisbandState = 2 // 已经完成
	DisbandState_DoneWithOtherReject            DisbandState = 3 // 其他人拒绝解散
	DisbandState_DoneWithTableServerNotResponse DisbandState = 4 // 房间访问不回应
	DisbandState_DoneWithWaitReplyTimeout       DisbandState = 5 // 等待其他玩家回复超时
	DisbandState_ErrorDuplicateAcquire          DisbandState = 6 // 已经有其他人申请了解散
	DisbandState_ErrorNeedOwnerWhenGameNotStart DisbandState = 7 // 游戏未开始，只能房主才可以解散房间
	DisbandState_ErrorWatcherNotDisband         DisbandState = 8 // 旁观者不可以解散房间
)

// Enum value maps for DisbandState.
var (
	DisbandState_name = map[int32]string{
		1: "Waiting",
		2: "Done",
		3: "DoneWithOtherReject",
		4: "DoneWithTableServerNotResponse",
		5: "DoneWithWaitReplyTimeout",
		6: "ErrorDuplicateAcquire",
		7: "ErrorNeedOwnerWhenGameNotStart",
		8: "ErrorWatcherNotDisband",
	}
	DisbandState_value = map[string]int32{
		"Waiting":                        1,
		"Done":                           2,
		"DoneWithOtherReject":            3,
		"DoneWithTableServerNotResponse": 4,
		"DoneWithWaitReplyTimeout":       5,
		"ErrorDuplicateAcquire":          6,
		"ErrorNeedOwnerWhenGameNotStart": 7,
		"ErrorWatcherNotDisband":         8,
	}
)

func (x DisbandState) Enum() *DisbandState {
	p := new(DisbandState)
	*p = x
	return p
}

func (x DisbandState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisbandState) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_ext_proto_enumTypes[2].Descriptor()
}

func (DisbandState) Type() protoreflect.EnumType {
	return &file_poker_ext_proto_enumTypes[2]
}

func (x DisbandState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DisbandState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DisbandState(num)
	return nil
}

// Deprecated: Use DisbandState.Descriptor instead.
func (DisbandState) EnumDescriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{2}
}

type TipCode int32

const (
	TipCode_TCNone                        TipCode = 0
	TipCode_TCWaitOpponentsAction         TipCode = 1 // 等待其他玩家动作
	TipCode_TCDonateFailedNoEnoughDiamond TipCode = 2 // 打赏失败，没有钻石
)

// Enum value maps for TipCode.
var (
	TipCode_name = map[int32]string{
		0: "TCNone",
		1: "TCWaitOpponentsAction",
		2: "TCDonateFailedNoEnoughDiamond",
	}
	TipCode_value = map[string]int32{
		"TCNone":                        0,
		"TCWaitOpponentsAction":         1,
		"TCDonateFailedNoEnoughDiamond": 2,
	}
)

func (x TipCode) Enum() *TipCode {
	p := new(TipCode)
	*p = x
	return p
}

func (x TipCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TipCode) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_ext_proto_enumTypes[3].Descriptor()
}

func (TipCode) Type() protoreflect.EnumType {
	return &file_poker_ext_proto_enumTypes[3]
}

func (x TipCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TipCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TipCode(num)
	return nil
}

// Deprecated: Use TipCode.Descriptor instead.
func (TipCode) EnumDescriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{3}
}

// 房间删除原因
type TableDeleteReason int32

const (
	TableDeleteReason_IdleTimeout            TableDeleteReason = 1 // 闲置时间过长
	TableDeleteReason_DisbandByOwnerFromRMS  TableDeleteReason = 2 // 被房主解散从房间管理列表
	TableDeleteReason_DisbandByApplication   TableDeleteReason = 3 // 被申请解散，而且解散成功
	TableDeleteReason_DisbandBySystem        TableDeleteReason = 4 // 系统解散，可能是系统管理员解散
	TableDeleteReason_DisbandMaxHand         TableDeleteReason = 5 // 牌局已经达到最大轮数
	TableDeleteReason_DisbandInLoseProtected TableDeleteReason = 6 // 已经有足够人进园子，牌局解散
)

// Enum value maps for TableDeleteReason.
var (
	TableDeleteReason_name = map[int32]string{
		1: "IdleTimeout",
		2: "DisbandByOwnerFromRMS",
		3: "DisbandByApplication",
		4: "DisbandBySystem",
		5: "DisbandMaxHand",
		6: "DisbandInLoseProtected",
	}
	TableDeleteReason_value = map[string]int32{
		"IdleTimeout":            1,
		"DisbandByOwnerFromRMS":  2,
		"DisbandByApplication":   3,
		"DisbandBySystem":        4,
		"DisbandMaxHand":         5,
		"DisbandInLoseProtected": 6,
	}
)

func (x TableDeleteReason) Enum() *TableDeleteReason {
	p := new(TableDeleteReason)
	*p = x
	return p
}

func (x TableDeleteReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableDeleteReason) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_ext_proto_enumTypes[4].Descriptor()
}

func (TableDeleteReason) Type() protoreflect.EnumType {
	return &file_poker_ext_proto_enumTypes[4]
}

func (x TableDeleteReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableDeleteReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableDeleteReason(num)
	return nil
}

// Deprecated: Use TableDeleteReason.Descriptor instead.
func (TableDeleteReason) EnumDescriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{4}
}

type KickoutResult int32

const (
	KickoutResult_KickoutResult_Success               KickoutResult = 1 // 踢人成功
	KickoutResult_KickoutResult_FailedGameHasStartted KickoutResult = 2 // 游戏已经开始不能踢人
	KickoutResult_KickoutResult_FailedNeedOwner       KickoutResult = 3 // 主要房主才可以踢人
	KickoutResult_KickoutResult_FailedPlayerNotExist  KickoutResult = 4 // 玩家已经离开
)

// Enum value maps for KickoutResult.
var (
	KickoutResult_name = map[int32]string{
		1: "KickoutResult_Success",
		2: "KickoutResult_FailedGameHasStartted",
		3: "KickoutResult_FailedNeedOwner",
		4: "KickoutResult_FailedPlayerNotExist",
	}
	KickoutResult_value = map[string]int32{
		"KickoutResult_Success":               1,
		"KickoutResult_FailedGameHasStartted": 2,
		"KickoutResult_FailedNeedOwner":       3,
		"KickoutResult_FailedPlayerNotExist":  4,
	}
)

func (x KickoutResult) Enum() *KickoutResult {
	p := new(KickoutResult)
	*p = x
	return p
}

func (x KickoutResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KickoutResult) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_ext_proto_enumTypes[5].Descriptor()
}

func (KickoutResult) Type() protoreflect.EnumType {
	return &file_poker_ext_proto_enumTypes[5]
}

func (x KickoutResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *KickoutResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = KickoutResult(num)
	return nil
}

// Deprecated: Use KickoutResult.Descriptor instead.
func (KickoutResult) EnumDescriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{5}
}

// 进入房间结果
type EnterTableStatus int32

const (
	EnterTableStatus_Success                         EnterTableStatus = 0  // 成功
	EnterTableStatus_TableNotExist                   EnterTableStatus = 1  // 房间不存在
	EnterTableStatus_TableIsFulled                   EnterTableStatus = 2  // 房间已经满员
	EnterTableStatus_TablePlaying                    EnterTableStatus = 3  // 游戏正在进行中
	EnterTableStatus_InAnotherTable                  EnterTableStatus = 4  // 账号已经在另一个游戏房间
	EnterTableStatus_MonkeyTableUserIDNotMatch       EnterTableStatus = 5  // monkey房间需要userID匹配
	EnterTableStatus_MonkeyTableUserLoginSeqNotMatch EnterTableStatus = 6  // monkey房间需要进入次序匹配
	EnterTableStatus_AppModuleNeedUpgrade            EnterTableStatus = 7  // 客户端需要升级
	EnterTableStatus_InTableBlackList                EnterTableStatus = 8  // 在房间的禁止进入黑名单中
	EnterTableStatus_TakeoffDiamondFailedNotEnough   EnterTableStatus = 9  // 扣除钻石失败，余额不足
	EnterTableStatus_TakeoffDiamondFailedIO          EnterTableStatus = 10 // 扣除钻石失败，IO失败
	EnterTableStatus_ParseTokenError                 EnterTableStatus = 11 // 解析token出错
	EnterTableStatus_TableInApplicateDisband         EnterTableStatus = 12 // 房间正在解散
	EnterTableStatus_NotClubMember                   EnterTableStatus = 13 // 不是俱乐部成员不能进入
)

// Enum value maps for EnterTableStatus.
var (
	EnterTableStatus_name = map[int32]string{
		0:  "Success",
		1:  "TableNotExist",
		2:  "TableIsFulled",
		3:  "TablePlaying",
		4:  "InAnotherTable",
		5:  "MonkeyTableUserIDNotMatch",
		6:  "MonkeyTableUserLoginSeqNotMatch",
		7:  "AppModuleNeedUpgrade",
		8:  "InTableBlackList",
		9:  "TakeoffDiamondFailedNotEnough",
		10: "TakeoffDiamondFailedIO",
		11: "ParseTokenError",
		12: "TableInApplicateDisband",
		13: "NotClubMember",
	}
	EnterTableStatus_value = map[string]int32{
		"Success":                         0,
		"TableNotExist":                   1,
		"TableIsFulled":                   2,
		"TablePlaying":                    3,
		"InAnotherTable":                  4,
		"MonkeyTableUserIDNotMatch":       5,
		"MonkeyTableUserLoginSeqNotMatch": 6,
		"AppModuleNeedUpgrade":            7,
		"InTableBlackList":                8,
		"TakeoffDiamondFailedNotEnough":   9,
		"TakeoffDiamondFailedIO":          10,
		"ParseTokenError":                 11,
		"TableInApplicateDisband":         12,
		"NotClubMember":                   13,
	}
)

func (x EnterTableStatus) Enum() *EnterTableStatus {
	p := new(EnterTableStatus)
	*p = x
	return p
}

func (x EnterTableStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnterTableStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_ext_proto_enumTypes[6].Descriptor()
}

func (EnterTableStatus) Type() protoreflect.EnumType {
	return &file_poker_ext_proto_enumTypes[6]
}

func (x EnterTableStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnterTableStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnterTableStatus(num)
	return nil
}

// Deprecated: Use EnterTableStatus.Descriptor instead.
func (EnterTableStatus) EnumDescriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{6}
}

// 进入房间后，如果有其他用户则利用
// 本消息把用户信息发送给客户端
type MsgPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      *string  `protobuf:"bytes,1,req,name=userID" json:"userID,omitempty"`
	ChairID     *int32   `protobuf:"varint,2,req,name=chairID" json:"chairID,omitempty"`
	State       *int32   `protobuf:"varint,3,req,name=state" json:"state,omitempty"`            // 玩家当前状态PlayerState
	Name        *string  `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`               // 玩家名称
	Nick        *string  `protobuf:"bytes,5,opt,name=nick" json:"nick,omitempty"`               // 玩家昵称
	Sex         *uint32  `protobuf:"varint,6,opt,name=sex" json:"sex,omitempty"`                // 玩家性别，0未设置，1男性，2女性
	HeadIconURI *string  `protobuf:"bytes,7,opt,name=headIconURI" json:"headIconURI,omitempty"` // 玩家头像URI
	Ip          *string  `protobuf:"bytes,8,opt,name=ip" json:"ip,omitempty"`                   // 玩家外网ip
	Location    *string  `protobuf:"bytes,9,opt,name=location" json:"location,omitempty"`       // 玩家位置信息,json格式
	DfHands     *int32   `protobuf:"varint,10,opt,name=dfHands" json:"dfHands,omitempty"`       // 玩家总局数
	Diamond     *int32   `protobuf:"varint,11,opt,name=diamond" json:"diamond,omitempty"`       // 钻石
	Charm       *int32   `protobuf:"varint,12,opt,name=charm" json:"charm,omitempty"`           // 魅力
	AvatarID    *int32   `protobuf:"varint,13,opt,name=avatarID" json:"avatarID,omitempty"`     // 头像框ID
	ClubIDs     []string `protobuf:"bytes,14,rep,name=clubIDs" json:"clubIDs,omitempty"`        // 用户所有牌友群id
	Dan         *int32   `protobuf:"varint,15,opt,name=dan" json:"dan,omitempty"`               // 玩家段位
	IsLooker    *bool    `protobuf:"varint,16,opt,name=isLooker" json:"isLooker,omitempty"`     // 是否为旁观者
}

func (x *MsgPlayerInfo) Reset() {
	*x = MsgPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPlayerInfo) ProtoMessage() {}

func (x *MsgPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgPlayerInfo.ProtoReflect.Descriptor instead.
func (*MsgPlayerInfo) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{0}
}

func (x *MsgPlayerInfo) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *MsgPlayerInfo) GetChairID() int32 {
	if x != nil && x.ChairID != nil {
		return *x.ChairID
	}
	return 0
}

func (x *MsgPlayerInfo) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *MsgPlayerInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MsgPlayerInfo) GetNick() string {
	if x != nil && x.Nick != nil {
		return *x.Nick
	}
	return ""
}

func (x *MsgPlayerInfo) GetSex() uint32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *MsgPlayerInfo) GetHeadIconURI() string {
	if x != nil && x.HeadIconURI != nil {
		return *x.HeadIconURI
	}
	return ""
}

func (x *MsgPlayerInfo) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *MsgPlayerInfo) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *MsgPlayerInfo) GetDfHands() int32 {
	if x != nil && x.DfHands != nil {
		return *x.DfHands
	}
	return 0
}

func (x *MsgPlayerInfo) GetDiamond() int32 {
	if x != nil && x.Diamond != nil {
		return *x.Diamond
	}
	return 0
}

func (x *MsgPlayerInfo) GetCharm() int32 {
	if x != nil && x.Charm != nil {
		return *x.Charm
	}
	return 0
}

func (x *MsgPlayerInfo) GetAvatarID() int32 {
	if x != nil && x.AvatarID != nil {
		return *x.AvatarID
	}
	return 0
}

func (x *MsgPlayerInfo) GetClubIDs() []string {
	if x != nil {
		return x.ClubIDs
	}
	return nil
}

func (x *MsgPlayerInfo) GetDan() int32 {
	if x != nil && x.Dan != nil {
		return *x.Dan
	}
	return 0
}

func (x *MsgPlayerInfo) GetIsLooker() bool {
	if x != nil && x.IsLooker != nil {
		return *x.IsLooker
	}
	return false
}

// 每个玩家一手牌得分记录
type PlayerHandScoreRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  *string `protobuf:"bytes,1,req,name=userID" json:"userID,omitempty"`
	WinType *int32  `protobuf:"varint,2,req,name=winType" json:"winType,omitempty"`
	Score   *int32  `protobuf:"varint,3,req,name=score" json:"score,omitempty"`
}

func (x *PlayerHandScoreRecord) Reset() {
	*x = PlayerHandScoreRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHandScoreRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHandScoreRecord) ProtoMessage() {}

func (x *PlayerHandScoreRecord) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHandScoreRecord.ProtoReflect.Descriptor instead.
func (*PlayerHandScoreRecord) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerHandScoreRecord) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *PlayerHandScoreRecord) GetWinType() int32 {
	if x != nil && x.WinType != nil {
		return *x.WinType
	}
	return 0
}

func (x *PlayerHandScoreRecord) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

// 房间的牌局一手牌得分记录
type MsgTableHandScoreRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 手牌结束类型
	EndType *int32 `protobuf:"varint,1,req,name=endType" json:"endType,omitempty"`
	// 第几手牌
	HandIndex *int32 `protobuf:"varint,2,req,name=handIndex" json:"handIndex,omitempty"`
	// 本手牌每个玩家的得分情况
	PlayerRecords []*PlayerHandScoreRecord `protobuf:"bytes,3,rep,name=playerRecords" json:"playerRecords,omitempty"`
}

func (x *MsgTableHandScoreRecord) Reset() {
	*x = MsgTableHandScoreRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgTableHandScoreRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgTableHandScoreRecord) ProtoMessage() {}

func (x *MsgTableHandScoreRecord) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgTableHandScoreRecord.ProtoReflect.Descriptor instead.
func (*MsgTableHandScoreRecord) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{2}
}

func (x *MsgTableHandScoreRecord) GetEndType() int32 {
	if x != nil && x.EndType != nil {
		return *x.EndType
	}
	return 0
}

func (x *MsgTableHandScoreRecord) GetHandIndex() int32 {
	if x != nil && x.HandIndex != nil {
		return *x.HandIndex
	}
	return 0
}

func (x *MsgTableHandScoreRecord) GetPlayerRecords() []*PlayerHandScoreRecord {
	if x != nil {
		return x.PlayerRecords
	}
	return nil
}

// 房间信息，用于各种状态更新
type MsgTableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        *int32                     `protobuf:"varint,1,req,name=state" json:"state,omitempty"`               // 见TableState
	Players      []*MsgPlayerInfo           `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`            // 其他玩家信息
	OwnerID      *string                    `protobuf:"bytes,3,opt,name=ownerID" json:"ownerID,omitempty"`            // 房间拥有者ID
	TableNumber  *string                    `protobuf:"bytes,4,opt,name=tableNumber" json:"tableNumber,omitempty"`    // 房间号
	HandStartted *int32                     `protobuf:"varint,5,opt,name=handStartted" json:"handStartted,omitempty"` // 已经开始了多少手牌
	ScoreRecords []*MsgTableHandScoreRecord `protobuf:"bytes,6,rep,name=scoreRecords" json:"scoreRecords,omitempty"`
	HandFinished *int32                     `protobuf:"varint,7,opt,name=handFinished" json:"handFinished,omitempty"` // 已经完成了多少手牌
}

func (x *MsgTableInfo) Reset() {
	*x = MsgTableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgTableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgTableInfo) ProtoMessage() {}

func (x *MsgTableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgTableInfo.ProtoReflect.Descriptor instead.
func (*MsgTableInfo) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{3}
}

func (x *MsgTableInfo) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *MsgTableInfo) GetPlayers() []*MsgPlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *MsgTableInfo) GetOwnerID() string {
	if x != nil && x.OwnerID != nil {
		return *x.OwnerID
	}
	return ""
}

func (x *MsgTableInfo) GetTableNumber() string {
	if x != nil && x.TableNumber != nil {
		return *x.TableNumber
	}
	return ""
}

func (x *MsgTableInfo) GetHandStartted() int32 {
	if x != nil && x.HandStartted != nil {
		return *x.HandStartted
	}
	return 0
}

func (x *MsgTableInfo) GetScoreRecords() []*MsgTableHandScoreRecord {
	if x != nil {
		return x.ScoreRecords
	}
	return nil
}

func (x *MsgTableInfo) GetHandFinished() int32 {
	if x != nil && x.HandFinished != nil {
		return *x.HandFinished
	}
	return 0
}

// 房间分数记录
type TableScoreRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreRecords []*MsgTableHandScoreRecord `protobuf:"bytes,1,rep,name=scoreRecords" json:"scoreRecords,omitempty"` // 每一手牌一个记录
}

func (x *TableScoreRecords) Reset() {
	*x = TableScoreRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableScoreRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableScoreRecords) ProtoMessage() {}

func (x *TableScoreRecords) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableScoreRecords.ProtoReflect.Descriptor instead.
func (*TableScoreRecords) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{4}
}

func (x *TableScoreRecords) GetScoreRecords() []*MsgTableHandScoreRecord {
	if x != nil {
		return x.ScoreRecords
	}
	return nil
}

// 客户端发送给服务器
// 回复解散请求
type MsgDisbandAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agree *bool `protobuf:"varint,1,req,name=agree" json:"agree,omitempty"`
}

func (x *MsgDisbandAnswer) Reset() {
	*x = MsgDisbandAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDisbandAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDisbandAnswer) ProtoMessage() {}

func (x *MsgDisbandAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDisbandAnswer.ProtoReflect.Descriptor instead.
func (*MsgDisbandAnswer) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{5}
}

func (x *MsgDisbandAnswer) GetAgree() bool {
	if x != nil && x.Agree != nil {
		return *x.Agree
	}
	return false
}

// 服务器通知客户端解散请求的执行情况
type MsgDisbandNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisbandState *int32  `protobuf:"varint,1,req,name=disbandState" json:"disbandState,omitempty"` // 解散请求的状态
	Applicant    *int32  `protobuf:"varint,2,req,name=applicant" json:"applicant,omitempty"`       // 谁发起解散请求，座位ID
	Waits        []int32 `protobuf:"varint,3,rep,name=waits" json:"waits,omitempty"`               // 正在等待谁，座位列表
	Agrees       []int32 `protobuf:"varint,4,rep,name=agrees" json:"agrees,omitempty"`             // 谁已经同意，座位列表
	Rejects      []int32 `protobuf:"varint,5,rep,name=rejects" json:"rejects,omitempty"`           // 谁已经拒绝,座位列表
	Countdown    *int32  `protobuf:"varint,6,opt,name=countdown" json:"countdown,omitempty"`       // 剩余倒计时
}

func (x *MsgDisbandNotify) Reset() {
	*x = MsgDisbandNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDisbandNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDisbandNotify) ProtoMessage() {}

func (x *MsgDisbandNotify) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDisbandNotify.ProtoReflect.Descriptor instead.
func (*MsgDisbandNotify) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{6}
}

func (x *MsgDisbandNotify) GetDisbandState() int32 {
	if x != nil && x.DisbandState != nil {
		return *x.DisbandState
	}
	return 0
}

func (x *MsgDisbandNotify) GetApplicant() int32 {
	if x != nil && x.Applicant != nil {
		return *x.Applicant
	}
	return 0
}

func (x *MsgDisbandNotify) GetWaits() []int32 {
	if x != nil {
		return x.Waits
	}
	return nil
}

func (x *MsgDisbandNotify) GetAgrees() []int32 {
	if x != nil {
		return x.Agrees
	}
	return nil
}

func (x *MsgDisbandNotify) GetRejects() []int32 {
	if x != nil {
		return x.Rejects
	}
	return nil
}

func (x *MsgDisbandNotify) GetCountdown() int32 {
	if x != nil && x.Countdown != nil {
		return *x.Countdown
	}
	return 0
}

// 游戏结束每个玩家的统计信息
type MsgGameOverPlayerStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChairID             *int32 `protobuf:"varint,1,req,name=chairID" json:"chairID,omitempty"`                         // 玩家的座位ID
	Score               *int32 `protobuf:"varint,2,req,name=score" json:"score,omitempty"`                             // 玩家总得分
	WinChuckCounter     *int32 `protobuf:"varint,3,req,name=winChuckCounter" json:"winChuckCounter,omitempty"`         // 玩家吃铳（接炮）胡牌次数
	WinSelfDrawnCounter *int32 `protobuf:"varint,4,req,name=winSelfDrawnCounter" json:"winSelfDrawnCounter,omitempty"` // 玩家自摸胡牌次数
	ChuckerCounter      *int32 `protobuf:"varint,5,req,name=chuckerCounter" json:"chuckerCounter,omitempty"`           // 玩家放炮输牌次数
	RobKongCounter      *int32 `protobuf:"varint,6,opt,name=robKongCounter" json:"robKongCounter,omitempty"`           // 抢杠胡次数
	KongerCounter       *int32 `protobuf:"varint,7,opt,name=kongerCounter" json:"kongerCounter,omitempty"`             // 被抢杠胡次数
}

func (x *MsgGameOverPlayerStat) Reset() {
	*x = MsgGameOverPlayerStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGameOverPlayerStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGameOverPlayerStat) ProtoMessage() {}

func (x *MsgGameOverPlayerStat) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgGameOverPlayerStat.ProtoReflect.Descriptor instead.
func (*MsgGameOverPlayerStat) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{7}
}

func (x *MsgGameOverPlayerStat) GetChairID() int32 {
	if x != nil && x.ChairID != nil {
		return *x.ChairID
	}
	return 0
}

func (x *MsgGameOverPlayerStat) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *MsgGameOverPlayerStat) GetWinChuckCounter() int32 {
	if x != nil && x.WinChuckCounter != nil {
		return *x.WinChuckCounter
	}
	return 0
}

func (x *MsgGameOverPlayerStat) GetWinSelfDrawnCounter() int32 {
	if x != nil && x.WinSelfDrawnCounter != nil {
		return *x.WinSelfDrawnCounter
	}
	return 0
}

func (x *MsgGameOverPlayerStat) GetChuckerCounter() int32 {
	if x != nil && x.ChuckerCounter != nil {
		return *x.ChuckerCounter
	}
	return 0
}

func (x *MsgGameOverPlayerStat) GetRobKongCounter() int32 {
	if x != nil && x.RobKongCounter != nil {
		return *x.RobKongCounter
	}
	return 0
}

func (x *MsgGameOverPlayerStat) GetKongerCounter() int32 {
	if x != nil && x.KongerCounter != nil {
		return *x.KongerCounter
	}
	return 0
}

// 游戏结束通知，服务器下发给所有玩家
type MsgGameOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerStats []*MsgGameOverPlayerStat `protobuf:"bytes,1,rep,name=playerStats" json:"playerStats,omitempty"` // 玩家统计信息列表
}

func (x *MsgGameOver) Reset() {
	*x = MsgGameOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGameOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGameOver) ProtoMessage() {}

func (x *MsgGameOver) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgGameOver.ProtoReflect.Descriptor instead.
func (*MsgGameOver) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{8}
}

func (x *MsgGameOver) GetPlayerStats() []*MsgGameOverPlayerStat {
	if x != nil {
		return x.PlayerStats
	}
	return nil
}

// 对应OPTableShowTips，主要是monkey房间使用
type MsgTableShowTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tips    *string `protobuf:"bytes,1,opt,name=tips" json:"tips,omitempty"`        // 需要显示的提示文字信息，ut8编码
	TipCode *int32  `protobuf:"varint,2,req,name=tipCode" json:"tipCode,omitempty"` // 如果tipcode为0，则使用tips，否则使用tipCode
}

func (x *MsgTableShowTips) Reset() {
	*x = MsgTableShowTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgTableShowTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgTableShowTips) ProtoMessage() {}

func (x *MsgTableShowTips) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgTableShowTips.ProtoReflect.Descriptor instead.
func (*MsgTableShowTips) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{9}
}

func (x *MsgTableShowTips) GetTips() string {
	if x != nil && x.Tips != nil {
		return *x.Tips
	}
	return ""
}

func (x *MsgTableShowTips) GetTipCode() int32 {
	if x != nil && x.TipCode != nil {
		return *x.TipCode
	}
	return 0
}

// 房间删除通知
type MsgTableDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason *int32 `protobuf:"varint,1,req,name=reason" json:"reason,omitempty"` // 删除原因 TableDeleteReason
}

func (x *MsgTableDelete) Reset() {
	*x = MsgTableDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgTableDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgTableDelete) ProtoMessage() {}

func (x *MsgTableDelete) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgTableDelete.ProtoReflect.Descriptor instead.
func (*MsgTableDelete) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{10}
}

func (x *MsgTableDelete) GetReason() int32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

// 房主请求服务器踢开某个玩家
type MsgKickout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VictimUserID *string `protobuf:"bytes,1,req,name=victimUserID" json:"victimUserID,omitempty"` // 受害者
}

func (x *MsgKickout) Reset() {
	*x = MsgKickout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgKickout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgKickout) ProtoMessage() {}

func (x *MsgKickout) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgKickout.ProtoReflect.Descriptor instead.
func (*MsgKickout) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{11}
}

func (x *MsgKickout) GetVictimUserID() string {
	if x != nil && x.VictimUserID != nil {
		return *x.VictimUserID
	}
	return ""
}

// 服务器回复
type MsgKickoutResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       *int32  `protobuf:"varint,1,req,name=result" json:"result,omitempty"`
	VictimUserID *string `protobuf:"bytes,2,opt,name=victimUserID" json:"victimUserID,omitempty"` // 被踢的玩家的ID
	VictimNick   *string `protobuf:"bytes,3,opt,name=victimNick" json:"victimNick,omitempty"`     // 被踢的玩家的昵称
	ByWhoNick    *string `protobuf:"bytes,4,opt,name=byWhoNick" json:"byWhoNick,omitempty"`       // 房主昵称
	ByWhoUserID  *string `protobuf:"bytes,5,opt,name=byWhoUserID" json:"byWhoUserID,omitempty"`   // 房主ID
}

func (x *MsgKickoutResult) Reset() {
	*x = MsgKickoutResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgKickoutResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgKickoutResult) ProtoMessage() {}

func (x *MsgKickoutResult) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgKickoutResult.ProtoReflect.Descriptor instead.
func (*MsgKickoutResult) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{12}
}

func (x *MsgKickoutResult) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *MsgKickoutResult) GetVictimUserID() string {
	if x != nil && x.VictimUserID != nil {
		return *x.VictimUserID
	}
	return ""
}

func (x *MsgKickoutResult) GetVictimNick() string {
	if x != nil && x.VictimNick != nil {
		return *x.VictimNick
	}
	return ""
}

func (x *MsgKickoutResult) GetByWhoNick() string {
	if x != nil && x.ByWhoNick != nil {
		return *x.ByWhoNick
	}
	return ""
}

func (x *MsgKickoutResult) GetByWhoUserID() string {
	if x != nil && x.ByWhoUserID != nil {
		return *x.ByWhoUserID
	}
	return ""
}

// 进入房间回复
// 进入成功后，包括玩家本身以及其他玩家，均通过OPTableUpdate获得房间新状态和数据
type MsgEnterTableResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *int32 `protobuf:"varint,1,req,name=status" json:"status,omitempty"` // 0表示成功，其他值表示失败的错误码，见EnterTableStatus
}

func (x *MsgEnterTableResult) Reset() {
	*x = MsgEnterTableResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgEnterTableResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgEnterTableResult) ProtoMessage() {}

func (x *MsgEnterTableResult) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgEnterTableResult.ProtoReflect.Descriptor instead.
func (*MsgEnterTableResult) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{13}
}

func (x *MsgEnterTableResult) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type MsgDonate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToChairID   *int32 `protobuf:"varint,1,req,name=toChairID" json:"toChairID,omitempty"`     // 送给谁
	ItemID      *int32 `protobuf:"varint,2,req,name=itemID" json:"itemID,omitempty"`           // 物品ID
	FromChairID *int32 `protobuf:"varint,3,opt,name=fromChairID" json:"fromChairID,omitempty"` // 谁给送的
}

func (x *MsgDonate) Reset() {
	*x = MsgDonate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_ext_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDonate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDonate) ProtoMessage() {}

func (x *MsgDonate) ProtoReflect() protoreflect.Message {
	mi := &file_poker_ext_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDonate.ProtoReflect.Descriptor instead.
func (*MsgDonate) Descriptor() ([]byte, []int) {
	return file_poker_ext_proto_rawDescGZIP(), []int{14}
}

func (x *MsgDonate) GetToChairID() int32 {
	if x != nil && x.ToChairID != nil {
		return *x.ToChairID
	}
	return 0
}

func (x *MsgDonate) GetItemID() int32 {
	if x != nil && x.ItemID != nil {
		return *x.ItemID
	}
	return 0
}

func (x *MsgDonate) GetFromChairID() int32 {
	if x != nil && x.FromChairID != nil {
		return *x.FromChairID
	}
	return 0
}

var File_poker_ext_proto protoreflect.FileDescriptor

var file_poker_ext_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x03, 0x0a, 0x0d, 0x4d, 0x73,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x20, 0x0a,
	0x0b, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x49, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x49, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x66, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x66,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x68, 0x61, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49,
	0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x62, 0x49, 0x44, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x62, 0x49, 0x44, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x15, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x77, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x4d,
	0x73, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x43,
	0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68,
	0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x22, 0x58, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x28,
	0x0a, 0x10, 0x4d, 0x73, 0x67, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x4d, 0x73, 0x67,
	0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x61, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x77, 0x61, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x67, 0x72, 0x65, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x61, 0x67, 0x72, 0x65, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x99, 0x02, 0x0a, 0x15, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x43, 0x68, 0x75, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x77, 0x69, 0x6e, 0x43, 0x68, 0x75,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x69, 0x6e,
	0x53, 0x65, 0x6c, 0x66, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x13, 0x77, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x44,
	0x72, 0x61, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x68, 0x75, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x75, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x6f, 0x62, 0x4b, 0x6f, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x6f, 0x62,
	0x4b, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6b,
	0x6f, 0x6e, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6b, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x22, 0x4e, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x22, 0x40, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f,
	0x77, 0x54, 0x69, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x30, 0x0a,
	0x0a, 0x4d, 0x73, 0x67, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x76,
	0x69, 0x63, 0x74, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0c, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0xae, 0x01, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x4e, 0x69, 0x63, 0x6b,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x79, 0x57, 0x68, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x79, 0x57, 0x68, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x79, 0x57, 0x68, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x79, 0x57, 0x68, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x2d, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x63, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61,
	0x69, 0x72, 0x49, 0x44, 0x2a, 0x55, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x44, 0x0a, 0x0b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x53,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x53, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x53, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x53, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10,
	0x03, 0x2a, 0xdb, 0x01, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x6f, 0x6e,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x6f, 0x6e, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x6f, 0x6e, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x10, 0x06, 0x12,
	0x22, 0x0a, 0x1e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x57, 0x68, 0x65, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x10, 0x08, 0x2a,
	0x53, 0x0a, 0x07, 0x54, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x43,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x43, 0x57, 0x61, 0x69, 0x74,
	0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x43, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x44, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x10, 0x02, 0x2a, 0x9e, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x64,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x44,
	0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x52, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e,
	0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64,
	0x4d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x69, 0x73,
	0x62, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x06, 0x2a, 0x9e, 0x01, 0x0a, 0x0d, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x69, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x61,
	0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4b,
	0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x4e, 0x65, 0x65, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x10, 0x03, 0x12, 0x26,
	0x0a, 0x22, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x10, 0x04, 0x2a, 0xe3, 0x02, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x71, 0x4e, 0x6f,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x61, 0x6b, 0x65,
	0x6f, 0x66, 0x66, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x49, 0x4f, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x6f, 0x74,
	0x43, 0x6c, 0x75, 0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x0d, 0x42, 0x0a, 0x5a, 0x08,
	0x2e, 0x3b, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_poker_ext_proto_rawDescOnce sync.Once
	file_poker_ext_proto_rawDescData = file_poker_ext_proto_rawDesc
)

func file_poker_ext_proto_rawDescGZIP() []byte {
	file_poker_ext_proto_rawDescOnce.Do(func() {
		file_poker_ext_proto_rawDescData = protoimpl.X.CompressGZIP(file_poker_ext_proto_rawDescData)
	})
	return file_poker_ext_proto_rawDescData
}

var file_poker_ext_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_poker_ext_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_poker_ext_proto_goTypes = []interface{}{
	(TableState)(0),                 // 0: xproto.TableState
	(PlayerState)(0),                // 1: xproto.PlayerState
	(DisbandState)(0),               // 2: xproto.DisbandState
	(TipCode)(0),                    // 3: xproto.TipCode
	(TableDeleteReason)(0),          // 4: xproto.TableDeleteReason
	(KickoutResult)(0),              // 5: xproto.KickoutResult
	(EnterTableStatus)(0),           // 6: xproto.EnterTableStatus
	(*MsgPlayerInfo)(nil),           // 7: xproto.MsgPlayerInfo
	(*PlayerHandScoreRecord)(nil),   // 8: xproto.PlayerHandScoreRecord
	(*MsgTableHandScoreRecord)(nil), // 9: xproto.MsgTableHandScoreRecord
	(*MsgTableInfo)(nil),            // 10: xproto.MsgTableInfo
	(*TableScoreRecords)(nil),       // 11: xproto.TableScoreRecords
	(*MsgDisbandAnswer)(nil),        // 12: xproto.MsgDisbandAnswer
	(*MsgDisbandNotify)(nil),        // 13: xproto.MsgDisbandNotify
	(*MsgGameOverPlayerStat)(nil),   // 14: xproto.MsgGameOverPlayerStat
	(*MsgGameOver)(nil),             // 15: xproto.MsgGameOver
	(*MsgTableShowTips)(nil),        // 16: xproto.MsgTableShowTips
	(*MsgTableDelete)(nil),          // 17: xproto.MsgTableDelete
	(*MsgKickout)(nil),              // 18: xproto.MsgKickout
	(*MsgKickoutResult)(nil),        // 19: xproto.MsgKickoutResult
	(*MsgEnterTableResult)(nil),     // 20: xproto.MsgEnterTableResult
	(*MsgDonate)(nil),               // 21: xproto.MsgDonate
}
var file_poker_ext_proto_depIdxs = []int32{
	8,  // 0: xproto.MsgTableHandScoreRecord.playerRecords:type_name -> xproto.PlayerHandScoreRecord
	7,  // 1: xproto.MsgTableInfo.players:type_name -> xproto.MsgPlayerInfo
	9,  // 2: xproto.MsgTableInfo.scoreRecords:type_name -> xproto.MsgTableHandScoreRecord
	9,  // 3: xproto.TableScoreRecords.scoreRecords:type_name -> xproto.MsgTableHandScoreRecord
	14, // 4: xproto.MsgGameOver.playerStats:type_name -> xproto.MsgGameOverPlayerStat
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_poker_ext_proto_init() }
func file_poker_ext_proto_init() {
	if File_poker_ext_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_poker_ext_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHandScoreRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgTableHandScoreRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgTableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableScoreRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDisbandAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDisbandNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGameOverPlayerStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGameOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgTableShowTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgTableDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgKickout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgKickoutResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgEnterTableResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_ext_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDonate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_poker_ext_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_poker_ext_proto_goTypes,
		DependencyIndexes: file_poker_ext_proto_depIdxs,
		EnumInfos:         file_poker_ext_proto_enumTypes,
		MessageInfos:      file_poker_ext_proto_msgTypes,
	}.Build()
	File_poker_ext_proto = out.File
	file_poker_ext_proto_rawDesc = nil
	file_poker_ext_proto_goTypes = nil
	file_poker_ext_proto_depIdxs = nil
}
