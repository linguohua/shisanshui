// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: shisanshui.proto

package xproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 牌组类型
type CardHandType int32

const (
	CardHandType_None   CardHandType = 0 // 无效牌型
	CardHandType_Flush  CardHandType = 1 // 五张或更多的连续单牌（如： 45678 或 78910JQK ）不包括 2 点和双王
	CardHandType_Bomb   CardHandType = 2 // 炸弹，四张同数值牌（如四个 7 ）
	CardHandType_Single CardHandType = 3 // 单张
	CardHandType_Pair   CardHandType = 4 // 对牌：数值相同的两张牌（如梅花 4+ 方块 4 ）
	// 双顺：三对或更多的连续对牌（如： 334455 、 7788991010JJ
	// ）不包括 2 点和双王
	CardHandType_Pair3X        CardHandType = 5
	CardHandType_Triplet       CardHandType = 6 // 三张牌：数值相同的三张牌（如三个 J ）
	CardHandType_TripletSingle CardHandType = 7 // 三带一
	// 三带二，二必须是对子,只有一个三张以及一个对子
	CardHandType_TripletPair CardHandType = 8
	// 三顺：二个或更多的连续三张牌（如： 333444 ， 555666777888
	// ）不包括 2 点和双王
	CardHandType_Triplet2X CardHandType = 9
	// 飞机带翅膀：三顺+同数量的单牌（或同数量的对牌）如：
	// 444555+79 或 333444555+7799JJ
	CardHandType_Triplet2X2Pair CardHandType = 10
	// 飞机带翅膀：三顺+同数量的单牌（或同数量的对牌）如：
	// 444555+79 或 333444555+7799JJ
	CardHandType_Triplet2X2Single CardHandType = 11
	// 四带二：四张牌+两手牌。（注意：四带二不是炸弹）如： 5555 + 3 + 8
	CardHandType_FourX2Single CardHandType = 12
	// 四带二：四张牌+两手牌。（注意：四带二不是炸弹）如： 4444 + 55 + 77
	CardHandType_FourX2Pair CardHandType = 13
	// 火箭，也即是大小王一对子
	CardHandType_Roket CardHandType = 14
)

// Enum value maps for CardHandType.
var (
	CardHandType_name = map[int32]string{
		0:  "None",
		1:  "Flush",
		2:  "Bomb",
		3:  "Single",
		4:  "Pair",
		5:  "Pair3X",
		6:  "Triplet",
		7:  "TripletSingle",
		8:  "TripletPair",
		9:  "Triplet2X",
		10: "Triplet2X2Pair",
		11: "Triplet2X2Single",
		12: "FourX2Single",
		13: "FourX2Pair",
		14: "Roket",
	}
	CardHandType_value = map[string]int32{
		"None":             0,
		"Flush":            1,
		"Bomb":             2,
		"Single":           3,
		"Pair":             4,
		"Pair3X":           5,
		"Triplet":          6,
		"TripletSingle":    7,
		"TripletPair":      8,
		"Triplet2X":        9,
		"Triplet2X2Pair":   10,
		"Triplet2X2Single": 11,
		"FourX2Single":     12,
		"FourX2Pair":       13,
		"Roket":            14,
	}
)

func (x CardHandType) Enum() *CardHandType {
	p := new(CardHandType)
	*p = x
	return p
}

func (x CardHandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardHandType) Descriptor() protoreflect.EnumDescriptor {
	return file_shisanshui_proto_enumTypes[0].Descriptor()
}

func (CardHandType) Type() protoreflect.EnumType {
	return &file_shisanshui_proto_enumTypes[0]
}

func (x CardHandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardHandType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardHandType(num)
	return nil
}

// Deprecated: Use CardHandType.Descriptor instead.
func (CardHandType) EnumDescriptor() ([]byte, []int) {
	return file_shisanshui_proto_rawDescGZIP(), []int{0}
}

// 一手牌局结束
// 可能的结果是：流局、有人自摸胡牌、有人放铳其他人胡牌
type HandOverType int32

const (
	HandOverType_enumHandOverType_None          HandOverType = 0 // 没有胡牌，或者流局
	HandOverType_enumHandOverType_Win_SelfDrawn HandOverType = 1 // 自摸胡牌
	HandOverType_enumHandOverType_Win_Chuck     HandOverType = 2 //  放铳胡牌
	HandOverType_enumHandOverType_Chucker       HandOverType = 3 //  放铳
	HandOverType_enumHandOverType_Konger        HandOverType = 4 //  点杠者
	HandOverType_enumHandOverType_Win_RobKong   HandOverType = 5 //  抢杠胡
)

// Enum value maps for HandOverType.
var (
	HandOverType_name = map[int32]string{
		0: "enumHandOverType_None",
		1: "enumHandOverType_Win_SelfDrawn",
		2: "enumHandOverType_Win_Chuck",
		3: "enumHandOverType_Chucker",
		4: "enumHandOverType_Konger",
		5: "enumHandOverType_Win_RobKong",
	}
	HandOverType_value = map[string]int32{
		"enumHandOverType_None":          0,
		"enumHandOverType_Win_SelfDrawn": 1,
		"enumHandOverType_Win_Chuck":     2,
		"enumHandOverType_Chucker":       3,
		"enumHandOverType_Konger":        4,
		"enumHandOverType_Win_RobKong":   5,
	}
)

func (x HandOverType) Enum() *HandOverType {
	p := new(HandOverType)
	*p = x
	return p
}

func (x HandOverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandOverType) Descriptor() protoreflect.EnumDescriptor {
	return file_shisanshui_proto_enumTypes[1].Descriptor()
}

func (HandOverType) Type() protoreflect.EnumType {
	return &file_shisanshui_proto_enumTypes[1]
}

func (x HandOverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HandOverType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HandOverType(num)
	return nil
}

// Deprecated: Use HandOverType.Descriptor instead.
func (HandOverType) EnumDescriptor() ([]byte, []int) {
	return file_shisanshui_proto_rawDescGZIP(), []int{1}
}

// 动作类型
// 注意为了能够用一个int合并多个动作
// 因此所有动作的值均为二进制bit field独立
type ActionType int32

const (
	ActionType_enumActionType_None    ActionType = 0 // 无效动作
	ActionType_enumActionType_SKIP    ActionType = 1 // 过
	ActionType_enumActionType_DISCARD ActionType = 2 // 出牌
	// 抽牌，斗地主里面用于通知所有人底牌以及把底牌给予地主同志
	ActionType_enumActionType_DRAW          ActionType = 4
	ActionType_enumActionType_Win_SelfDrawn ActionType = 8   // 赢牌
	ActionType_enumActionType_Call          ActionType = 16  // 叫地主
	ActionType_enumActionType_Rob           ActionType = 32  // 抢地主
	ActionType_enumActionType_CallDouble    ActionType = 64  // 加注
	ActionType_enumActionType_CallWithScore ActionType = 128 // 叫分叫地主
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0:   "enumActionType_None",
		1:   "enumActionType_SKIP",
		2:   "enumActionType_DISCARD",
		4:   "enumActionType_DRAW",
		8:   "enumActionType_Win_SelfDrawn",
		16:  "enumActionType_Call",
		32:  "enumActionType_Rob",
		64:  "enumActionType_CallDouble",
		128: "enumActionType_CallWithScore",
	}
	ActionType_value = map[string]int32{
		"enumActionType_None":          0,
		"enumActionType_SKIP":          1,
		"enumActionType_DISCARD":       2,
		"enumActionType_DRAW":          4,
		"enumActionType_Win_SelfDrawn": 8,
		"enumActionType_Call":          16,
		"enumActionType_Rob":           32,
		"enumActionType_CallDouble":    64,
		"enumActionType_CallWithScore": 128,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_shisanshui_proto_enumTypes[2].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_shisanshui_proto_enumTypes[2]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActionType(num)
	return nil
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_shisanshui_proto_rawDescGZIP(), []int{2}
}

var File_shisanshui_proto protoreflect.FileDescriptor

var file_shisanshui_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x68, 0x69, 0x73, 0x61, 0x6e, 0x73, 0x68, 0x75, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xe6, 0x01, 0x0a, 0x0c, 0x43,
	0x61, 0x72, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6d, 0x62, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x69, 0x72, 0x33, 0x58, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x74, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x72, 0x69,
	0x70, 0x6c, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x10, 0x08, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x74, 0x32, 0x58, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x74, 0x32, 0x58, 0x32, 0x50, 0x61, 0x69, 0x72, 0x10, 0x0a,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x74, 0x32, 0x58, 0x32, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x6f, 0x75, 0x72, 0x58, 0x32,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x6f, 0x75, 0x72,
	0x58, 0x32, 0x50, 0x61, 0x69, 0x72, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x6f, 0x6b, 0x65,
	0x74, 0x10, 0x0e, 0x2a, 0xca, 0x01, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x65, 0x6e, 0x75, 0x6d, 0x48, 0x61, 0x6e, 0x64,
	0x4f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x65, 0x6e, 0x75, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x57, 0x69, 0x6e, 0x5f, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x72, 0x61, 0x77,
	0x6e, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x65, 0x6e, 0x75, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x4f,
	0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x69, 0x6e, 0x5f, 0x43, 0x68, 0x75, 0x63,
	0x6b, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x65, 0x6e, 0x75, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x4f,
	0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x68, 0x75, 0x63, 0x6b, 0x65, 0x72, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x65, 0x6e, 0x75, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x4f, 0x76, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4b, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x10, 0x04, 0x12, 0x20,
	0x0a, 0x1c, 0x65, 0x6e, 0x75, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x57, 0x69, 0x6e, 0x5f, 0x52, 0x6f, 0x62, 0x4b, 0x6f, 0x6e, 0x67, 0x10, 0x05,
	0x2a, 0x88, 0x02, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x65, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x65, 0x6e, 0x75, 0x6d,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x65, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x65, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x52, 0x41, 0x57, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x65, 0x6e, 0x75, 0x6d, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x69, 0x6e, 0x5f, 0x53, 0x65, 0x6c,
	0x66, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x65, 0x6e, 0x75, 0x6d,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x10,
	0x10, 0x12, 0x16, 0x0a, 0x12, 0x65, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x52, 0x6f, 0x62, 0x10, 0x20, 0x12, 0x1d, 0x0a, 0x19, 0x65, 0x6e, 0x75,
	0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x6c, 0x6c,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x40, 0x12, 0x21, 0x0a, 0x1c, 0x65, 0x6e, 0x75, 0x6d,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x10, 0x80, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e,
	0x3b, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_shisanshui_proto_rawDescOnce sync.Once
	file_shisanshui_proto_rawDescData = file_shisanshui_proto_rawDesc
)

func file_shisanshui_proto_rawDescGZIP() []byte {
	file_shisanshui_proto_rawDescOnce.Do(func() {
		file_shisanshui_proto_rawDescData = protoimpl.X.CompressGZIP(file_shisanshui_proto_rawDescData)
	})
	return file_shisanshui_proto_rawDescData
}

var file_shisanshui_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_shisanshui_proto_goTypes = []interface{}{
	(CardHandType)(0), // 0: xproto.CardHandType
	(HandOverType)(0), // 1: xproto.HandOverType
	(ActionType)(0),   // 2: xproto.ActionType
}
var file_shisanshui_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_shisanshui_proto_init() }
func file_shisanshui_proto_init() {
	if File_shisanshui_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shisanshui_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shisanshui_proto_goTypes,
		DependencyIndexes: file_shisanshui_proto_depIdxs,
		EnumInfos:         file_shisanshui_proto_enumTypes,
	}.Build()
	File_shisanshui_proto = out.File
	file_shisanshui_proto_rawDesc = nil
	file_shisanshui_proto_goTypes = nil
	file_shisanshui_proto_depIdxs = nil
}
