syntax = "proto2";
package xproto;
option go_package = ".;xproto";

// 牌的ID
enum CardID {
  R2H = 0; //红桃2
  R2D = 1; //方块2
  R2C = 2; //梅花2
  R2S = 3; //黑桃2

  R3H = 4; // 3
  R3D = 5;
  R3C = 6;
  R3S = 7;

  R4H = 8; // 4
  R4D = 9;
  R4C = 10;
  R4S = 11;

  R5H = 12; // 5
  R5D = 13;
  R5C = 14;
  R5S = 15;

  R6H = 16; // 6
  R6D = 17;
  R6C = 18;
  R6S = 19;

  R7H = 20; // 7
  R7D = 21;
  R7C = 22;
  R7S = 23;

  R8H = 24; // 8
  R8D = 25;
  R8C = 26;
  R8S = 27;

  R9H = 28; // 9
  R9D = 29;
  R9C = 30;
  R9S = 31;

  R10H = 32; // 10
  R10D = 33;
  R10C = 34;
  R10S = 35;

  JH = 36; // Jack
  JD = 37;
  JC = 38;
  JS = 39;

  QH = 40; // Queen
  QD = 41;
  QC = 42;
  QS = 43;

  KH = 44; // King
  KD = 45;
  KC = 46;
  KS = 47;

  AH = 48; // ACE
  AD = 49;
  AC = 50;
  AS = 51;

  // RankEnd = 52; // rank 牌分界

  JOB = 52; // joker black，黑小丑
  JOR = 53; // joker red，红小丑

  CARDMAX = 54;
}

enum MessageCode {
  // 无效消息码
  OPInvalid = 0;
  // 动作
  OPAction = 1;
  // 动作通知
  OPActionResultNotify = 2;
  // 动作允许，对一个玩家，请求其出牌等
  OPActionAllowed = 3;
  // 动作允许，对多个玩家，在某个玩家出牌后，请求其余玩家吃椪杠胡等
  OPReActionAllowed = 5;
  // 发牌
  OPDeal = 6;
  // 本手牌结果
  OPHandOver = 7;
  // 断线、奔溃恢复，注意恢复过程是由若干个消息构成，先是OPTableUpdate，然后是OPRestore(消息体是MsgRestore)，然后是OPActionAllowed或者OPReActionAllowed
  OPRestore = 8;
  // 玩家离开房间，客户端会请求服务器其离开房间
  OPPlayerLeaveTable = 9;
  // 玩家进入房间，客户端不会发送该消息，仅用于通知客户端
  OPPlayerEnterTable = 10;
  // 解散牌局
  OPDisbandRequest = 11;
  // 解散牌局询问其他玩家是否同意，或者通告解散的当前状态（谁同意，谁拒绝，谁正在思考）
  OPDisbandNotify = 12;
  // 解散牌局答复
  OPDisbandAnswer = 13;
  // 玩家准备好
  OPPlayerReady = 14;
  // 房间被删除，本消息没有消息体，仅一个命令字，客户端收到后退出房间
  OPTableDeleted = 15;
  // 更新房间信息，主要是玩家状态变更
  OPTableUpdate = 16;
  // 要求客户端显示一段提示信息
  OPTableShowTips = 17;
  // 房间游戏结束
  OPGameOver = 18;
  // 踢玩家出房间
  OPKickout = 19;
  // 玩家打赏给另一个玩家
  OPDonate = 20;
  // 更新玩家的GPS定位信息
  OPUpdateLocation = 21;
  // 切换到大厅，连接断开，但是服务器保留玩家座位，并重置状态到offline状态，当且仅当游戏没开始时允许所有客户端发送这个请求
  OP2Lobby = 22;
  // 更新牌局内的道具配置
  OPUpdatePropCfg = 23;
}

// 消息包装，把其他消息体格式化为byte array，
// 加上消息码构成一个GameMessage，便于解析
message GameMessage {
  required int32 code = 1;
  optional bytes data = 2;
}

// 牌组
message MsgCardHand {
  // 牌组类型
  required int32 cardHandType = 1;
  // 牌列表，对于一些有规律的牌组例如同花顺，可以只写第一个牌
  repeated int32 cards = 2;
  // 墩序号
  required int32 handNum = 3;
}

// 玩家牌列表
message MsgPlayerCardList {
  // 玩家座位ID
  required int32 chairID = 1;
  // 玩家手上的牌数量（用于其他玩家显示手牌数）
  required int32 cardCountOnHand = 2;
  // 玩家手上的牌（暗牌）
  repeated int32 cardsOnHand = 3;
  // 打出去的牌组列表
  repeated MsgCardHand discardedHands = 4;
  // extra data
  repeated int32 extra = 5;
}

// 发牌
// 服务器下发给客户端
// 客户端收到消息后，做如下处理：
// 1. 显示自己的牌
// 2. 显示其他人的牌（暗牌，庄家14张）
// 3. 显示庄家
message MsgDeal {
  // 庄家座位ID
  required int32 bankerChairID = 1;
  // 所有玩家的牌列表
  repeated MsgPlayerCardList playerCardLists = 2;
}

// 服务器准许客户端做游戏动作
// 服务器发送给客户端
// 客户端收到本消息后，于界面上提示或者允许用户操作
// 在用户操作完成后（或者超时），发送MsgPlayerAction消息给服务器
message MsgAllowAction {
  // QA索引，参考 MsgPlayerAction 中说明
  required int32 qaIndex = 1;
  // 本动作允许的目标，如果是自己则客户端展示操作界面
  required int32 actionChairID = 2;
  // 所有当前服务器期待/允许的动作
  required int32 allowedActions = 3;
  // 默认超时时间，首次消息服务器会下发
  optional int32 timeoutInSeconds = 4;
}

// 服务器准许客户端做游戏动作
// 服务器发送给客户端
// 客户端收到本消息后，于界面上提示或者允许用户操作
// 在用户操作完成后（或者超时），发送MsgAction消息给服务器
message MsgAllowReAction {
  // QA索引，参考 MsgPlayerAction 中说明
  required int32 qaIndex = 1;
  // 本动作允许的目标，如果是自己则客户端展示操作界面
  required int32 actionChairID = 2;
  // 所有当前服务器期待/允许的动作
  required int32 allowedActions = 3;
  // 默认超时时间，首次消息服务器会下发
  optional int32 timeoutInSeconds = 4;
  // 上一个动作的玩家座位ID
  optional int32 prevActionChairID = 5;
  // 上一动作玩家打出牌组
  optional MsgCardHand prevActionHand = 6;
}

// 玩家执行动作
// 客户端必须是收到服务器允许动作消息并
// 通过界面让玩家完成操作之后，通过该消息通知服务器用户执行了动作
// 客户端需要填写正确的qaIndex，以及action（这两个参数都是从服务器下发）
message MsgPlayerAction {
  // QA索引，该索引是服务器通过出牌许可消息下发的，客户端需要回填于此
  // QA索引的目的是为了服务器对消息的控制：服务器对于新收到的消息如果其QA索引
  // 不等于服务器当前期待的QA索引，服务器将会抛弃该消息
  // QA索引就是流水号，QA代表Question&Answer
  // 本文档其余处QA索引意义与此一致
  required int32 qaIndex = 1;
  // 动作
  required int32 action = 2;
  // 其他标记，目前只用做听牌标记，如果是1，则表示出牌后要求听牌
  optional int32 flags = 3;
  // 动作的涉及的牌列表
  repeated int32 cards = 4;
  // repeated MsgCardHand discardedHands = 4;
}

// 服务器通知所有玩家某个玩家进行了何种动作
// 客户端收到消息后，对界面进行更新或者播放对应动作动画
message MsgActionResultNotify {
  // 动作者
  required int32 targetChairID = 1;
  // 动作名
  required int32 action = 2;
  // 动作目标牌组
  optional MsgCardHand actionHand = 3;
  // 剩余牌张数
  optional int32 cardsInWall = 4;
}

// 掉线恢复
message MsgRestore {
  // 所有人的牌数据，复用MsgDeal
  required MsgDeal msgDeal = 1;
  // 上一个动作的玩家座位ID
  optional int32 prevActionChairID = 2;
  // 上一动作玩家打出牌组
  optional MsgCardHand prevActionHand = 3;
  // 地主的座位ID
  optional int32 landlordChairID = 4;
  // 当前房间的倍数，由抢地主翻倍而改变，默认是1
  optional int32 multiple = 5;
  // 当前房间奖励给地主的3张底牌，如果处于抢地主阶段，有可能为空
  repeated int32 lastAwardCards = 6;
  // 服务器通过这个额外的玩家座位ID列表，下发一些额外内容，例如斗地主用于下发加注的玩家
  repeated int32 playersListA = 7;
}

// 与其他玩家关系
message MsgPlayerCompareContext{
  // 玩家chairID
  required int32 targetChairID = 1;
  // 输赢总分数
  required int32 totalScore = 2;
	// 此玩家输了多少墩
  required int32 loseHandNum = 3;
  // 墩分数详情列表
  repeated int32 handTotalScore = 4;
}

// 一手牌结束后每个玩家的计分
message MsgPlayerScore {
  // 玩家
  required int32 targetChairID = 1;
  // 赢特殊牌类型 可以无效
  required MsgCardHand specialCardHand = 2;
  // 总赢 总输
  required int32 totalScore = 3;
  // 与其他玩家关系
  repeated MsgPlayerCompareContext compareContexts = 4;
  // 是否赢了三家
  required bool isWinAll = 5;
  // 是否倒墩
  required bool isInvertedHand = 6;
  // 墩子牌型
  repeated MsgCardHand cardHands = 7;
}

// 一手牌结束后计分
message MsgHandScore {
  // 玩家得分
  repeated MsgPlayerScore playerScores = 1;
}

// 一手牌结束通知
message MsgHandOver {
  // 结束类型：自模胡，吃铳胡，流局
  required int32 endType = 1;
  // 手牌列表
  repeated MsgPlayerCardList playerCardLists = 2;
  // 分数
  optional MsgHandScore scores = 3;
  // 是否可以继续下手牌
  optional bool continueAble = 4;
}

// 更新玩家的GPS定位信息
message MsgUpdateLocation {
  // 用户ID
  required string userID = 1;
  // 位置信息，json格式
  required string location = 2;
}

// 更新牌局内的道具配置
message MsgUpdatePropCfg {
  // 牌局内的道具配置
  required string propCfg = 1;
}
