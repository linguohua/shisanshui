// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: poker.proto

package xproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 牌的ID
type CardID int32

const (
	CardID_R2H     CardID = 0 //红桃2
	CardID_R2D     CardID = 1 //方块2
	CardID_R2C     CardID = 2 //梅花2
	CardID_R2S     CardID = 3 //黑桃2
	CardID_R3H     CardID = 4 // 3
	CardID_R3D     CardID = 5
	CardID_R3C     CardID = 6
	CardID_R3S     CardID = 7
	CardID_R4H     CardID = 8 // 4
	CardID_R4D     CardID = 9
	CardID_R4C     CardID = 10
	CardID_R4S     CardID = 11
	CardID_R5H     CardID = 12 // 5
	CardID_R5D     CardID = 13
	CardID_R5C     CardID = 14
	CardID_R5S     CardID = 15
	CardID_R6H     CardID = 16 // 6
	CardID_R6D     CardID = 17
	CardID_R6C     CardID = 18
	CardID_R6S     CardID = 19
	CardID_R7H     CardID = 20 // 7
	CardID_R7D     CardID = 21
	CardID_R7C     CardID = 22
	CardID_R7S     CardID = 23
	CardID_R8H     CardID = 24 // 8
	CardID_R8D     CardID = 25
	CardID_R8C     CardID = 26
	CardID_R8S     CardID = 27
	CardID_R9H     CardID = 28 // 9
	CardID_R9D     CardID = 29
	CardID_R9C     CardID = 30
	CardID_R9S     CardID = 31
	CardID_R10H    CardID = 32 // 10
	CardID_R10D    CardID = 33
	CardID_R10C    CardID = 34
	CardID_R10S    CardID = 35
	CardID_JH      CardID = 36 // Jack
	CardID_JD      CardID = 37
	CardID_JC      CardID = 38
	CardID_JS      CardID = 39
	CardID_QH      CardID = 40 // Queen
	CardID_QD      CardID = 41
	CardID_QC      CardID = 42
	CardID_QS      CardID = 43
	CardID_KH      CardID = 44 // King
	CardID_KD      CardID = 45
	CardID_KC      CardID = 46
	CardID_KS      CardID = 47
	CardID_AH      CardID = 48 // ACE
	CardID_AD      CardID = 49
	CardID_AC      CardID = 50
	CardID_AS      CardID = 51
	CardID_JOB     CardID = 52 // joker black，黑小丑
	CardID_JOR     CardID = 53 // joker red，红小丑
	CardID_CARDMAX CardID = 54
)

// Enum value maps for CardID.
var (
	CardID_name = map[int32]string{
		0:  "R2H",
		1:  "R2D",
		2:  "R2C",
		3:  "R2S",
		4:  "R3H",
		5:  "R3D",
		6:  "R3C",
		7:  "R3S",
		8:  "R4H",
		9:  "R4D",
		10: "R4C",
		11: "R4S",
		12: "R5H",
		13: "R5D",
		14: "R5C",
		15: "R5S",
		16: "R6H",
		17: "R6D",
		18: "R6C",
		19: "R6S",
		20: "R7H",
		21: "R7D",
		22: "R7C",
		23: "R7S",
		24: "R8H",
		25: "R8D",
		26: "R8C",
		27: "R8S",
		28: "R9H",
		29: "R9D",
		30: "R9C",
		31: "R9S",
		32: "R10H",
		33: "R10D",
		34: "R10C",
		35: "R10S",
		36: "JH",
		37: "JD",
		38: "JC",
		39: "JS",
		40: "QH",
		41: "QD",
		42: "QC",
		43: "QS",
		44: "KH",
		45: "KD",
		46: "KC",
		47: "KS",
		48: "AH",
		49: "AD",
		50: "AC",
		51: "AS",
		52: "JOB",
		53: "JOR",
		54: "CARDMAX",
	}
	CardID_value = map[string]int32{
		"R2H":     0,
		"R2D":     1,
		"R2C":     2,
		"R2S":     3,
		"R3H":     4,
		"R3D":     5,
		"R3C":     6,
		"R3S":     7,
		"R4H":     8,
		"R4D":     9,
		"R4C":     10,
		"R4S":     11,
		"R5H":     12,
		"R5D":     13,
		"R5C":     14,
		"R5S":     15,
		"R6H":     16,
		"R6D":     17,
		"R6C":     18,
		"R6S":     19,
		"R7H":     20,
		"R7D":     21,
		"R7C":     22,
		"R7S":     23,
		"R8H":     24,
		"R8D":     25,
		"R8C":     26,
		"R8S":     27,
		"R9H":     28,
		"R9D":     29,
		"R9C":     30,
		"R9S":     31,
		"R10H":    32,
		"R10D":    33,
		"R10C":    34,
		"R10S":    35,
		"JH":      36,
		"JD":      37,
		"JC":      38,
		"JS":      39,
		"QH":      40,
		"QD":      41,
		"QC":      42,
		"QS":      43,
		"KH":      44,
		"KD":      45,
		"KC":      46,
		"KS":      47,
		"AH":      48,
		"AD":      49,
		"AC":      50,
		"AS":      51,
		"JOB":     52,
		"JOR":     53,
		"CARDMAX": 54,
	}
)

func (x CardID) Enum() *CardID {
	p := new(CardID)
	*p = x
	return p
}

func (x CardID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardID) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[0].Descriptor()
}

func (CardID) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[0]
}

func (x CardID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardID(num)
	return nil
}

// Deprecated: Use CardID.Descriptor instead.
func (CardID) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{0}
}

type MessageCode int32

const (
	// 无效消息码
	MessageCode_OPInvalid MessageCode = 0
	// 动作
	MessageCode_OPAction MessageCode = 1
	// 动作通知
	MessageCode_OPActionResultNotify MessageCode = 2
	// 动作允许，对一个玩家，请求其出牌等
	MessageCode_OPActionAllowed MessageCode = 3
	// 动作允许，对多个玩家，在某个玩家出牌后，请求其余玩家吃椪杠胡等
	MessageCode_OPReActionAllowed MessageCode = 5
	// 发牌
	MessageCode_OPDeal MessageCode = 6
	// 本手牌结果
	MessageCode_OPHandOver MessageCode = 7
	// 断线、奔溃恢复，注意恢复过程是由若干个消息构成，先是OPTableUpdate，然后是OPRestore(消息体是MsgRestore)，然后是OPActionAllowed或者OPReActionAllowed
	MessageCode_OPRestore MessageCode = 8
	// 玩家离开房间，客户端会请求服务器其离开房间
	MessageCode_OPPlayerLeaveTable MessageCode = 9
	// 玩家进入房间，客户端不会发送该消息，仅用于通知客户端
	MessageCode_OPPlayerEnterTable MessageCode = 10
	// 解散牌局
	MessageCode_OPDisbandRequest MessageCode = 11
	// 解散牌局询问其他玩家是否同意，或者通告解散的当前状态（谁同意，谁拒绝，谁正在思考）
	MessageCode_OPDisbandNotify MessageCode = 12
	// 解散牌局答复
	MessageCode_OPDisbandAnswer MessageCode = 13
	// 玩家准备好
	MessageCode_OPPlayerReady MessageCode = 14
	// 房间被删除，本消息没有消息体，仅一个命令字，客户端收到后退出房间
	MessageCode_OPTableDeleted MessageCode = 15
	// 更新房间信息，主要是玩家状态变更
	MessageCode_OPTableUpdate MessageCode = 16
	// 要求客户端显示一段提示信息
	MessageCode_OPTableShowTips MessageCode = 17
	// 房间游戏结束
	MessageCode_OPGameOver MessageCode = 18
	// 踢玩家出房间
	MessageCode_OPKickout MessageCode = 19
	// 玩家打赏给另一个玩家
	MessageCode_OPDonate MessageCode = 20
	// 更新玩家的GPS定位信息
	MessageCode_OPUpdateLocation MessageCode = 21
	// 切换到大厅，连接断开，但是服务器保留玩家座位，并重置状态到offline状态，当且仅当游戏没开始时允许所有客户端发送这个请求
	MessageCode_OP2Lobby MessageCode = 22
	// 更新牌局内的道具配置
	MessageCode_OPUpdatePropCfg MessageCode = 23
)

// Enum value maps for MessageCode.
var (
	MessageCode_name = map[int32]string{
		0:  "OPInvalid",
		1:  "OPAction",
		2:  "OPActionResultNotify",
		3:  "OPActionAllowed",
		5:  "OPReActionAllowed",
		6:  "OPDeal",
		7:  "OPHandOver",
		8:  "OPRestore",
		9:  "OPPlayerLeaveTable",
		10: "OPPlayerEnterTable",
		11: "OPDisbandRequest",
		12: "OPDisbandNotify",
		13: "OPDisbandAnswer",
		14: "OPPlayerReady",
		15: "OPTableDeleted",
		16: "OPTableUpdate",
		17: "OPTableShowTips",
		18: "OPGameOver",
		19: "OPKickout",
		20: "OPDonate",
		21: "OPUpdateLocation",
		22: "OP2Lobby",
		23: "OPUpdatePropCfg",
	}
	MessageCode_value = map[string]int32{
		"OPInvalid":            0,
		"OPAction":             1,
		"OPActionResultNotify": 2,
		"OPActionAllowed":      3,
		"OPReActionAllowed":    5,
		"OPDeal":               6,
		"OPHandOver":           7,
		"OPRestore":            8,
		"OPPlayerLeaveTable":   9,
		"OPPlayerEnterTable":   10,
		"OPDisbandRequest":     11,
		"OPDisbandNotify":      12,
		"OPDisbandAnswer":      13,
		"OPPlayerReady":        14,
		"OPTableDeleted":       15,
		"OPTableUpdate":        16,
		"OPTableShowTips":      17,
		"OPGameOver":           18,
		"OPKickout":            19,
		"OPDonate":             20,
		"OPUpdateLocation":     21,
		"OP2Lobby":             22,
		"OPUpdatePropCfg":      23,
	}
)

func (x MessageCode) Enum() *MessageCode {
	p := new(MessageCode)
	*p = x
	return p
}

func (x MessageCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageCode) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[1].Descriptor()
}

func (MessageCode) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[1]
}

func (x MessageCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MessageCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MessageCode(num)
	return nil
}

// Deprecated: Use MessageCode.Descriptor instead.
func (MessageCode) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{1}
}

// 消息包装，把其他消息体格式化为byte array，
// 加上消息码构成一个GameMessage，便于解析
type GameMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *int32 `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *GameMessage) Reset() {
	*x = GameMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage) ProtoMessage() {}

func (x *GameMessage) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage.ProtoReflect.Descriptor instead.
func (*GameMessage) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{0}
}

func (x *GameMessage) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GameMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 牌组
type MsgCardHand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌组类型
	CardHandType *int32 `protobuf:"varint,1,req,name=cardHandType" json:"cardHandType,omitempty"`
	// 牌列表，对于一些有规律的牌组例如同花顺，可以只写第一个牌
	Cards []int32 `protobuf:"varint,2,rep,name=cards" json:"cards,omitempty"`
}

func (x *MsgCardHand) Reset() {
	*x = MsgCardHand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCardHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCardHand) ProtoMessage() {}

func (x *MsgCardHand) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCardHand.ProtoReflect.Descriptor instead.
func (*MsgCardHand) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{1}
}

func (x *MsgCardHand) GetCardHandType() int32 {
	if x != nil && x.CardHandType != nil {
		return *x.CardHandType
	}
	return 0
}

func (x *MsgCardHand) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 玩家牌列表
type MsgPlayerCardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家座位ID
	ChairID *int32 `protobuf:"varint,1,req,name=chairID" json:"chairID,omitempty"`
	// 玩家手上的牌数量（用于其他玩家显示手牌数）
	CardCountOnHand *int32 `protobuf:"varint,2,req,name=cardCountOnHand" json:"cardCountOnHand,omitempty"`
	// 玩家手上的牌（暗牌）
	CardsOnHand []int32 `protobuf:"varint,3,rep,name=cardsOnHand" json:"cardsOnHand,omitempty"`
	// 打出去的牌组列表
	DiscardedHands []*MsgCardHand `protobuf:"bytes,4,rep,name=discardedHands" json:"discardedHands,omitempty"`
	// extra data
	Extra []int32 `protobuf:"varint,5,rep,name=extra" json:"extra,omitempty"`
}

func (x *MsgPlayerCardList) Reset() {
	*x = MsgPlayerCardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPlayerCardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPlayerCardList) ProtoMessage() {}

func (x *MsgPlayerCardList) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgPlayerCardList.ProtoReflect.Descriptor instead.
func (*MsgPlayerCardList) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{2}
}

func (x *MsgPlayerCardList) GetChairID() int32 {
	if x != nil && x.ChairID != nil {
		return *x.ChairID
	}
	return 0
}

func (x *MsgPlayerCardList) GetCardCountOnHand() int32 {
	if x != nil && x.CardCountOnHand != nil {
		return *x.CardCountOnHand
	}
	return 0
}

func (x *MsgPlayerCardList) GetCardsOnHand() []int32 {
	if x != nil {
		return x.CardsOnHand
	}
	return nil
}

func (x *MsgPlayerCardList) GetDiscardedHands() []*MsgCardHand {
	if x != nil {
		return x.DiscardedHands
	}
	return nil
}

func (x *MsgPlayerCardList) GetExtra() []int32 {
	if x != nil {
		return x.Extra
	}
	return nil
}

// 发牌
// 服务器下发给客户端
// 客户端收到消息后，做如下处理：
// 1. 显示自己的牌
// 2. 显示其他人的牌（暗牌，庄家14张）
// 3. 显示庄家
type MsgDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 庄家座位ID
	BankerChairID *int32 `protobuf:"varint,1,req,name=bankerChairID" json:"bankerChairID,omitempty"`
	// 所有玩家的牌列表
	PlayerCardLists []*MsgPlayerCardList `protobuf:"bytes,2,rep,name=playerCardLists" json:"playerCardLists,omitempty"`
}

func (x *MsgDeal) Reset() {
	*x = MsgDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDeal) ProtoMessage() {}

func (x *MsgDeal) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDeal.ProtoReflect.Descriptor instead.
func (*MsgDeal) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{3}
}

func (x *MsgDeal) GetBankerChairID() int32 {
	if x != nil && x.BankerChairID != nil {
		return *x.BankerChairID
	}
	return 0
}

func (x *MsgDeal) GetPlayerCardLists() []*MsgPlayerCardList {
	if x != nil {
		return x.PlayerCardLists
	}
	return nil
}

// 服务器准许客户端做游戏动作
// 服务器发送给客户端
// 客户端收到本消息后，于界面上提示或者允许用户操作
// 在用户操作完成后（或者超时），发送MsgPlayerAction消息给服务器
type MsgAllowAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// QA索引，参考 MsgPlayerAction 中说明
	QaIndex *int32 `protobuf:"varint,1,req,name=qaIndex" json:"qaIndex,omitempty"`
	// 本动作允许的目标，如果是自己则客户端展示操作界面
	ActionChairID *int32 `protobuf:"varint,2,req,name=actionChairID" json:"actionChairID,omitempty"`
	// 所有当前服务器期待/允许的动作
	AllowedActions *int32 `protobuf:"varint,3,req,name=allowedActions" json:"allowedActions,omitempty"`
	// 默认超时时间，首次消息服务器会下发
	TimeoutInSeconds *int32 `protobuf:"varint,4,opt,name=timeoutInSeconds" json:"timeoutInSeconds,omitempty"`
}

func (x *MsgAllowAction) Reset() {
	*x = MsgAllowAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgAllowAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgAllowAction) ProtoMessage() {}

func (x *MsgAllowAction) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgAllowAction.ProtoReflect.Descriptor instead.
func (*MsgAllowAction) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{4}
}

func (x *MsgAllowAction) GetQaIndex() int32 {
	if x != nil && x.QaIndex != nil {
		return *x.QaIndex
	}
	return 0
}

func (x *MsgAllowAction) GetActionChairID() int32 {
	if x != nil && x.ActionChairID != nil {
		return *x.ActionChairID
	}
	return 0
}

func (x *MsgAllowAction) GetAllowedActions() int32 {
	if x != nil && x.AllowedActions != nil {
		return *x.AllowedActions
	}
	return 0
}

func (x *MsgAllowAction) GetTimeoutInSeconds() int32 {
	if x != nil && x.TimeoutInSeconds != nil {
		return *x.TimeoutInSeconds
	}
	return 0
}

// 服务器准许客户端做游戏动作
// 服务器发送给客户端
// 客户端收到本消息后，于界面上提示或者允许用户操作
// 在用户操作完成后（或者超时），发送MsgAction消息给服务器
type MsgAllowReAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// QA索引，参考 MsgPlayerAction 中说明
	QaIndex *int32 `protobuf:"varint,1,req,name=qaIndex" json:"qaIndex,omitempty"`
	// 本动作允许的目标，如果是自己则客户端展示操作界面
	ActionChairID *int32 `protobuf:"varint,2,req,name=actionChairID" json:"actionChairID,omitempty"`
	// 所有当前服务器期待/允许的动作
	AllowedActions *int32 `protobuf:"varint,3,req,name=allowedActions" json:"allowedActions,omitempty"`
	// 默认超时时间，首次消息服务器会下发
	TimeoutInSeconds *int32 `protobuf:"varint,4,opt,name=timeoutInSeconds" json:"timeoutInSeconds,omitempty"`
	// 上一个动作的玩家座位ID
	PrevActionChairID *int32 `protobuf:"varint,5,opt,name=prevActionChairID" json:"prevActionChairID,omitempty"`
	// 上一动作玩家打出牌组
	PrevActionHand *MsgCardHand `protobuf:"bytes,6,opt,name=prevActionHand" json:"prevActionHand,omitempty"`
}

func (x *MsgAllowReAction) Reset() {
	*x = MsgAllowReAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgAllowReAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgAllowReAction) ProtoMessage() {}

func (x *MsgAllowReAction) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgAllowReAction.ProtoReflect.Descriptor instead.
func (*MsgAllowReAction) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{5}
}

func (x *MsgAllowReAction) GetQaIndex() int32 {
	if x != nil && x.QaIndex != nil {
		return *x.QaIndex
	}
	return 0
}

func (x *MsgAllowReAction) GetActionChairID() int32 {
	if x != nil && x.ActionChairID != nil {
		return *x.ActionChairID
	}
	return 0
}

func (x *MsgAllowReAction) GetAllowedActions() int32 {
	if x != nil && x.AllowedActions != nil {
		return *x.AllowedActions
	}
	return 0
}

func (x *MsgAllowReAction) GetTimeoutInSeconds() int32 {
	if x != nil && x.TimeoutInSeconds != nil {
		return *x.TimeoutInSeconds
	}
	return 0
}

func (x *MsgAllowReAction) GetPrevActionChairID() int32 {
	if x != nil && x.PrevActionChairID != nil {
		return *x.PrevActionChairID
	}
	return 0
}

func (x *MsgAllowReAction) GetPrevActionHand() *MsgCardHand {
	if x != nil {
		return x.PrevActionHand
	}
	return nil
}

// 玩家执行动作
// 客户端必须是收到服务器允许动作消息并
// 通过界面让玩家完成操作之后，通过该消息通知服务器用户执行了动作
// 客户端需要填写正确的qaIndex，以及action（这两个参数都是从服务器下发）
type MsgPlayerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// QA索引，该索引是服务器通过出牌许可消息下发的，客户端需要回填于此
	// QA索引的目的是为了服务器对消息的控制：服务器对于新收到的消息如果其QA索引
	// 不等于服务器当前期待的QA索引，服务器将会抛弃该消息
	// QA索引就是流水号，QA代表Question&Answer
	// 本文档其余处QA索引意义与此一致
	QaIndex *int32 `protobuf:"varint,1,req,name=qaIndex" json:"qaIndex,omitempty"`
	// 动作
	Action *int32 `protobuf:"varint,2,req,name=action" json:"action,omitempty"`
	// 其他标记，目前只用做听牌标记，如果是1，则表示出牌后要求听牌
	Flags *int32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	// 动作的涉及的牌列表
	Cards []int32 `protobuf:"varint,4,rep,name=cards" json:"cards,omitempty"` // repeated MsgCardHand discardedHands = 4;
}

func (x *MsgPlayerAction) Reset() {
	*x = MsgPlayerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPlayerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPlayerAction) ProtoMessage() {}

func (x *MsgPlayerAction) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgPlayerAction.ProtoReflect.Descriptor instead.
func (*MsgPlayerAction) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{6}
}

func (x *MsgPlayerAction) GetQaIndex() int32 {
	if x != nil && x.QaIndex != nil {
		return *x.QaIndex
	}
	return 0
}

func (x *MsgPlayerAction) GetAction() int32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

func (x *MsgPlayerAction) GetFlags() int32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *MsgPlayerAction) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 服务器通知所有玩家某个玩家进行了何种动作
// 客户端收到消息后，对界面进行更新或者播放对应动作动画
type MsgActionResultNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 动作者
	TargetChairID *int32 `protobuf:"varint,1,req,name=targetChairID" json:"targetChairID,omitempty"`
	// 动作名
	Action *int32 `protobuf:"varint,2,req,name=action" json:"action,omitempty"`
	// 动作目标牌组
	ActionHands []*MsgCardHand `protobuf:"bytes,3,rep,name=actionHands" json:"actionHands,omitempty"`
	// 剩余牌张数
	CardsInWall *int32 `protobuf:"varint,4,opt,name=cardsInWall" json:"cardsInWall,omitempty"`
}

func (x *MsgActionResultNotify) Reset() {
	*x = MsgActionResultNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgActionResultNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgActionResultNotify) ProtoMessage() {}

func (x *MsgActionResultNotify) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgActionResultNotify.ProtoReflect.Descriptor instead.
func (*MsgActionResultNotify) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{7}
}

func (x *MsgActionResultNotify) GetTargetChairID() int32 {
	if x != nil && x.TargetChairID != nil {
		return *x.TargetChairID
	}
	return 0
}

func (x *MsgActionResultNotify) GetAction() int32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

func (x *MsgActionResultNotify) GetActionHands() []*MsgCardHand {
	if x != nil {
		return x.ActionHands
	}
	return nil
}

func (x *MsgActionResultNotify) GetCardsInWall() int32 {
	if x != nil && x.CardsInWall != nil {
		return *x.CardsInWall
	}
	return 0
}

// 掉线恢复
type MsgRestore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 所有人的牌数据，复用MsgDeal
	MsgDeal *MsgDeal `protobuf:"bytes,1,req,name=msgDeal" json:"msgDeal,omitempty"`
	// 上一个动作的玩家座位ID
	PrevActionChairID *int32 `protobuf:"varint,2,opt,name=prevActionChairID" json:"prevActionChairID,omitempty"`
	// 上一动作玩家打出牌组
	PrevActionHand *MsgCardHand `protobuf:"bytes,3,opt,name=prevActionHand" json:"prevActionHand,omitempty"`
	// 地主的座位ID
	LandlordChairID *int32 `protobuf:"varint,4,opt,name=landlordChairID" json:"landlordChairID,omitempty"`
	// 当前房间的倍数，由抢地主翻倍而改变，默认是1
	Multiple *int32 `protobuf:"varint,5,opt,name=multiple" json:"multiple,omitempty"`
	// 当前房间奖励给地主的3张底牌，如果处于抢地主阶段，有可能为空
	LastAwardCards []int32 `protobuf:"varint,6,rep,name=lastAwardCards" json:"lastAwardCards,omitempty"`
	// 服务器通过这个额外的玩家座位ID列表，下发一些额外内容，例如斗地主用于下发加注的玩家
	PlayersListA []int32 `protobuf:"varint,7,rep,name=playersListA" json:"playersListA,omitempty"`
}

func (x *MsgRestore) Reset() {
	*x = MsgRestore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRestore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRestore) ProtoMessage() {}

func (x *MsgRestore) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgRestore.ProtoReflect.Descriptor instead.
func (*MsgRestore) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{8}
}

func (x *MsgRestore) GetMsgDeal() *MsgDeal {
	if x != nil {
		return x.MsgDeal
	}
	return nil
}

func (x *MsgRestore) GetPrevActionChairID() int32 {
	if x != nil && x.PrevActionChairID != nil {
		return *x.PrevActionChairID
	}
	return 0
}

func (x *MsgRestore) GetPrevActionHand() *MsgCardHand {
	if x != nil {
		return x.PrevActionHand
	}
	return nil
}

func (x *MsgRestore) GetLandlordChairID() int32 {
	if x != nil && x.LandlordChairID != nil {
		return *x.LandlordChairID
	}
	return 0
}

func (x *MsgRestore) GetMultiple() int32 {
	if x != nil && x.Multiple != nil {
		return *x.Multiple
	}
	return 0
}

func (x *MsgRestore) GetLastAwardCards() []int32 {
	if x != nil {
		return x.LastAwardCards
	}
	return nil
}

func (x *MsgRestore) GetPlayersListA() []int32 {
	if x != nil {
		return x.PlayersListA
	}
	return nil
}

// 与某个对手玩家关系
type MsgPlayerCompareContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 墩分数详情列表
	HandScores []int32 `protobuf:"varint,1,rep,name=handScores" json:"handScores,omitempty"`
}

func (x *MsgPlayerCompareContext) Reset() {
	*x = MsgPlayerCompareContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPlayerCompareContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPlayerCompareContext) ProtoMessage() {}

func (x *MsgPlayerCompareContext) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgPlayerCompareContext.ProtoReflect.Descriptor instead.
func (*MsgPlayerCompareContext) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{9}
}

func (x *MsgPlayerCompareContext) GetHandScores() []int32 {
	if x != nil {
		return x.HandScores
	}
	return nil
}

// 一手牌结束后每个玩家的计分
type MsgPlayerScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家
	TargetChairID *int32 `protobuf:"varint,1,req,name=targetChairID" json:"targetChairID,omitempty"`
	// 赢特殊牌类型 可以无效
	SpecialCardType *int32 `protobuf:"varint,2,opt,name=specialCardType" json:"specialCardType,omitempty"`
	// 总赢 总输
	TotalScore *int32 `protobuf:"varint,3,req,name=totalScore" json:"totalScore,omitempty"`
	// 与其他玩家关系
	CompareContexts []*MsgPlayerCompareContext `protobuf:"bytes,4,rep,name=compareContexts" json:"compareContexts,omitempty"`
	// 是否赢了三家
	IsWinAll *bool `protobuf:"varint,5,req,name=isWinAll" json:"isWinAll,omitempty"`
	// 是否倒墩
	IsInvertedHand *bool `protobuf:"varint,6,req,name=isInvertedHand" json:"isInvertedHand,omitempty"`
}

func (x *MsgPlayerScore) Reset() {
	*x = MsgPlayerScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPlayerScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPlayerScore) ProtoMessage() {}

func (x *MsgPlayerScore) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgPlayerScore.ProtoReflect.Descriptor instead.
func (*MsgPlayerScore) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{10}
}

func (x *MsgPlayerScore) GetTargetChairID() int32 {
	if x != nil && x.TargetChairID != nil {
		return *x.TargetChairID
	}
	return 0
}

func (x *MsgPlayerScore) GetSpecialCardType() int32 {
	if x != nil && x.SpecialCardType != nil {
		return *x.SpecialCardType
	}
	return 0
}

func (x *MsgPlayerScore) GetTotalScore() int32 {
	if x != nil && x.TotalScore != nil {
		return *x.TotalScore
	}
	return 0
}

func (x *MsgPlayerScore) GetCompareContexts() []*MsgPlayerCompareContext {
	if x != nil {
		return x.CompareContexts
	}
	return nil
}

func (x *MsgPlayerScore) GetIsWinAll() bool {
	if x != nil && x.IsWinAll != nil {
		return *x.IsWinAll
	}
	return false
}

func (x *MsgPlayerScore) GetIsInvertedHand() bool {
	if x != nil && x.IsInvertedHand != nil {
		return *x.IsInvertedHand
	}
	return false
}

// 一手牌结束后计分
type MsgHandScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家得分
	PlayerScores []*MsgPlayerScore `protobuf:"bytes,1,rep,name=playerScores" json:"playerScores,omitempty"`
}

func (x *MsgHandScore) Reset() {
	*x = MsgHandScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHandScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHandScore) ProtoMessage() {}

func (x *MsgHandScore) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHandScore.ProtoReflect.Descriptor instead.
func (*MsgHandScore) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{11}
}

func (x *MsgHandScore) GetPlayerScores() []*MsgPlayerScore {
	if x != nil {
		return x.PlayerScores
	}
	return nil
}

// 一手牌结束通知
type MsgHandOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 结束类型：自模胡，吃铳胡，流局
	EndType *int32 `protobuf:"varint,1,req,name=endType" json:"endType,omitempty"`
	// 手牌列表
	PlayerCardLists []*MsgPlayerCardList `protobuf:"bytes,2,rep,name=playerCardLists" json:"playerCardLists,omitempty"`
	// 分数
	Scores *MsgHandScore `protobuf:"bytes,3,opt,name=scores" json:"scores,omitempty"`
	// 是否可以继续下手牌
	ContinueAble *bool `protobuf:"varint,4,opt,name=continueAble" json:"continueAble,omitempty"`
}

func (x *MsgHandOver) Reset() {
	*x = MsgHandOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHandOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHandOver) ProtoMessage() {}

func (x *MsgHandOver) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHandOver.ProtoReflect.Descriptor instead.
func (*MsgHandOver) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{12}
}

func (x *MsgHandOver) GetEndType() int32 {
	if x != nil && x.EndType != nil {
		return *x.EndType
	}
	return 0
}

func (x *MsgHandOver) GetPlayerCardLists() []*MsgPlayerCardList {
	if x != nil {
		return x.PlayerCardLists
	}
	return nil
}

func (x *MsgHandOver) GetScores() *MsgHandScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *MsgHandOver) GetContinueAble() bool {
	if x != nil && x.ContinueAble != nil {
		return *x.ContinueAble
	}
	return false
}

// 更新玩家的GPS定位信息
type MsgUpdateLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户ID
	UserID *string `protobuf:"bytes,1,req,name=userID" json:"userID,omitempty"`
	// 位置信息，json格式
	Location *string `protobuf:"bytes,2,req,name=location" json:"location,omitempty"`
}

func (x *MsgUpdateLocation) Reset() {
	*x = MsgUpdateLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUpdateLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUpdateLocation) ProtoMessage() {}

func (x *MsgUpdateLocation) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgUpdateLocation.ProtoReflect.Descriptor instead.
func (*MsgUpdateLocation) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{13}
}

func (x *MsgUpdateLocation) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *MsgUpdateLocation) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

// 更新牌局内的道具配置
type MsgUpdatePropCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌局内的道具配置
	PropCfg *string `protobuf:"bytes,1,req,name=propCfg" json:"propCfg,omitempty"`
}

func (x *MsgUpdatePropCfg) Reset() {
	*x = MsgUpdatePropCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUpdatePropCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUpdatePropCfg) ProtoMessage() {}

func (x *MsgUpdatePropCfg) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgUpdatePropCfg.ProtoReflect.Descriptor instead.
func (*MsgUpdatePropCfg) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{14}
}

func (x *MsgUpdatePropCfg) GetPropCfg() string {
	if x != nil && x.PropCfg != nil {
		return *x.PropCfg
	}
	return ""
}

var File_poker_proto protoreflect.FileDescriptor

var file_poker_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x78,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x0b,
	0x4d, 0x73, 0x67, 0x43, 0x61, 0x72, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x61, 0x72, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f,
	0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x6e, 0x48, 0x61, 0x6e,
	0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x61, 0x72, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x22, 0x74, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x61, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x69, 0x72, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x4d,
	0x73, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x71, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07,
	0x71, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x91, 0x02, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x61, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x71, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x76, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x61, 0x72,
	0x64, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x6e, 0x64, 0x22, 0x6f, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x61, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x71, 0x61, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x4d, 0x73, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67,
	0x43, 0x61, 0x72, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e,
	0x57, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x49, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x22, 0xb4, 0x02, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x65, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x65, 0x61,
	0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72,
	0x65, 0x76, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x12,
	0x3b, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x73, 0x67, 0x43, 0x61, 0x72, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x0e, 0x70, 0x72,
	0x65, 0x76, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x6c, 0x61, 0x6e, 0x64, 0x6c, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x61, 0x6e, 0x64, 0x6c, 0x6f, 0x72, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x22, 0x39,
	0x0a, 0x17, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x68,
	0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x0e, 0x4d, 0x73,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x72,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x57, 0x69, 0x6e,
	0x41, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x57, 0x69, 0x6e,
	0x41, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x49,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x22, 0x4a, 0x0a, 0x0c, 0x4d,
	0x73, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x48,
	0x61, 0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x73, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x41, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x41, 0x62, 0x6c, 0x65, 0x22, 0x47, 0x0a, 0x11, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x2c, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x43, 0x66, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x43, 0x66, 0x67,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x43, 0x66, 0x67, 0x2a,
	0xef, 0x03, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x32,
	0x48, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x32, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x52, 0x32, 0x43, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x32, 0x53, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x33, 0x48, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x33, 0x44, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x33, 0x43, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x33, 0x53,
	0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x34, 0x48, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x52,
	0x34, 0x44, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x34, 0x43, 0x10, 0x0a, 0x12, 0x07, 0x0a,
	0x03, 0x52, 0x34, 0x53, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x35, 0x48, 0x10, 0x0c, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x35, 0x44, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x35, 0x43, 0x10,
	0x0e, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x35, 0x53, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x36,
	0x48, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x36, 0x44, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03,
	0x52, 0x36, 0x43, 0x10, 0x12, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x36, 0x53, 0x10, 0x13, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x37, 0x48, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x37, 0x44, 0x10, 0x15,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x37, 0x43, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x37, 0x53,
	0x10, 0x17, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x38, 0x48, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03, 0x52,
	0x38, 0x44, 0x10, 0x19, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x38, 0x43, 0x10, 0x1a, 0x12, 0x07, 0x0a,
	0x03, 0x52, 0x38, 0x53, 0x10, 0x1b, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x39, 0x48, 0x10, 0x1c, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x39, 0x44, 0x10, 0x1d, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x39, 0x43, 0x10,
	0x1e, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x39, 0x53, 0x10, 0x1f, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x31,
	0x30, 0x48, 0x10, 0x20, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x31, 0x30, 0x44, 0x10, 0x21, 0x12, 0x08,
	0x0a, 0x04, 0x52, 0x31, 0x30, 0x43, 0x10, 0x22, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x31, 0x30, 0x53,
	0x10, 0x23, 0x12, 0x06, 0x0a, 0x02, 0x4a, 0x48, 0x10, 0x24, 0x12, 0x06, 0x0a, 0x02, 0x4a, 0x44,
	0x10, 0x25, 0x12, 0x06, 0x0a, 0x02, 0x4a, 0x43, 0x10, 0x26, 0x12, 0x06, 0x0a, 0x02, 0x4a, 0x53,
	0x10, 0x27, 0x12, 0x06, 0x0a, 0x02, 0x51, 0x48, 0x10, 0x28, 0x12, 0x06, 0x0a, 0x02, 0x51, 0x44,
	0x10, 0x29, 0x12, 0x06, 0x0a, 0x02, 0x51, 0x43, 0x10, 0x2a, 0x12, 0x06, 0x0a, 0x02, 0x51, 0x53,
	0x10, 0x2b, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x48, 0x10, 0x2c, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x44,
	0x10, 0x2d, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x43, 0x10, 0x2e, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x53,
	0x10, 0x2f, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x48, 0x10, 0x30, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x44,
	0x10, 0x31, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x43, 0x10, 0x32, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x53,
	0x10, 0x33, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x4f, 0x42, 0x10, 0x34, 0x12, 0x07, 0x0a, 0x03, 0x4a,
	0x4f, 0x52, 0x10, 0x35, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x52, 0x44, 0x4d, 0x41, 0x58, 0x10,
	0x36, 0x2a, 0xc0, 0x03, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x50, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x50, 0x52, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x44, 0x65, 0x61, 0x6c, 0x10, 0x06,
	0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x48, 0x61, 0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x07,
	0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x08, 0x12,
	0x16, 0x0a, 0x12, 0x4f, 0x50, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x0a, 0x12,
	0x14, 0x0a, 0x10, 0x4f, 0x50, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x44, 0x69, 0x73, 0x62, 0x61,
	0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50,
	0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x10, 0x0d, 0x12,
	0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x70, 0x73, 0x10, 0x11, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x50, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x12, 0x12, 0x0d,
	0x0a, 0x09, 0x4f, 0x50, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x10, 0x13, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x50, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x15, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x32, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0x16, 0x12,
	0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x43,
	0x66, 0x67, 0x10, 0x17, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_poker_proto_rawDescOnce sync.Once
	file_poker_proto_rawDescData = file_poker_proto_rawDesc
)

func file_poker_proto_rawDescGZIP() []byte {
	file_poker_proto_rawDescOnce.Do(func() {
		file_poker_proto_rawDescData = protoimpl.X.CompressGZIP(file_poker_proto_rawDescData)
	})
	return file_poker_proto_rawDescData
}

var file_poker_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_poker_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_poker_proto_goTypes = []interface{}{
	(CardID)(0),                     // 0: xproto.CardID
	(MessageCode)(0),                // 1: xproto.MessageCode
	(*GameMessage)(nil),             // 2: xproto.GameMessage
	(*MsgCardHand)(nil),             // 3: xproto.MsgCardHand
	(*MsgPlayerCardList)(nil),       // 4: xproto.MsgPlayerCardList
	(*MsgDeal)(nil),                 // 5: xproto.MsgDeal
	(*MsgAllowAction)(nil),          // 6: xproto.MsgAllowAction
	(*MsgAllowReAction)(nil),        // 7: xproto.MsgAllowReAction
	(*MsgPlayerAction)(nil),         // 8: xproto.MsgPlayerAction
	(*MsgActionResultNotify)(nil),   // 9: xproto.MsgActionResultNotify
	(*MsgRestore)(nil),              // 10: xproto.MsgRestore
	(*MsgPlayerCompareContext)(nil), // 11: xproto.MsgPlayerCompareContext
	(*MsgPlayerScore)(nil),          // 12: xproto.MsgPlayerScore
	(*MsgHandScore)(nil),            // 13: xproto.MsgHandScore
	(*MsgHandOver)(nil),             // 14: xproto.MsgHandOver
	(*MsgUpdateLocation)(nil),       // 15: xproto.MsgUpdateLocation
	(*MsgUpdatePropCfg)(nil),        // 16: xproto.MsgUpdatePropCfg
}
var file_poker_proto_depIdxs = []int32{
	3,  // 0: xproto.MsgPlayerCardList.discardedHands:type_name -> xproto.MsgCardHand
	4,  // 1: xproto.MsgDeal.playerCardLists:type_name -> xproto.MsgPlayerCardList
	3,  // 2: xproto.MsgAllowReAction.prevActionHand:type_name -> xproto.MsgCardHand
	3,  // 3: xproto.MsgActionResultNotify.actionHands:type_name -> xproto.MsgCardHand
	5,  // 4: xproto.MsgRestore.msgDeal:type_name -> xproto.MsgDeal
	3,  // 5: xproto.MsgRestore.prevActionHand:type_name -> xproto.MsgCardHand
	11, // 6: xproto.MsgPlayerScore.compareContexts:type_name -> xproto.MsgPlayerCompareContext
	12, // 7: xproto.MsgHandScore.playerScores:type_name -> xproto.MsgPlayerScore
	4,  // 8: xproto.MsgHandOver.playerCardLists:type_name -> xproto.MsgPlayerCardList
	13, // 9: xproto.MsgHandOver.scores:type_name -> xproto.MsgHandScore
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_poker_proto_init() }
func file_poker_proto_init() {
	if File_poker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_poker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCardHand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPlayerCardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgAllowAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgAllowReAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPlayerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgActionResultNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRestore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPlayerCompareContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPlayerScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHandScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHandOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUpdateLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUpdatePropCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_poker_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_poker_proto_goTypes,
		DependencyIndexes: file_poker_proto_depIdxs,
		EnumInfos:         file_poker_proto_enumTypes,
		MessageInfos:      file_poker_proto_msgTypes,
	}.Build()
	File_poker_proto = out.File
	file_poker_proto_rawDesc = nil
	file_poker_proto_goTypes = nil
	file_poker_proto_depIdxs = nil
}
