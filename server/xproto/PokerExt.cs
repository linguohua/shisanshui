// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: poker_ext.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xproto {

  /// <summary>Holder for reflection information generated from poker_ext.proto</summary>
  public static partial class PokerExtReflection {

    #region Descriptor
    /// <summary>File descriptor for poker_ext.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PokerExtReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9wb2tlcl9leHQucHJvdG8SBnhwcm90byKOAgoNTXNnUGxheWVySW5mbxIO",
            "CgZ1c2VySUQYASACKAkSDwoHY2hhaXJJRBgCIAIoBRINCgVzdGF0ZRgDIAIo",
            "BRIMCgRuYW1lGAQgASgJEgwKBG5pY2sYBSABKAkSCwoDc2V4GAYgASgNEhMK",
            "C2hlYWRJY29uVVJJGAcgASgJEgoKAmlwGAggASgJEhAKCGxvY2F0aW9uGAkg",
            "ASgJEg8KB2RmSGFuZHMYCiABKAUSDwoHZGlhbW9uZBgLIAEoBRINCgVjaGFy",
            "bRgMIAEoBRIQCghhdmF0YXJJRBgNIAEoBRIPCgdjbHViSURzGA4gAygJEgsK",
            "A2RhbhgPIAEoBRIQCghpc0xvb2tlchgQIAEoCCJHChVQbGF5ZXJIYW5kU2Nv",
            "cmVSZWNvcmQSDgoGdXNlcklEGAEgAigJEg8KB3dpblR5cGUYAiACKAUSDQoF",
            "c2NvcmUYAyACKAUicwoXTXNnVGFibGVIYW5kU2NvcmVSZWNvcmQSDwoHZW5k",
            "VHlwZRgBIAIoBRIRCgloYW5kSW5kZXgYAiACKAUSNAoNcGxheWVyUmVjb3Jk",
            "cxgDIAMoCzIdLnhwcm90by5QbGF5ZXJIYW5kU2NvcmVSZWNvcmQi3wEKDE1z",
            "Z1RhYmxlSW5mbxINCgVzdGF0ZRgBIAIoBRImCgdwbGF5ZXJzGAIgAygLMhUu",
            "eHByb3RvLk1zZ1BsYXllckluZm8SDwoHb3duZXJJRBgDIAEoCRITCgt0YWJs",
            "ZU51bWJlchgEIAEoCRIUCgxoYW5kU3RhcnR0ZWQYBSABKAUSNQoMc2NvcmVS",
            "ZWNvcmRzGAYgAygLMh8ueHByb3RvLk1zZ1RhYmxlSGFuZFNjb3JlUmVjb3Jk",
            "EhQKDGhhbmRGaW5pc2hlZBgHIAEoBRIPCgd0aW1lb3V0GAggAigFIkoKEVRh",
            "YmxlU2NvcmVSZWNvcmRzEjUKDHNjb3JlUmVjb3JkcxgBIAMoCzIfLnhwcm90",
            "by5Nc2dUYWJsZUhhbmRTY29yZVJlY29yZCIhChBNc2dEaXNiYW5kQW5zd2Vy",
            "Eg0KBWFncmVlGAEgAigIIn4KEE1zZ0Rpc2JhbmROb3RpZnkSFAoMZGlzYmFu",
            "ZFN0YXRlGAEgAigFEhEKCWFwcGxpY2FudBgCIAIoBRINCgV3YWl0cxgDIAMo",
            "BRIOCgZhZ3JlZXMYBCADKAUSDwoHcmVqZWN0cxgFIAMoBRIRCgljb3VudGRv",
            "d24YBiABKAUitAEKFU1zZ0dhbWVPdmVyUGxheWVyU3RhdBIPCgdjaGFpcklE",
            "GAEgAigFEg0KBXNjb3JlGAIgAigFEhcKD3dpbkNodWNrQ291bnRlchgDIAIo",
            "BRIbChN3aW5TZWxmRHJhd25Db3VudGVyGAQgAigFEhYKDmNodWNrZXJDb3Vu",
            "dGVyGAUgAigFEhYKDnJvYktvbmdDb3VudGVyGAYgASgFEhUKDWtvbmdlckNv",
            "dW50ZXIYByABKAUiQQoLTXNnR2FtZU92ZXISMgoLcGxheWVyU3RhdHMYASAD",
            "KAsyHS54cHJvdG8uTXNnR2FtZU92ZXJQbGF5ZXJTdGF0IjEKEE1zZ1RhYmxl",
            "U2hvd1RpcHMSDAoEdGlwcxgBIAEoCRIPCgd0aXBDb2RlGAIgAigFIiAKDk1z",
            "Z1RhYmxlRGVsZXRlEg4KBnJlYXNvbhgBIAIoBSIiCgpNc2dLaWNrb3V0EhQK",
            "DHZpY3RpbVVzZXJJRBgBIAIoCSJ0ChBNc2dLaWNrb3V0UmVzdWx0Eg4KBnJl",
            "c3VsdBgBIAIoBRIUCgx2aWN0aW1Vc2VySUQYAiABKAkSEgoKdmljdGltTmlj",
            "axgDIAEoCRIRCglieVdob05pY2sYBCABKAkSEwoLYnlXaG9Vc2VySUQYBSAB",
            "KAkiJQoTTXNnRW50ZXJUYWJsZVJlc3VsdBIOCgZzdGF0dXMYASACKAUiQwoJ",
            "TXNnRG9uYXRlEhEKCXRvQ2hhaXJJRBgBIAIoBRIOCgZpdGVtSUQYAiACKAUS",
            "EwoLZnJvbUNoYWlySUQYAyABKAUqVQoKVGFibGVTdGF0ZRIOCgpTVGFibGVJ",
            "ZGxlEAASEQoNU1RhYmxlV2FpdGluZxABEhEKDVNUYWJsZVBsYXlpbmcQAhIR",
            "Cg1TVGFibGVEZWxldGVkEAMqRAoLUGxheWVyU3RhdGUSCgoGUFNOb25lEAAS",
            "CwoHUFNSZWFkeRABEg0KCVBTT2ZmbGluZRACEg0KCVBTUGxheWluZxADKtsB",
            "CgxEaXNiYW5kU3RhdGUSCwoHV2FpdGluZxABEggKBERvbmUQAhIXChNEb25l",
            "V2l0aE90aGVyUmVqZWN0EAMSIgoeRG9uZVdpdGhUYWJsZVNlcnZlck5vdFJl",
            "c3BvbnNlEAQSHAoYRG9uZVdpdGhXYWl0UmVwbHlUaW1lb3V0EAUSGQoVRXJy",
            "b3JEdXBsaWNhdGVBY3F1aXJlEAYSIgoeRXJyb3JOZWVkT3duZXJXaGVuR2Ft",
            "ZU5vdFN0YXJ0EAcSGgoWRXJyb3JXYXRjaGVyTm90RGlzYmFuZBAIKlMKB1Rp",
            "cENvZGUSCgoGVENOb25lEAASGQoVVENXYWl0T3Bwb25lbnRzQWN0aW9uEAES",
            "IQodVENEb25hdGVGYWlsZWROb0Vub3VnaERpYW1vbmQQAiqeAQoRVGFibGVE",
            "ZWxldGVSZWFzb24SDwoLSWRsZVRpbWVvdXQQARIZChVEaXNiYW5kQnlPd25l",
            "ckZyb21STVMQAhIYChREaXNiYW5kQnlBcHBsaWNhdGlvbhADEhMKD0Rpc2Jh",
            "bmRCeVN5c3RlbRAEEhIKDkRpc2JhbmRNYXhIYW5kEAUSGgoWRGlzYmFuZElu",
            "TG9zZVByb3RlY3RlZBAGKp4BCg1LaWNrb3V0UmVzdWx0EhkKFUtpY2tvdXRS",
            "ZXN1bHRfU3VjY2VzcxABEicKI0tpY2tvdXRSZXN1bHRfRmFpbGVkR2FtZUhh",
            "c1N0YXJ0dGVkEAISIQodS2lja291dFJlc3VsdF9GYWlsZWROZWVkT3duZXIQ",
            "AxImCiJLaWNrb3V0UmVzdWx0X0ZhaWxlZFBsYXllck5vdEV4aXN0EAQq4wIK",
            "EEVudGVyVGFibGVTdGF0dXMSCwoHU3VjY2VzcxAAEhEKDVRhYmxlTm90RXhp",
            "c3QQARIRCg1UYWJsZUlzRnVsbGVkEAISEAoMVGFibGVQbGF5aW5nEAMSEgoO",
            "SW5Bbm90aGVyVGFibGUQBBIdChlNb25rZXlUYWJsZVVzZXJJRE5vdE1hdGNo",
            "EAUSIwofTW9ua2V5VGFibGVVc2VyTG9naW5TZXFOb3RNYXRjaBAGEhgKFEFw",
            "cE1vZHVsZU5lZWRVcGdyYWRlEAcSFAoQSW5UYWJsZUJsYWNrTGlzdBAIEiEK",
            "HVRha2VvZmZEaWFtb25kRmFpbGVkTm90RW5vdWdoEAkSGgoWVGFrZW9mZkRp",
            "YW1vbmRGYWlsZWRJTxAKEhMKD1BhcnNlVG9rZW5FcnJvchALEhsKF1RhYmxl",
            "SW5BcHBsaWNhdGVEaXNiYW5kEAwSEQoNTm90Q2x1Yk1lbWJlchANQgpaCC47",
            "eHByb3Rv"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Xproto.TableState), typeof(global::Xproto.PlayerState), typeof(global::Xproto.DisbandState), typeof(global::Xproto.TipCode), typeof(global::Xproto.TableDeleteReason), typeof(global::Xproto.KickoutResult), typeof(global::Xproto.EnterTableStatus), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgPlayerInfo), global::Xproto.MsgPlayerInfo.Parser, new[]{ "UserID", "ChairID", "State", "Name", "Nick", "Sex", "HeadIconURI", "Ip", "Location", "DfHands", "Diamond", "Charm", "AvatarID", "ClubIDs", "Dan", "IsLooker" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.PlayerHandScoreRecord), global::Xproto.PlayerHandScoreRecord.Parser, new[]{ "UserID", "WinType", "Score" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgTableHandScoreRecord), global::Xproto.MsgTableHandScoreRecord.Parser, new[]{ "EndType", "HandIndex", "PlayerRecords" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgTableInfo), global::Xproto.MsgTableInfo.Parser, new[]{ "State", "Players", "OwnerID", "TableNumber", "HandStartted", "ScoreRecords", "HandFinished", "Timeout" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.TableScoreRecords), global::Xproto.TableScoreRecords.Parser, new[]{ "ScoreRecords" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgDisbandAnswer), global::Xproto.MsgDisbandAnswer.Parser, new[]{ "Agree" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgDisbandNotify), global::Xproto.MsgDisbandNotify.Parser, new[]{ "DisbandState", "Applicant", "Waits", "Agrees", "Rejects", "Countdown" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgGameOverPlayerStat), global::Xproto.MsgGameOverPlayerStat.Parser, new[]{ "ChairID", "Score", "WinChuckCounter", "WinSelfDrawnCounter", "ChuckerCounter", "RobKongCounter", "KongerCounter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgGameOver), global::Xproto.MsgGameOver.Parser, new[]{ "PlayerStats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgTableShowTips), global::Xproto.MsgTableShowTips.Parser, new[]{ "Tips", "TipCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgTableDelete), global::Xproto.MsgTableDelete.Parser, new[]{ "Reason" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgKickout), global::Xproto.MsgKickout.Parser, new[]{ "VictimUserID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgKickoutResult), global::Xproto.MsgKickoutResult.Parser, new[]{ "Result", "VictimUserID", "VictimNick", "ByWhoNick", "ByWhoUserID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgEnterTableResult), global::Xproto.MsgEnterTableResult.Parser, new[]{ "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xproto.MsgDonate), global::Xproto.MsgDonate.Parser, new[]{ "ToChairID", "ItemID", "FromChairID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TableState {
    /// <summary>
    /// TableIdle 房间空闲
    /// </summary>
    [pbr::OriginalName("STableIdle")] StableIdle = 0,
    /// <summary>
    /// TableWaiting 房间正在等待玩家进入
    /// </summary>
    [pbr::OriginalName("STableWaiting")] StableWaiting = 1,
    /// <summary>
    /// TablePlaying 游戏正在进行中
    /// </summary>
    [pbr::OriginalName("STablePlaying")] StablePlaying = 2,
    /// <summary>
    /// 房间已经删除
    /// </summary>
    [pbr::OriginalName("STableDeleted")] StableDeleted = 3,
  }

  public enum PlayerState {
    [pbr::OriginalName("PSNone")] Psnone = 0,
    [pbr::OriginalName("PSReady")] Psready = 1,
    [pbr::OriginalName("PSOffline")] Psoffline = 2,
    [pbr::OriginalName("PSPlaying")] Psplaying = 3,
  }

  /// <summary>
  /// 解散请求的状态
  /// </summary>
  public enum DisbandState {
    /// <summary>
    /// 正在等待回复
    /// </summary>
    [pbr::OriginalName("Waiting")] Waiting = 1,
    /// <summary>
    /// 已经完成
    /// </summary>
    [pbr::OriginalName("Done")] Done = 2,
    /// <summary>
    /// 其他人拒绝解散
    /// </summary>
    [pbr::OriginalName("DoneWithOtherReject")] DoneWithOtherReject = 3,
    /// <summary>
    /// 房间访问不回应
    /// </summary>
    [pbr::OriginalName("DoneWithTableServerNotResponse")] DoneWithTableServerNotResponse = 4,
    /// <summary>
    /// 等待其他玩家回复超时
    /// </summary>
    [pbr::OriginalName("DoneWithWaitReplyTimeout")] DoneWithWaitReplyTimeout = 5,
    /// <summary>
    /// 已经有其他人申请了解散
    /// </summary>
    [pbr::OriginalName("ErrorDuplicateAcquire")] ErrorDuplicateAcquire = 6,
    /// <summary>
    /// 游戏未开始，只能房主才可以解散房间
    /// </summary>
    [pbr::OriginalName("ErrorNeedOwnerWhenGameNotStart")] ErrorNeedOwnerWhenGameNotStart = 7,
    /// <summary>
    /// 旁观者不可以解散房间
    /// </summary>
    [pbr::OriginalName("ErrorWatcherNotDisband")] ErrorWatcherNotDisband = 8,
  }

  public enum TipCode {
    [pbr::OriginalName("TCNone")] Tcnone = 0,
    /// <summary>
    /// 等待其他玩家动作
    /// </summary>
    [pbr::OriginalName("TCWaitOpponentsAction")] TcwaitOpponentsAction = 1,
    /// <summary>
    /// 打赏失败，没有钻石
    /// </summary>
    [pbr::OriginalName("TCDonateFailedNoEnoughDiamond")] TcdonateFailedNoEnoughDiamond = 2,
  }

  /// <summary>
  /// 房间删除原因
  /// </summary>
  public enum TableDeleteReason {
    /// <summary>
    /// 闲置时间过长
    /// </summary>
    [pbr::OriginalName("IdleTimeout")] IdleTimeout = 1,
    /// <summary>
    /// 被房主解散从房间管理列表
    /// </summary>
    [pbr::OriginalName("DisbandByOwnerFromRMS")] DisbandByOwnerFromRms = 2,
    /// <summary>
    /// 被申请解散，而且解散成功
    /// </summary>
    [pbr::OriginalName("DisbandByApplication")] DisbandByApplication = 3,
    /// <summary>
    /// 系统解散，可能是系统管理员解散
    /// </summary>
    [pbr::OriginalName("DisbandBySystem")] DisbandBySystem = 4,
    /// <summary>
    /// 牌局已经达到最大轮数
    /// </summary>
    [pbr::OriginalName("DisbandMaxHand")] DisbandMaxHand = 5,
    /// <summary>
    /// 已经有足够人进园子，牌局解散
    /// </summary>
    [pbr::OriginalName("DisbandInLoseProtected")] DisbandInLoseProtected = 6,
  }

  public enum KickoutResult {
    /// <summary>
    /// 踢人成功
    /// </summary>
    [pbr::OriginalName("KickoutResult_Success")] Success = 1,
    /// <summary>
    /// 游戏已经开始不能踢人
    /// </summary>
    [pbr::OriginalName("KickoutResult_FailedGameHasStartted")] FailedGameHasStartted = 2,
    /// <summary>
    /// 主要房主才可以踢人
    /// </summary>
    [pbr::OriginalName("KickoutResult_FailedNeedOwner")] FailedNeedOwner = 3,
    /// <summary>
    /// 玩家已经离开
    /// </summary>
    [pbr::OriginalName("KickoutResult_FailedPlayerNotExist")] FailedPlayerNotExist = 4,
  }

  /// <summary>
  /// 进入房间结果
  /// </summary>
  public enum EnterTableStatus {
    /// <summary>
    /// 成功
    /// </summary>
    [pbr::OriginalName("Success")] Success = 0,
    /// <summary>
    /// 房间不存在
    /// </summary>
    [pbr::OriginalName("TableNotExist")] TableNotExist = 1,
    /// <summary>
    /// 房间已经满员
    /// </summary>
    [pbr::OriginalName("TableIsFulled")] TableIsFulled = 2,
    /// <summary>
    /// 游戏正在进行中
    /// </summary>
    [pbr::OriginalName("TablePlaying")] TablePlaying = 3,
    /// <summary>
    /// 账号已经在另一个游戏房间
    /// </summary>
    [pbr::OriginalName("InAnotherTable")] InAnotherTable = 4,
    /// <summary>
    /// monkey房间需要userID匹配
    /// </summary>
    [pbr::OriginalName("MonkeyTableUserIDNotMatch")] MonkeyTableUserIdnotMatch = 5,
    /// <summary>
    /// monkey房间需要进入次序匹配
    /// </summary>
    [pbr::OriginalName("MonkeyTableUserLoginSeqNotMatch")] MonkeyTableUserLoginSeqNotMatch = 6,
    /// <summary>
    /// 客户端需要升级
    /// </summary>
    [pbr::OriginalName("AppModuleNeedUpgrade")] AppModuleNeedUpgrade = 7,
    /// <summary>
    /// 在房间的禁止进入黑名单中
    /// </summary>
    [pbr::OriginalName("InTableBlackList")] InTableBlackList = 8,
    /// <summary>
    /// 扣除钻石失败，余额不足
    /// </summary>
    [pbr::OriginalName("TakeoffDiamondFailedNotEnough")] TakeoffDiamondFailedNotEnough = 9,
    /// <summary>
    /// 扣除钻石失败，IO失败
    /// </summary>
    [pbr::OriginalName("TakeoffDiamondFailedIO")] TakeoffDiamondFailedIo = 10,
    /// <summary>
    /// 解析token出错
    /// </summary>
    [pbr::OriginalName("ParseTokenError")] ParseTokenError = 11,
    /// <summary>
    /// 房间正在解散
    /// </summary>
    [pbr::OriginalName("TableInApplicateDisband")] TableInApplicateDisband = 12,
    /// <summary>
    /// 不是俱乐部成员不能进入
    /// </summary>
    [pbr::OriginalName("NotClubMember")] NotClubMember = 13,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 进入房间后，如果有其他用户则利用
  /// 本消息把用户信息发送给客户端
  /// </summary>
  public sealed partial class MsgPlayerInfo : pb::IMessage<MsgPlayerInfo> {
    private static readonly pb::MessageParser<MsgPlayerInfo> _parser = new pb::MessageParser<MsgPlayerInfo>(() => new MsgPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerInfo(MsgPlayerInfo other) : this() {
      _hasBits0 = other._hasBits0;
      userID_ = other.userID_;
      chairID_ = other.chairID_;
      state_ = other.state_;
      name_ = other.name_;
      nick_ = other.nick_;
      sex_ = other.sex_;
      headIconURI_ = other.headIconURI_;
      ip_ = other.ip_;
      location_ = other.location_;
      dfHands_ = other.dfHands_;
      diamond_ = other.diamond_;
      charm_ = other.charm_;
      avatarID_ = other.avatarID_;
      clubIDs_ = other.clubIDs_.Clone();
      dan_ = other.dan_;
      isLooker_ = other.isLooker_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerInfo Clone() {
      return new MsgPlayerInfo(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private readonly static string UserIDDefaultValue = "";

    private string userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_ ?? UserIDDefaultValue; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "userID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUserID {
      get { return userID_ != null; }
    }
    /// <summary>Clears the value of the "userID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserID() {
      userID_ = null;
    }

    /// <summary>Field number for the "chairID" field.</summary>
    public const int ChairIDFieldNumber = 2;
    private readonly static int ChairIDDefaultValue = 0;

    private int chairID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairID {
      get { if ((_hasBits0 & 1) != 0) { return chairID_; } else { return ChairIDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        chairID_ = value;
      }
    }
    /// <summary>Gets whether the "chairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChairID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "chairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChairID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private readonly static int StateDefaultValue = 0;

    private int state_;
    /// <summary>
    /// 玩家当前状态PlayerState
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { if ((_hasBits0 & 2) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// 玩家名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 5;
    private readonly static string NickDefaultValue = "";

    private string nick_;
    /// <summary>
    /// 玩家昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_ ?? NickDefaultValue; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "nick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNick {
      get { return nick_ != null; }
    }
    /// <summary>Clears the value of the "nick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNick() {
      nick_ = null;
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 6;
    private readonly static uint SexDefaultValue = 0;

    private uint sex_;
    /// <summary>
    /// 玩家性别，0未设置，1男性，2女性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sex {
      get { if ((_hasBits0 & 4) != 0) { return sex_; } else { return SexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        sex_ = value;
      }
    }
    /// <summary>Gets whether the "sex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "sex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "headIconURI" field.</summary>
    public const int HeadIconURIFieldNumber = 7;
    private readonly static string HeadIconURIDefaultValue = "";

    private string headIconURI_;
    /// <summary>
    /// 玩家头像URI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadIconURI {
      get { return headIconURI_ ?? HeadIconURIDefaultValue; }
      set {
        headIconURI_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "headIconURI" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeadIconURI {
      get { return headIconURI_ != null; }
    }
    /// <summary>Clears the value of the "headIconURI" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeadIconURI() {
      headIconURI_ = null;
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 8;
    private readonly static string IpDefaultValue = "";

    private string ip_;
    /// <summary>
    /// 玩家外网ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_ ?? IpDefaultValue; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIp {
      get { return ip_ != null; }
    }
    /// <summary>Clears the value of the "ip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIp() {
      ip_ = null;
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 9;
    private readonly static string LocationDefaultValue = "";

    private string location_;
    /// <summary>
    /// 玩家位置信息,json格式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_ ?? LocationDefaultValue; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "location" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocation {
      get { return location_ != null; }
    }
    /// <summary>Clears the value of the "location" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocation() {
      location_ = null;
    }

    /// <summary>Field number for the "dfHands" field.</summary>
    public const int DfHandsFieldNumber = 10;
    private readonly static int DfHandsDefaultValue = 0;

    private int dfHands_;
    /// <summary>
    /// 玩家总局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DfHands {
      get { if ((_hasBits0 & 8) != 0) { return dfHands_; } else { return DfHandsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        dfHands_ = value;
      }
    }
    /// <summary>Gets whether the "dfHands" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDfHands {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "dfHands" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDfHands() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 11;
    private readonly static int DiamondDefaultValue = 0;

    private int diamond_;
    /// <summary>
    /// 钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { if ((_hasBits0 & 16) != 0) { return diamond_; } else { return DiamondDefaultValue; } }
      set {
        _hasBits0 |= 16;
        diamond_ = value;
      }
    }
    /// <summary>Gets whether the "diamond" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDiamond {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "diamond" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDiamond() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "charm" field.</summary>
    public const int CharmFieldNumber = 12;
    private readonly static int CharmDefaultValue = 0;

    private int charm_;
    /// <summary>
    /// 魅力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Charm {
      get { if ((_hasBits0 & 32) != 0) { return charm_; } else { return CharmDefaultValue; } }
      set {
        _hasBits0 |= 32;
        charm_ = value;
      }
    }
    /// <summary>Gets whether the "charm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCharm {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "charm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCharm() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "avatarID" field.</summary>
    public const int AvatarIDFieldNumber = 13;
    private readonly static int AvatarIDDefaultValue = 0;

    private int avatarID_;
    /// <summary>
    /// 头像框ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvatarID {
      get { if ((_hasBits0 & 64) != 0) { return avatarID_; } else { return AvatarIDDefaultValue; } }
      set {
        _hasBits0 |= 64;
        avatarID_ = value;
      }
    }
    /// <summary>Gets whether the "avatarID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvatarID {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "avatarID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvatarID() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "clubIDs" field.</summary>
    public const int ClubIDsFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_clubIDs_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> clubIDs_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 用户所有牌友群id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ClubIDs {
      get { return clubIDs_; }
    }

    /// <summary>Field number for the "dan" field.</summary>
    public const int DanFieldNumber = 15;
    private readonly static int DanDefaultValue = 0;

    private int dan_;
    /// <summary>
    /// 玩家段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dan {
      get { if ((_hasBits0 & 128) != 0) { return dan_; } else { return DanDefaultValue; } }
      set {
        _hasBits0 |= 128;
        dan_ = value;
      }
    }
    /// <summary>Gets whether the "dan" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDan {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "dan" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDan() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "isLooker" field.</summary>
    public const int IsLookerFieldNumber = 16;
    private readonly static bool IsLookerDefaultValue = false;

    private bool isLooker_;
    /// <summary>
    /// 是否为旁观者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLooker {
      get { if ((_hasBits0 & 256) != 0) { return isLooker_; } else { return IsLookerDefaultValue; } }
      set {
        _hasBits0 |= 256;
        isLooker_ = value;
      }
    }
    /// <summary>Gets whether the "isLooker" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsLooker {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "isLooker" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsLooker() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (ChairID != other.ChairID) return false;
      if (State != other.State) return false;
      if (Name != other.Name) return false;
      if (Nick != other.Nick) return false;
      if (Sex != other.Sex) return false;
      if (HeadIconURI != other.HeadIconURI) return false;
      if (Ip != other.Ip) return false;
      if (Location != other.Location) return false;
      if (DfHands != other.DfHands) return false;
      if (Diamond != other.Diamond) return false;
      if (Charm != other.Charm) return false;
      if (AvatarID != other.AvatarID) return false;
      if(!clubIDs_.Equals(other.clubIDs_)) return false;
      if (Dan != other.Dan) return false;
      if (IsLooker != other.IsLooker) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUserID) hash ^= UserID.GetHashCode();
      if (HasChairID) hash ^= ChairID.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasNick) hash ^= Nick.GetHashCode();
      if (HasSex) hash ^= Sex.GetHashCode();
      if (HasHeadIconURI) hash ^= HeadIconURI.GetHashCode();
      if (HasIp) hash ^= Ip.GetHashCode();
      if (HasLocation) hash ^= Location.GetHashCode();
      if (HasDfHands) hash ^= DfHands.GetHashCode();
      if (HasDiamond) hash ^= Diamond.GetHashCode();
      if (HasCharm) hash ^= Charm.GetHashCode();
      if (HasAvatarID) hash ^= AvatarID.GetHashCode();
      hash ^= clubIDs_.GetHashCode();
      if (HasDan) hash ^= Dan.GetHashCode();
      if (HasIsLooker) hash ^= IsLooker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasUserID) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      if (HasChairID) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairID);
      }
      if (HasState) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasNick) {
        output.WriteRawTag(42);
        output.WriteString(Nick);
      }
      if (HasSex) {
        output.WriteRawTag(48);
        output.WriteUInt32(Sex);
      }
      if (HasHeadIconURI) {
        output.WriteRawTag(58);
        output.WriteString(HeadIconURI);
      }
      if (HasIp) {
        output.WriteRawTag(66);
        output.WriteString(Ip);
      }
      if (HasLocation) {
        output.WriteRawTag(74);
        output.WriteString(Location);
      }
      if (HasDfHands) {
        output.WriteRawTag(80);
        output.WriteInt32(DfHands);
      }
      if (HasDiamond) {
        output.WriteRawTag(88);
        output.WriteInt32(Diamond);
      }
      if (HasCharm) {
        output.WriteRawTag(96);
        output.WriteInt32(Charm);
      }
      if (HasAvatarID) {
        output.WriteRawTag(104);
        output.WriteInt32(AvatarID);
      }
      clubIDs_.WriteTo(output, _repeated_clubIDs_codec);
      if (HasDan) {
        output.WriteRawTag(120);
        output.WriteInt32(Dan);
      }
      if (HasIsLooker) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsLooker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUserID) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (HasChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairID);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasNick) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (HasSex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sex);
      }
      if (HasHeadIconURI) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIconURI);
      }
      if (HasIp) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (HasLocation) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (HasDfHands) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DfHands);
      }
      if (HasDiamond) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (HasCharm) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Charm);
      }
      if (HasAvatarID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvatarID);
      }
      size += clubIDs_.CalculateSize(_repeated_clubIDs_codec);
      if (HasDan) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dan);
      }
      if (HasIsLooker) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasUserID) {
        UserID = other.UserID;
      }
      if (other.HasChairID) {
        ChairID = other.ChairID;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasNick) {
        Nick = other.Nick;
      }
      if (other.HasSex) {
        Sex = other.Sex;
      }
      if (other.HasHeadIconURI) {
        HeadIconURI = other.HeadIconURI;
      }
      if (other.HasIp) {
        Ip = other.Ip;
      }
      if (other.HasLocation) {
        Location = other.Location;
      }
      if (other.HasDfHands) {
        DfHands = other.DfHands;
      }
      if (other.HasDiamond) {
        Diamond = other.Diamond;
      }
      if (other.HasCharm) {
        Charm = other.Charm;
      }
      if (other.HasAvatarID) {
        AvatarID = other.AvatarID;
      }
      clubIDs_.Add(other.clubIDs_);
      if (other.HasDan) {
        Dan = other.Dan;
      }
      if (other.HasIsLooker) {
        IsLooker = other.IsLooker;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 16: {
            ChairID = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Nick = input.ReadString();
            break;
          }
          case 48: {
            Sex = input.ReadUInt32();
            break;
          }
          case 58: {
            HeadIconURI = input.ReadString();
            break;
          }
          case 66: {
            Ip = input.ReadString();
            break;
          }
          case 74: {
            Location = input.ReadString();
            break;
          }
          case 80: {
            DfHands = input.ReadInt32();
            break;
          }
          case 88: {
            Diamond = input.ReadInt32();
            break;
          }
          case 96: {
            Charm = input.ReadInt32();
            break;
          }
          case 104: {
            AvatarID = input.ReadInt32();
            break;
          }
          case 114: {
            clubIDs_.AddEntriesFrom(input, _repeated_clubIDs_codec);
            break;
          }
          case 120: {
            Dan = input.ReadInt32();
            break;
          }
          case 128: {
            IsLooker = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 每个玩家一手牌得分记录
  /// </summary>
  public sealed partial class PlayerHandScoreRecord : pb::IMessage<PlayerHandScoreRecord> {
    private static readonly pb::MessageParser<PlayerHandScoreRecord> _parser = new pb::MessageParser<PlayerHandScoreRecord>(() => new PlayerHandScoreRecord());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerHandScoreRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHandScoreRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHandScoreRecord(PlayerHandScoreRecord other) : this() {
      _hasBits0 = other._hasBits0;
      userID_ = other.userID_;
      winType_ = other.winType_;
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHandScoreRecord Clone() {
      return new PlayerHandScoreRecord(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private readonly static string UserIDDefaultValue = "";

    private string userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_ ?? UserIDDefaultValue; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "userID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUserID {
      get { return userID_ != null; }
    }
    /// <summary>Clears the value of the "userID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserID() {
      userID_ = null;
    }

    /// <summary>Field number for the "winType" field.</summary>
    public const int WinTypeFieldNumber = 2;
    private readonly static int WinTypeDefaultValue = 0;

    private int winType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinType {
      get { if ((_hasBits0 & 1) != 0) { return winType_; } else { return WinTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        winType_ = value;
      }
    }
    /// <summary>Gets whether the "winType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWinType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "winType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWinType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private readonly static int ScoreDefaultValue = 0;

    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { if ((_hasBits0 & 2) != 0) { return score_; } else { return ScoreDefaultValue; } }
      set {
        _hasBits0 |= 2;
        score_ = value;
      }
    }
    /// <summary>Gets whether the "score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScore {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScore() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerHandScoreRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerHandScoreRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (WinType != other.WinType) return false;
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUserID) hash ^= UserID.GetHashCode();
      if (HasWinType) hash ^= WinType.GetHashCode();
      if (HasScore) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasUserID) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      if (HasWinType) {
        output.WriteRawTag(16);
        output.WriteInt32(WinType);
      }
      if (HasScore) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUserID) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (HasWinType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinType);
      }
      if (HasScore) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerHandScoreRecord other) {
      if (other == null) {
        return;
      }
      if (other.HasUserID) {
        UserID = other.UserID;
      }
      if (other.HasWinType) {
        WinType = other.WinType;
      }
      if (other.HasScore) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 16: {
            WinType = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间的牌局一手牌得分记录
  /// </summary>
  public sealed partial class MsgTableHandScoreRecord : pb::IMessage<MsgTableHandScoreRecord> {
    private static readonly pb::MessageParser<MsgTableHandScoreRecord> _parser = new pb::MessageParser<MsgTableHandScoreRecord>(() => new MsgTableHandScoreRecord());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgTableHandScoreRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTableHandScoreRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTableHandScoreRecord(MsgTableHandScoreRecord other) : this() {
      _hasBits0 = other._hasBits0;
      endType_ = other.endType_;
      handIndex_ = other.handIndex_;
      playerRecords_ = other.playerRecords_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTableHandScoreRecord Clone() {
      return new MsgTableHandScoreRecord(this);
    }

    /// <summary>Field number for the "endType" field.</summary>
    public const int EndTypeFieldNumber = 1;
    private readonly static int EndTypeDefaultValue = 0;

    private int endType_;
    /// <summary>
    /// 手牌结束类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndType {
      get { if ((_hasBits0 & 1) != 0) { return endType_; } else { return EndTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        endType_ = value;
      }
    }
    /// <summary>Gets whether the "endType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "endType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "handIndex" field.</summary>
    public const int HandIndexFieldNumber = 2;
    private readonly static int HandIndexDefaultValue = 0;

    private int handIndex_;
    /// <summary>
    /// 第几手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandIndex {
      get { if ((_hasBits0 & 2) != 0) { return handIndex_; } else { return HandIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        handIndex_ = value;
      }
    }
    /// <summary>Gets whether the "handIndex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHandIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "handIndex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHandIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "playerRecords" field.</summary>
    public const int PlayerRecordsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xproto.PlayerHandScoreRecord> _repeated_playerRecords_codec
        = pb::FieldCodec.ForMessage(26, global::Xproto.PlayerHandScoreRecord.Parser);
    private readonly pbc::RepeatedField<global::Xproto.PlayerHandScoreRecord> playerRecords_ = new pbc::RepeatedField<global::Xproto.PlayerHandScoreRecord>();
    /// <summary>
    /// 本手牌每个玩家的得分情况
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xproto.PlayerHandScoreRecord> PlayerRecords {
      get { return playerRecords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgTableHandScoreRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgTableHandScoreRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndType != other.EndType) return false;
      if (HandIndex != other.HandIndex) return false;
      if(!playerRecords_.Equals(other.playerRecords_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEndType) hash ^= EndType.GetHashCode();
      if (HasHandIndex) hash ^= HandIndex.GetHashCode();
      hash ^= playerRecords_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasEndType) {
        output.WriteRawTag(8);
        output.WriteInt32(EndType);
      }
      if (HasHandIndex) {
        output.WriteRawTag(16);
        output.WriteInt32(HandIndex);
      }
      playerRecords_.WriteTo(output, _repeated_playerRecords_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEndType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndType);
      }
      if (HasHandIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandIndex);
      }
      size += playerRecords_.CalculateSize(_repeated_playerRecords_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgTableHandScoreRecord other) {
      if (other == null) {
        return;
      }
      if (other.HasEndType) {
        EndType = other.EndType;
      }
      if (other.HasHandIndex) {
        HandIndex = other.HandIndex;
      }
      playerRecords_.Add(other.playerRecords_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EndType = input.ReadInt32();
            break;
          }
          case 16: {
            HandIndex = input.ReadInt32();
            break;
          }
          case 26: {
            playerRecords_.AddEntriesFrom(input, _repeated_playerRecords_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间信息，用于各种状态更新
  /// </summary>
  public sealed partial class MsgTableInfo : pb::IMessage<MsgTableInfo> {
    private static readonly pb::MessageParser<MsgTableInfo> _parser = new pb::MessageParser<MsgTableInfo>(() => new MsgTableInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgTableInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTableInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTableInfo(MsgTableInfo other) : this() {
      _hasBits0 = other._hasBits0;
      state_ = other.state_;
      players_ = other.players_.Clone();
      ownerID_ = other.ownerID_;
      tableNumber_ = other.tableNumber_;
      handStartted_ = other.handStartted_;
      scoreRecords_ = other.scoreRecords_.Clone();
      handFinished_ = other.handFinished_;
      timeout_ = other.timeout_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTableInfo Clone() {
      return new MsgTableInfo(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private readonly static int StateDefaultValue = 0;

    private int state_;
    /// <summary>
    /// 见TableState
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xproto.MsgPlayerInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(18, global::Xproto.MsgPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Xproto.MsgPlayerInfo> players_ = new pbc::RepeatedField<global::Xproto.MsgPlayerInfo>();
    /// <summary>
    /// 其他玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xproto.MsgPlayerInfo> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "ownerID" field.</summary>
    public const int OwnerIDFieldNumber = 3;
    private readonly static string OwnerIDDefaultValue = "";

    private string ownerID_;
    /// <summary>
    /// 房间拥有者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerID {
      get { return ownerID_ ?? OwnerIDDefaultValue; }
      set {
        ownerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ownerID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwnerID {
      get { return ownerID_ != null; }
    }
    /// <summary>Clears the value of the "ownerID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwnerID() {
      ownerID_ = null;
    }

    /// <summary>Field number for the "tableNumber" field.</summary>
    public const int TableNumberFieldNumber = 4;
    private readonly static string TableNumberDefaultValue = "";

    private string tableNumber_;
    /// <summary>
    /// 房间号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableNumber {
      get { return tableNumber_ ?? TableNumberDefaultValue; }
      set {
        tableNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tableNumber" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTableNumber {
      get { return tableNumber_ != null; }
    }
    /// <summary>Clears the value of the "tableNumber" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTableNumber() {
      tableNumber_ = null;
    }

    /// <summary>Field number for the "handStartted" field.</summary>
    public const int HandStarttedFieldNumber = 5;
    private readonly static int HandStarttedDefaultValue = 0;

    private int handStartted_;
    /// <summary>
    /// 已经开始了多少手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandStartted {
      get { if ((_hasBits0 & 2) != 0) { return handStartted_; } else { return HandStarttedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        handStartted_ = value;
      }
    }
    /// <summary>Gets whether the "handStartted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHandStartted {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "handStartted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHandStartted() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "scoreRecords" field.</summary>
    public const int ScoreRecordsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Xproto.MsgTableHandScoreRecord> _repeated_scoreRecords_codec
        = pb::FieldCodec.ForMessage(50, global::Xproto.MsgTableHandScoreRecord.Parser);
    private readonly pbc::RepeatedField<global::Xproto.MsgTableHandScoreRecord> scoreRecords_ = new pbc::RepeatedField<global::Xproto.MsgTableHandScoreRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xproto.MsgTableHandScoreRecord> ScoreRecords {
      get { return scoreRecords_; }
    }

    /// <summary>Field number for the "handFinished" field.</summary>
    public const int HandFinishedFieldNumber = 7;
    private readonly static int HandFinishedDefaultValue = 0;

    private int handFinished_;
    /// <summary>
    /// 已经完成了多少手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandFinished {
      get { if ((_hasBits0 & 4) != 0) { return handFinished_; } else { return HandFinishedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        handFinished_ = value;
      }
    }
    /// <summary>Gets whether the "handFinished" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHandFinished {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "handFinished" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHandFinished() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 8;
    private readonly static int TimeoutDefaultValue = 0;

    private int timeout_;
    /// <summary>
    /// 倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timeout {
      get { if ((_hasBits0 & 8) != 0) { return timeout_; } else { return TimeoutDefaultValue; } }
      set {
        _hasBits0 |= 8;
        timeout_ = value;
      }
    }
    /// <summary>Gets whether the "timeout" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeout {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "timeout" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeout() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgTableInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgTableInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if(!players_.Equals(other.players_)) return false;
      if (OwnerID != other.OwnerID) return false;
      if (TableNumber != other.TableNumber) return false;
      if (HandStartted != other.HandStartted) return false;
      if(!scoreRecords_.Equals(other.scoreRecords_)) return false;
      if (HandFinished != other.HandFinished) return false;
      if (Timeout != other.Timeout) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasState) hash ^= State.GetHashCode();
      hash ^= players_.GetHashCode();
      if (HasOwnerID) hash ^= OwnerID.GetHashCode();
      if (HasTableNumber) hash ^= TableNumber.GetHashCode();
      if (HasHandStartted) hash ^= HandStartted.GetHashCode();
      hash ^= scoreRecords_.GetHashCode();
      if (HasHandFinished) hash ^= HandFinished.GetHashCode();
      if (HasTimeout) hash ^= Timeout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasState) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (HasOwnerID) {
        output.WriteRawTag(26);
        output.WriteString(OwnerID);
      }
      if (HasTableNumber) {
        output.WriteRawTag(34);
        output.WriteString(TableNumber);
      }
      if (HasHandStartted) {
        output.WriteRawTag(40);
        output.WriteInt32(HandStartted);
      }
      scoreRecords_.WriteTo(output, _repeated_scoreRecords_codec);
      if (HasHandFinished) {
        output.WriteRawTag(56);
        output.WriteInt32(HandFinished);
      }
      if (HasTimeout) {
        output.WriteRawTag(64);
        output.WriteInt32(Timeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (HasOwnerID) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerID);
      }
      if (HasTableNumber) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableNumber);
      }
      if (HasHandStartted) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandStartted);
      }
      size += scoreRecords_.CalculateSize(_repeated_scoreRecords_codec);
      if (HasHandFinished) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandFinished);
      }
      if (HasTimeout) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timeout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgTableInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasState) {
        State = other.State;
      }
      players_.Add(other.players_);
      if (other.HasOwnerID) {
        OwnerID = other.OwnerID;
      }
      if (other.HasTableNumber) {
        TableNumber = other.TableNumber;
      }
      if (other.HasHandStartted) {
        HandStartted = other.HandStartted;
      }
      scoreRecords_.Add(other.scoreRecords_);
      if (other.HasHandFinished) {
        HandFinished = other.HandFinished;
      }
      if (other.HasTimeout) {
        Timeout = other.Timeout;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 26: {
            OwnerID = input.ReadString();
            break;
          }
          case 34: {
            TableNumber = input.ReadString();
            break;
          }
          case 40: {
            HandStartted = input.ReadInt32();
            break;
          }
          case 50: {
            scoreRecords_.AddEntriesFrom(input, _repeated_scoreRecords_codec);
            break;
          }
          case 56: {
            HandFinished = input.ReadInt32();
            break;
          }
          case 64: {
            Timeout = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间分数记录
  /// </summary>
  public sealed partial class TableScoreRecords : pb::IMessage<TableScoreRecords> {
    private static readonly pb::MessageParser<TableScoreRecords> _parser = new pb::MessageParser<TableScoreRecords>(() => new TableScoreRecords());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableScoreRecords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableScoreRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableScoreRecords(TableScoreRecords other) : this() {
      scoreRecords_ = other.scoreRecords_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableScoreRecords Clone() {
      return new TableScoreRecords(this);
    }

    /// <summary>Field number for the "scoreRecords" field.</summary>
    public const int ScoreRecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xproto.MsgTableHandScoreRecord> _repeated_scoreRecords_codec
        = pb::FieldCodec.ForMessage(10, global::Xproto.MsgTableHandScoreRecord.Parser);
    private readonly pbc::RepeatedField<global::Xproto.MsgTableHandScoreRecord> scoreRecords_ = new pbc::RepeatedField<global::Xproto.MsgTableHandScoreRecord>();
    /// <summary>
    /// 每一手牌一个记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xproto.MsgTableHandScoreRecord> ScoreRecords {
      get { return scoreRecords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableScoreRecords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableScoreRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!scoreRecords_.Equals(other.scoreRecords_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= scoreRecords_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      scoreRecords_.WriteTo(output, _repeated_scoreRecords_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += scoreRecords_.CalculateSize(_repeated_scoreRecords_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableScoreRecords other) {
      if (other == null) {
        return;
      }
      scoreRecords_.Add(other.scoreRecords_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            scoreRecords_.AddEntriesFrom(input, _repeated_scoreRecords_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端发送给服务器
  /// 回复解散请求
  /// </summary>
  public sealed partial class MsgDisbandAnswer : pb::IMessage<MsgDisbandAnswer> {
    private static readonly pb::MessageParser<MsgDisbandAnswer> _parser = new pb::MessageParser<MsgDisbandAnswer>(() => new MsgDisbandAnswer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgDisbandAnswer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgDisbandAnswer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgDisbandAnswer(MsgDisbandAnswer other) : this() {
      _hasBits0 = other._hasBits0;
      agree_ = other.agree_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgDisbandAnswer Clone() {
      return new MsgDisbandAnswer(this);
    }

    /// <summary>Field number for the "agree" field.</summary>
    public const int AgreeFieldNumber = 1;
    private readonly static bool AgreeDefaultValue = false;

    private bool agree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Agree {
      get { if ((_hasBits0 & 1) != 0) { return agree_; } else { return AgreeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        agree_ = value;
      }
    }
    /// <summary>Gets whether the "agree" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAgree {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "agree" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAgree() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgDisbandAnswer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgDisbandAnswer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Agree != other.Agree) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAgree) hash ^= Agree.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAgree) {
        output.WriteRawTag(8);
        output.WriteBool(Agree);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAgree) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgDisbandAnswer other) {
      if (other == null) {
        return;
      }
      if (other.HasAgree) {
        Agree = other.Agree;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Agree = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器通知客户端解散请求的执行情况
  /// </summary>
  public sealed partial class MsgDisbandNotify : pb::IMessage<MsgDisbandNotify> {
    private static readonly pb::MessageParser<MsgDisbandNotify> _parser = new pb::MessageParser<MsgDisbandNotify>(() => new MsgDisbandNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgDisbandNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgDisbandNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgDisbandNotify(MsgDisbandNotify other) : this() {
      _hasBits0 = other._hasBits0;
      disbandState_ = other.disbandState_;
      applicant_ = other.applicant_;
      waits_ = other.waits_.Clone();
      agrees_ = other.agrees_.Clone();
      rejects_ = other.rejects_.Clone();
      countdown_ = other.countdown_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgDisbandNotify Clone() {
      return new MsgDisbandNotify(this);
    }

    /// <summary>Field number for the "disbandState" field.</summary>
    public const int DisbandStateFieldNumber = 1;
    private readonly static int DisbandStateDefaultValue = 0;

    private int disbandState_;
    /// <summary>
    /// 解散请求的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisbandState {
      get { if ((_hasBits0 & 1) != 0) { return disbandState_; } else { return DisbandStateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        disbandState_ = value;
      }
    }
    /// <summary>Gets whether the "disbandState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDisbandState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "disbandState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDisbandState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "applicant" field.</summary>
    public const int ApplicantFieldNumber = 2;
    private readonly static int ApplicantDefaultValue = 0;

    private int applicant_;
    /// <summary>
    /// 谁发起解散请求，座位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Applicant {
      get { if ((_hasBits0 & 2) != 0) { return applicant_; } else { return ApplicantDefaultValue; } }
      set {
        _hasBits0 |= 2;
        applicant_ = value;
      }
    }
    /// <summary>Gets whether the "applicant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasApplicant {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "applicant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearApplicant() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "waits" field.</summary>
    public const int WaitsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_waits_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> waits_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 正在等待谁，座位列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Waits {
      get { return waits_; }
    }

    /// <summary>Field number for the "agrees" field.</summary>
    public const int AgreesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_agrees_codec
        = pb::FieldCodec.ForInt32(32);
    private readonly pbc::RepeatedField<int> agrees_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 谁已经同意，座位列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Agrees {
      get { return agrees_; }
    }

    /// <summary>Field number for the "rejects" field.</summary>
    public const int RejectsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_rejects_codec
        = pb::FieldCodec.ForInt32(40);
    private readonly pbc::RepeatedField<int> rejects_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 谁已经拒绝,座位列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Rejects {
      get { return rejects_; }
    }

    /// <summary>Field number for the "countdown" field.</summary>
    public const int CountdownFieldNumber = 6;
    private readonly static int CountdownDefaultValue = 0;

    private int countdown_;
    /// <summary>
    /// 剩余倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Countdown {
      get { if ((_hasBits0 & 4) != 0) { return countdown_; } else { return CountdownDefaultValue; } }
      set {
        _hasBits0 |= 4;
        countdown_ = value;
      }
    }
    /// <summary>Gets whether the "countdown" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCountdown {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "countdown" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCountdown() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgDisbandNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgDisbandNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DisbandState != other.DisbandState) return false;
      if (Applicant != other.Applicant) return false;
      if(!waits_.Equals(other.waits_)) return false;
      if(!agrees_.Equals(other.agrees_)) return false;
      if(!rejects_.Equals(other.rejects_)) return false;
      if (Countdown != other.Countdown) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDisbandState) hash ^= DisbandState.GetHashCode();
      if (HasApplicant) hash ^= Applicant.GetHashCode();
      hash ^= waits_.GetHashCode();
      hash ^= agrees_.GetHashCode();
      hash ^= rejects_.GetHashCode();
      if (HasCountdown) hash ^= Countdown.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasDisbandState) {
        output.WriteRawTag(8);
        output.WriteInt32(DisbandState);
      }
      if (HasApplicant) {
        output.WriteRawTag(16);
        output.WriteInt32(Applicant);
      }
      waits_.WriteTo(output, _repeated_waits_codec);
      agrees_.WriteTo(output, _repeated_agrees_codec);
      rejects_.WriteTo(output, _repeated_rejects_codec);
      if (HasCountdown) {
        output.WriteRawTag(48);
        output.WriteInt32(Countdown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDisbandState) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisbandState);
      }
      if (HasApplicant) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Applicant);
      }
      size += waits_.CalculateSize(_repeated_waits_codec);
      size += agrees_.CalculateSize(_repeated_agrees_codec);
      size += rejects_.CalculateSize(_repeated_rejects_codec);
      if (HasCountdown) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Countdown);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgDisbandNotify other) {
      if (other == null) {
        return;
      }
      if (other.HasDisbandState) {
        DisbandState = other.DisbandState;
      }
      if (other.HasApplicant) {
        Applicant = other.Applicant;
      }
      waits_.Add(other.waits_);
      agrees_.Add(other.agrees_);
      rejects_.Add(other.rejects_);
      if (other.HasCountdown) {
        Countdown = other.Countdown;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DisbandState = input.ReadInt32();
            break;
          }
          case 16: {
            Applicant = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            waits_.AddEntriesFrom(input, _repeated_waits_codec);
            break;
          }
          case 34:
          case 32: {
            agrees_.AddEntriesFrom(input, _repeated_agrees_codec);
            break;
          }
          case 42:
          case 40: {
            rejects_.AddEntriesFrom(input, _repeated_rejects_codec);
            break;
          }
          case 48: {
            Countdown = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 游戏结束每个玩家的统计信息
  /// </summary>
  public sealed partial class MsgGameOverPlayerStat : pb::IMessage<MsgGameOverPlayerStat> {
    private static readonly pb::MessageParser<MsgGameOverPlayerStat> _parser = new pb::MessageParser<MsgGameOverPlayerStat>(() => new MsgGameOverPlayerStat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgGameOverPlayerStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGameOverPlayerStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGameOverPlayerStat(MsgGameOverPlayerStat other) : this() {
      _hasBits0 = other._hasBits0;
      chairID_ = other.chairID_;
      score_ = other.score_;
      winChuckCounter_ = other.winChuckCounter_;
      winSelfDrawnCounter_ = other.winSelfDrawnCounter_;
      chuckerCounter_ = other.chuckerCounter_;
      robKongCounter_ = other.robKongCounter_;
      kongerCounter_ = other.kongerCounter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGameOverPlayerStat Clone() {
      return new MsgGameOverPlayerStat(this);
    }

    /// <summary>Field number for the "chairID" field.</summary>
    public const int ChairIDFieldNumber = 1;
    private readonly static int ChairIDDefaultValue = 0;

    private int chairID_;
    /// <summary>
    /// 玩家的座位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairID {
      get { if ((_hasBits0 & 1) != 0) { return chairID_; } else { return ChairIDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        chairID_ = value;
      }
    }
    /// <summary>Gets whether the "chairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChairID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "chairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChairID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private readonly static int ScoreDefaultValue = 0;

    private int score_;
    /// <summary>
    /// 玩家总得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { if ((_hasBits0 & 2) != 0) { return score_; } else { return ScoreDefaultValue; } }
      set {
        _hasBits0 |= 2;
        score_ = value;
      }
    }
    /// <summary>Gets whether the "score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScore {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScore() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "winChuckCounter" field.</summary>
    public const int WinChuckCounterFieldNumber = 3;
    private readonly static int WinChuckCounterDefaultValue = 0;

    private int winChuckCounter_;
    /// <summary>
    /// 玩家吃铳（接炮）胡牌次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinChuckCounter {
      get { if ((_hasBits0 & 4) != 0) { return winChuckCounter_; } else { return WinChuckCounterDefaultValue; } }
      set {
        _hasBits0 |= 4;
        winChuckCounter_ = value;
      }
    }
    /// <summary>Gets whether the "winChuckCounter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWinChuckCounter {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "winChuckCounter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWinChuckCounter() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "winSelfDrawnCounter" field.</summary>
    public const int WinSelfDrawnCounterFieldNumber = 4;
    private readonly static int WinSelfDrawnCounterDefaultValue = 0;

    private int winSelfDrawnCounter_;
    /// <summary>
    /// 玩家自摸胡牌次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinSelfDrawnCounter {
      get { if ((_hasBits0 & 8) != 0) { return winSelfDrawnCounter_; } else { return WinSelfDrawnCounterDefaultValue; } }
      set {
        _hasBits0 |= 8;
        winSelfDrawnCounter_ = value;
      }
    }
    /// <summary>Gets whether the "winSelfDrawnCounter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWinSelfDrawnCounter {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "winSelfDrawnCounter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWinSelfDrawnCounter() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "chuckerCounter" field.</summary>
    public const int ChuckerCounterFieldNumber = 5;
    private readonly static int ChuckerCounterDefaultValue = 0;

    private int chuckerCounter_;
    /// <summary>
    /// 玩家放炮输牌次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChuckerCounter {
      get { if ((_hasBits0 & 16) != 0) { return chuckerCounter_; } else { return ChuckerCounterDefaultValue; } }
      set {
        _hasBits0 |= 16;
        chuckerCounter_ = value;
      }
    }
    /// <summary>Gets whether the "chuckerCounter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChuckerCounter {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "chuckerCounter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChuckerCounter() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "robKongCounter" field.</summary>
    public const int RobKongCounterFieldNumber = 6;
    private readonly static int RobKongCounterDefaultValue = 0;

    private int robKongCounter_;
    /// <summary>
    /// 抢杠胡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RobKongCounter {
      get { if ((_hasBits0 & 32) != 0) { return robKongCounter_; } else { return RobKongCounterDefaultValue; } }
      set {
        _hasBits0 |= 32;
        robKongCounter_ = value;
      }
    }
    /// <summary>Gets whether the "robKongCounter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRobKongCounter {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "robKongCounter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRobKongCounter() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "kongerCounter" field.</summary>
    public const int KongerCounterFieldNumber = 7;
    private readonly static int KongerCounterDefaultValue = 0;

    private int kongerCounter_;
    /// <summary>
    /// 被抢杠胡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KongerCounter {
      get { if ((_hasBits0 & 64) != 0) { return kongerCounter_; } else { return KongerCounterDefaultValue; } }
      set {
        _hasBits0 |= 64;
        kongerCounter_ = value;
      }
    }
    /// <summary>Gets whether the "kongerCounter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKongerCounter {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "kongerCounter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKongerCounter() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgGameOverPlayerStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgGameOverPlayerStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairID != other.ChairID) return false;
      if (Score != other.Score) return false;
      if (WinChuckCounter != other.WinChuckCounter) return false;
      if (WinSelfDrawnCounter != other.WinSelfDrawnCounter) return false;
      if (ChuckerCounter != other.ChuckerCounter) return false;
      if (RobKongCounter != other.RobKongCounter) return false;
      if (KongerCounter != other.KongerCounter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChairID) hash ^= ChairID.GetHashCode();
      if (HasScore) hash ^= Score.GetHashCode();
      if (HasWinChuckCounter) hash ^= WinChuckCounter.GetHashCode();
      if (HasWinSelfDrawnCounter) hash ^= WinSelfDrawnCounter.GetHashCode();
      if (HasChuckerCounter) hash ^= ChuckerCounter.GetHashCode();
      if (HasRobKongCounter) hash ^= RobKongCounter.GetHashCode();
      if (HasKongerCounter) hash ^= KongerCounter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasChairID) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairID);
      }
      if (HasScore) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
      if (HasWinChuckCounter) {
        output.WriteRawTag(24);
        output.WriteInt32(WinChuckCounter);
      }
      if (HasWinSelfDrawnCounter) {
        output.WriteRawTag(32);
        output.WriteInt32(WinSelfDrawnCounter);
      }
      if (HasChuckerCounter) {
        output.WriteRawTag(40);
        output.WriteInt32(ChuckerCounter);
      }
      if (HasRobKongCounter) {
        output.WriteRawTag(48);
        output.WriteInt32(RobKongCounter);
      }
      if (HasKongerCounter) {
        output.WriteRawTag(56);
        output.WriteInt32(KongerCounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairID);
      }
      if (HasScore) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (HasWinChuckCounter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinChuckCounter);
      }
      if (HasWinSelfDrawnCounter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinSelfDrawnCounter);
      }
      if (HasChuckerCounter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChuckerCounter);
      }
      if (HasRobKongCounter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RobKongCounter);
      }
      if (HasKongerCounter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KongerCounter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgGameOverPlayerStat other) {
      if (other == null) {
        return;
      }
      if (other.HasChairID) {
        ChairID = other.ChairID;
      }
      if (other.HasScore) {
        Score = other.Score;
      }
      if (other.HasWinChuckCounter) {
        WinChuckCounter = other.WinChuckCounter;
      }
      if (other.HasWinSelfDrawnCounter) {
        WinSelfDrawnCounter = other.WinSelfDrawnCounter;
      }
      if (other.HasChuckerCounter) {
        ChuckerCounter = other.ChuckerCounter;
      }
      if (other.HasRobKongCounter) {
        RobKongCounter = other.RobKongCounter;
      }
      if (other.HasKongerCounter) {
        KongerCounter = other.KongerCounter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairID = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
          case 24: {
            WinChuckCounter = input.ReadInt32();
            break;
          }
          case 32: {
            WinSelfDrawnCounter = input.ReadInt32();
            break;
          }
          case 40: {
            ChuckerCounter = input.ReadInt32();
            break;
          }
          case 48: {
            RobKongCounter = input.ReadInt32();
            break;
          }
          case 56: {
            KongerCounter = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 游戏结束通知，服务器下发给所有玩家
  /// </summary>
  public sealed partial class MsgGameOver : pb::IMessage<MsgGameOver> {
    private static readonly pb::MessageParser<MsgGameOver> _parser = new pb::MessageParser<MsgGameOver>(() => new MsgGameOver());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgGameOver> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGameOver() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGameOver(MsgGameOver other) : this() {
      playerStats_ = other.playerStats_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGameOver Clone() {
      return new MsgGameOver(this);
    }

    /// <summary>Field number for the "playerStats" field.</summary>
    public const int PlayerStatsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xproto.MsgGameOverPlayerStat> _repeated_playerStats_codec
        = pb::FieldCodec.ForMessage(10, global::Xproto.MsgGameOverPlayerStat.Parser);
    private readonly pbc::RepeatedField<global::Xproto.MsgGameOverPlayerStat> playerStats_ = new pbc::RepeatedField<global::Xproto.MsgGameOverPlayerStat>();
    /// <summary>
    /// 玩家统计信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xproto.MsgGameOverPlayerStat> PlayerStats {
      get { return playerStats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgGameOver);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgGameOver other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerStats_.Equals(other.playerStats_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerStats_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerStats_.WriteTo(output, _repeated_playerStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerStats_.CalculateSize(_repeated_playerStats_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgGameOver other) {
      if (other == null) {
        return;
      }
      playerStats_.Add(other.playerStats_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerStats_.AddEntriesFrom(input, _repeated_playerStats_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 对应OPTableShowTips，主要是monkey房间使用
  /// </summary>
  public sealed partial class MsgTableShowTips : pb::IMessage<MsgTableShowTips> {
    private static readonly pb::MessageParser<MsgTableShowTips> _parser = new pb::MessageParser<MsgTableShowTips>(() => new MsgTableShowTips());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgTableShowTips> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTableShowTips() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTableShowTips(MsgTableShowTips other) : this() {
      _hasBits0 = other._hasBits0;
      tips_ = other.tips_;
      tipCode_ = other.tipCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTableShowTips Clone() {
      return new MsgTableShowTips(this);
    }

    /// <summary>Field number for the "tips" field.</summary>
    public const int TipsFieldNumber = 1;
    private readonly static string TipsDefaultValue = "";

    private string tips_;
    /// <summary>
    /// 需要显示的提示文字信息，ut8编码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tips {
      get { return tips_ ?? TipsDefaultValue; }
      set {
        tips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTips {
      get { return tips_ != null; }
    }
    /// <summary>Clears the value of the "tips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTips() {
      tips_ = null;
    }

    /// <summary>Field number for the "tipCode" field.</summary>
    public const int TipCodeFieldNumber = 2;
    private readonly static int TipCodeDefaultValue = 0;

    private int tipCode_;
    /// <summary>
    /// 如果tipcode为0，则使用tips，否则使用tipCode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TipCode {
      get { if ((_hasBits0 & 1) != 0) { return tipCode_; } else { return TipCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tipCode_ = value;
      }
    }
    /// <summary>Gets whether the "tipCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTipCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tipCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTipCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgTableShowTips);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgTableShowTips other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tips != other.Tips) return false;
      if (TipCode != other.TipCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTips) hash ^= Tips.GetHashCode();
      if (HasTipCode) hash ^= TipCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTips) {
        output.WriteRawTag(10);
        output.WriteString(Tips);
      }
      if (HasTipCode) {
        output.WriteRawTag(16);
        output.WriteInt32(TipCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTips) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tips);
      }
      if (HasTipCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TipCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgTableShowTips other) {
      if (other == null) {
        return;
      }
      if (other.HasTips) {
        Tips = other.Tips;
      }
      if (other.HasTipCode) {
        TipCode = other.TipCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tips = input.ReadString();
            break;
          }
          case 16: {
            TipCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间删除通知
  /// </summary>
  public sealed partial class MsgTableDelete : pb::IMessage<MsgTableDelete> {
    private static readonly pb::MessageParser<MsgTableDelete> _parser = new pb::MessageParser<MsgTableDelete>(() => new MsgTableDelete());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgTableDelete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTableDelete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTableDelete(MsgTableDelete other) : this() {
      _hasBits0 = other._hasBits0;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTableDelete Clone() {
      return new MsgTableDelete(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private readonly static int ReasonDefaultValue = 0;

    private int reason_;
    /// <summary>
    /// 删除原因 TableDeleteReason
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reason {
      get { if ((_hasBits0 & 1) != 0) { return reason_; } else { return ReasonDefaultValue; } }
      set {
        _hasBits0 |= 1;
        reason_ = value;
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgTableDelete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgTableDelete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReason) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasReason) {
        output.WriteRawTag(8);
        output.WriteInt32(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgTableDelete other) {
      if (other == null) {
        return;
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Reason = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房主请求服务器踢开某个玩家
  /// </summary>
  public sealed partial class MsgKickout : pb::IMessage<MsgKickout> {
    private static readonly pb::MessageParser<MsgKickout> _parser = new pb::MessageParser<MsgKickout>(() => new MsgKickout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgKickout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgKickout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgKickout(MsgKickout other) : this() {
      victimUserID_ = other.victimUserID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgKickout Clone() {
      return new MsgKickout(this);
    }

    /// <summary>Field number for the "victimUserID" field.</summary>
    public const int VictimUserIDFieldNumber = 1;
    private readonly static string VictimUserIDDefaultValue = "";

    private string victimUserID_;
    /// <summary>
    /// 受害者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VictimUserID {
      get { return victimUserID_ ?? VictimUserIDDefaultValue; }
      set {
        victimUserID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "victimUserID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVictimUserID {
      get { return victimUserID_ != null; }
    }
    /// <summary>Clears the value of the "victimUserID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVictimUserID() {
      victimUserID_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgKickout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgKickout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VictimUserID != other.VictimUserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVictimUserID) hash ^= VictimUserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasVictimUserID) {
        output.WriteRawTag(10);
        output.WriteString(VictimUserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVictimUserID) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VictimUserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgKickout other) {
      if (other == null) {
        return;
      }
      if (other.HasVictimUserID) {
        VictimUserID = other.VictimUserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VictimUserID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器回复
  /// </summary>
  public sealed partial class MsgKickoutResult : pb::IMessage<MsgKickoutResult> {
    private static readonly pb::MessageParser<MsgKickoutResult> _parser = new pb::MessageParser<MsgKickoutResult>(() => new MsgKickoutResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgKickoutResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgKickoutResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgKickoutResult(MsgKickoutResult other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      victimUserID_ = other.victimUserID_;
      victimNick_ = other.victimNick_;
      byWhoNick_ = other.byWhoNick_;
      byWhoUserID_ = other.byWhoUserID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgKickoutResult Clone() {
      return new MsgKickoutResult(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static int ResultDefaultValue = 0;

    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "victimUserID" field.</summary>
    public const int VictimUserIDFieldNumber = 2;
    private readonly static string VictimUserIDDefaultValue = "";

    private string victimUserID_;
    /// <summary>
    /// 被踢的玩家的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VictimUserID {
      get { return victimUserID_ ?? VictimUserIDDefaultValue; }
      set {
        victimUserID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "victimUserID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVictimUserID {
      get { return victimUserID_ != null; }
    }
    /// <summary>Clears the value of the "victimUserID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVictimUserID() {
      victimUserID_ = null;
    }

    /// <summary>Field number for the "victimNick" field.</summary>
    public const int VictimNickFieldNumber = 3;
    private readonly static string VictimNickDefaultValue = "";

    private string victimNick_;
    /// <summary>
    /// 被踢的玩家的昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VictimNick {
      get { return victimNick_ ?? VictimNickDefaultValue; }
      set {
        victimNick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "victimNick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVictimNick {
      get { return victimNick_ != null; }
    }
    /// <summary>Clears the value of the "victimNick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVictimNick() {
      victimNick_ = null;
    }

    /// <summary>Field number for the "byWhoNick" field.</summary>
    public const int ByWhoNickFieldNumber = 4;
    private readonly static string ByWhoNickDefaultValue = "";

    private string byWhoNick_;
    /// <summary>
    /// 房主昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ByWhoNick {
      get { return byWhoNick_ ?? ByWhoNickDefaultValue; }
      set {
        byWhoNick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "byWhoNick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasByWhoNick {
      get { return byWhoNick_ != null; }
    }
    /// <summary>Clears the value of the "byWhoNick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearByWhoNick() {
      byWhoNick_ = null;
    }

    /// <summary>Field number for the "byWhoUserID" field.</summary>
    public const int ByWhoUserIDFieldNumber = 5;
    private readonly static string ByWhoUserIDDefaultValue = "";

    private string byWhoUserID_;
    /// <summary>
    /// 房主ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ByWhoUserID {
      get { return byWhoUserID_ ?? ByWhoUserIDDefaultValue; }
      set {
        byWhoUserID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "byWhoUserID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasByWhoUserID {
      get { return byWhoUserID_ != null; }
    }
    /// <summary>Clears the value of the "byWhoUserID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearByWhoUserID() {
      byWhoUserID_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgKickoutResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgKickoutResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (VictimUserID != other.VictimUserID) return false;
      if (VictimNick != other.VictimNick) return false;
      if (ByWhoNick != other.ByWhoNick) return false;
      if (ByWhoUserID != other.ByWhoUserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      if (HasVictimUserID) hash ^= VictimUserID.GetHashCode();
      if (HasVictimNick) hash ^= VictimNick.GetHashCode();
      if (HasByWhoNick) hash ^= ByWhoNick.GetHashCode();
      if (HasByWhoUserID) hash ^= ByWhoUserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (HasVictimUserID) {
        output.WriteRawTag(18);
        output.WriteString(VictimUserID);
      }
      if (HasVictimNick) {
        output.WriteRawTag(26);
        output.WriteString(VictimNick);
      }
      if (HasByWhoNick) {
        output.WriteRawTag(34);
        output.WriteString(ByWhoNick);
      }
      if (HasByWhoUserID) {
        output.WriteRawTag(42);
        output.WriteString(ByWhoUserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (HasVictimUserID) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VictimUserID);
      }
      if (HasVictimNick) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VictimNick);
      }
      if (HasByWhoNick) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ByWhoNick);
      }
      if (HasByWhoUserID) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ByWhoUserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgKickoutResult other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasVictimUserID) {
        VictimUserID = other.VictimUserID;
      }
      if (other.HasVictimNick) {
        VictimNick = other.VictimNick;
      }
      if (other.HasByWhoNick) {
        ByWhoNick = other.ByWhoNick;
      }
      if (other.HasByWhoUserID) {
        ByWhoUserID = other.ByWhoUserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            VictimUserID = input.ReadString();
            break;
          }
          case 26: {
            VictimNick = input.ReadString();
            break;
          }
          case 34: {
            ByWhoNick = input.ReadString();
            break;
          }
          case 42: {
            ByWhoUserID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 进入房间回复
  /// 进入成功后，包括玩家本身以及其他玩家，均通过OPTableUpdate获得房间新状态和数据
  /// </summary>
  public sealed partial class MsgEnterTableResult : pb::IMessage<MsgEnterTableResult> {
    private static readonly pb::MessageParser<MsgEnterTableResult> _parser = new pb::MessageParser<MsgEnterTableResult>(() => new MsgEnterTableResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgEnterTableResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgEnterTableResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgEnterTableResult(MsgEnterTableResult other) : this() {
      _hasBits0 = other._hasBits0;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgEnterTableResult Clone() {
      return new MsgEnterTableResult(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private readonly static int StatusDefaultValue = 0;

    private int status_;
    /// <summary>
    /// 0表示成功，其他值表示失败的错误码，见EnterTableStatus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgEnterTableResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgEnterTableResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStatus) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasStatus) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgEnterTableResult other) {
      if (other == null) {
        return;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgDonate : pb::IMessage<MsgDonate> {
    private static readonly pb::MessageParser<MsgDonate> _parser = new pb::MessageParser<MsgDonate>(() => new MsgDonate());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgDonate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xproto.PokerExtReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgDonate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgDonate(MsgDonate other) : this() {
      _hasBits0 = other._hasBits0;
      toChairID_ = other.toChairID_;
      itemID_ = other.itemID_;
      fromChairID_ = other.fromChairID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgDonate Clone() {
      return new MsgDonate(this);
    }

    /// <summary>Field number for the "toChairID" field.</summary>
    public const int ToChairIDFieldNumber = 1;
    private readonly static int ToChairIDDefaultValue = 0;

    private int toChairID_;
    /// <summary>
    /// 送给谁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToChairID {
      get { if ((_hasBits0 & 1) != 0) { return toChairID_; } else { return ToChairIDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        toChairID_ = value;
      }
    }
    /// <summary>Gets whether the "toChairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToChairID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "toChairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToChairID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 2;
    private readonly static int ItemIDDefaultValue = 0;

    private int itemID_;
    /// <summary>
    /// 物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { if ((_hasBits0 & 2) != 0) { return itemID_; } else { return ItemIDDefaultValue; } }
      set {
        _hasBits0 |= 2;
        itemID_ = value;
      }
    }
    /// <summary>Gets whether the "itemID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemID {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "itemID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemID() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "fromChairID" field.</summary>
    public const int FromChairIDFieldNumber = 3;
    private readonly static int FromChairIDDefaultValue = 0;

    private int fromChairID_;
    /// <summary>
    /// 谁给送的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromChairID {
      get { if ((_hasBits0 & 4) != 0) { return fromChairID_; } else { return FromChairIDDefaultValue; } }
      set {
        _hasBits0 |= 4;
        fromChairID_ = value;
      }
    }
    /// <summary>Gets whether the "fromChairID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFromChairID {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "fromChairID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFromChairID() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgDonate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgDonate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ToChairID != other.ToChairID) return false;
      if (ItemID != other.ItemID) return false;
      if (FromChairID != other.FromChairID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasToChairID) hash ^= ToChairID.GetHashCode();
      if (HasItemID) hash ^= ItemID.GetHashCode();
      if (HasFromChairID) hash ^= FromChairID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasToChairID) {
        output.WriteRawTag(8);
        output.WriteInt32(ToChairID);
      }
      if (HasItemID) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemID);
      }
      if (HasFromChairID) {
        output.WriteRawTag(24);
        output.WriteInt32(FromChairID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasToChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToChairID);
      }
      if (HasItemID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (HasFromChairID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromChairID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgDonate other) {
      if (other == null) {
        return;
      }
      if (other.HasToChairID) {
        ToChairID = other.ToChairID;
      }
      if (other.HasItemID) {
        ItemID = other.ItemID;
      }
      if (other.HasFromChairID) {
        FromChairID = other.FromChairID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ToChairID = input.ReadInt32();
            break;
          }
          case 16: {
            ItemID = input.ReadInt32();
            break;
          }
          case 24: {
            FromChairID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
